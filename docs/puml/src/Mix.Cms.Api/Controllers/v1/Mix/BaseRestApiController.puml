@startuml
class "BaseRestApiController`2"<TDbContext,TModel> {
    # {static} _context : TDbContext
    # {static} _transaction : IDbContextTransaction
    # _lang : string
    # _forbidden : bool
    # _domain : string
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
    # GetLanguage() : void
    # <<async>> GetSingleAsync(predicate:Expression<Func<TModel, bool>>, model:TModel) : Task<RepositoryResponse<TView>>
    # <<async>> DeleteAsync(predicate:Expression<Func<TModel, bool>>, isDeleteRelated:bool) : Task<RepositoryResponse<TModel>>
    # <<async>> DeleteAsync(data:TView, isDeleteRelated:bool) : Task<RepositoryResponse<TModel>>
    # <<async>> DeleteListAsync(predicate:Expression<Func<TModel, bool>>, isRemoveRelatedModel:bool) : Task<RepositoryResponse<List<TModel>>>
    # <<async>> ExportListAsync(predicate:Expression<Func<TModel, bool>>, type:string) : Task<RepositoryResponse<FileViewModel>>
    # <<async>> GetListAsync(predicate:Expression<Func<TModel, bool>>) : Task<RepositoryResponse<PaginationModel<TView>>>
    # <<async>> SaveAsync(vm:TView, isSaveSubModel:bool) : Task<RepositoryResponse<TView>>
    # <<async>> SaveAsync(obj:JObject, predicate:Expression<Func<TModel, bool>>) : Task<RepositoryResponse<TModel>>
    # <<async>> SaveListAsync(lstVm:List<TView>, isSaveSubModel:bool) : Task<RepositoryResponse<List<TView>>>
    # SaveList(lstVm:List<TView>, isSaveSubModel:bool) : RepositoryResponse<List<TView>>
}
Controller <|-- "BaseRestApiController`2"
@enduml
