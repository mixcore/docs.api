@startuml
class "BaseGenericApiController`2"<TDbContext,TModel> {
    # {static} _context : TDbContext
    # {static} _transaction : IDbContextTransaction
    # <<readonly>> _hubContext : IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>
    # _memoryCache : IMemoryCache
    # _lang : string
    # _forbidden : bool = false
    # _forbiddenPortal : bool <<get>>
    # _domain : string
    + BaseGenericApiController(context:TDbContext, memoryCache:IMemoryCache, hubContext:IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
    # <<async>> GetSingleAsync(key:string, predicate:Expression<Func<TModel, bool>>, model:TModel) : Task<RepositoryResponse<TView>>
    # <<async>> GetSingleAsync(predicate:Expression<Func<TModel, bool>>, model:TModel) : Task<RepositoryResponse<TView>>
    # <<async>> DeleteAsync(predicate:Expression<Func<TModel, bool>>, isDeleteRelated:bool) : Task<RepositoryResponse<TModel>>
    # <<async>> DeleteAsync(data:TView, isDeleteRelated:bool) : Task<RepositoryResponse<TModel>>
    # <<async>> DeleteListAsync(predicate:Expression<Func<TModel, bool>>, isRemoveRelatedModel:bool) : Task<RepositoryResponse<List<TModel>>>
    # <<async>> ExportListAsync(predicate:Expression<Func<TModel, bool>>, type:MixStructureType) : Task<RepositoryResponse<FileViewModel>>
    # <<async>> GetListAsync(request:RequestPaging, predicate:Expression<Func<TModel, bool>>, model:TModel) : Task<RepositoryResponse<PaginationModel<TView>>>
    # <<async>> SaveAsync(vm:TView, isSaveSubModel:bool) : Task<RepositoryResponse<TView>>
    # <<async>> SaveAsync(obj:JObject, predicate:Expression<Func<TModel, bool>>) : Task<RepositoryResponse<TModel>>
    # <<async>> SaveListAsync(lstVm:List<TView>, isSaveSubModel:bool) : Task<RepositoryResponse<List<TView>>>
    # SaveList(lstVm:List<TView>, isSaveSubModel:bool) : RepositoryResponse<List<TView>>
    + SaveEncrypt(request:RequestEncrypted) : JObject
    # AlertAsync(action:string, status:int, message:string) : void
    + {static} Log(request:dynamic, response:dynamic) : void
    # ParseRequestPagingDate(request:RequestPaging) : void
    # ParseQuery(request:RequestPaging) : QueryString
    # GetLanguage() : void
}
Controller <|-- "BaseGenericApiController`2"
@enduml
