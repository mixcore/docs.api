@startuml
class ApiAccountController {
    - <<readonly>> _userManager : UserManager<ApplicationUser>
    - <<readonly>> _signInManager : SignInManager<ApplicationUser>
    - <<readonly>> _roleManager : RoleManager<IdentityRole>
    - <<readonly>> _logger : ILogger
    - <<readonly>> _helper : IdentityHelper
    + ApiAccountController(userManager:UserManager<ApplicationUser>, signInManager:SignInManager<ApplicationUser>, roleManager:RoleManager<IdentityRole>, logger:ILogger<ApiAccountController>)
    + ErrorMessage : string <<get>> <<set>>
    + <<async>> Logout() : Task<RepositoryResponse<bool>>
    + <<async>> Login(model:LoginViewModel) : Task<ActionResult<RepositoryResponse<AccessTokenViewModel>>>
    + <<async>> RefreshToken(refreshTokenId:string) : Task<RepositoryResponse<AccessTokenViewModel>>
    + <<async>> Register(model:MixRegisterViewModel) : Task<ActionResult<RepositoryResponse<AccessTokenViewModel>>>
    + <<async>> ManageUserInRole(model:UserRoleModel) : Task<RepositoryResponse<bool>>
    + <<async>> Details(viewType:string, id:string) : Task<JObject>
    + <<async>> MyProfile() : Task<JObject>
    + <<async>> Save(model:UserInfoViewModel) : Task<RepositoryResponse<UserInfoViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<RepositoryResponse<PaginationModel<UserInfoViewModel>>>
    + <<async>> ForgotPassword(model:Mix.Identity.Models.AccountViewModels.ForgotPasswordViewModel) : Task<RepositoryResponse<string>>
    + <<async>> ResetPassword(model:Mix.Identity.Models.AccountViewModels.ResetPasswordViewModel) : Task<RepositoryResponse<string>>
    + <<async>> RemoveUser(id:string) : Task<RepositoryResponse<string>>
}
Controller <|-- ApiAccountController
@enduml
