@startuml
class "BaseRestApiController`3"<TDbContext,TModel,TView> {
    # {static} _repository : DefaultRepository<TDbContext, TModel, TView>
    # {static} _context : TDbContext
    # {static} _transaction : IDbContextTransaction
    # _lang : string
    # _forbidden : bool
    # _domain : string
    # <<async>> GetSingleAsync(id:string) : Task<RepositoryResponse<TView>>
    # <<async>> GetSingleAsync(predicate:Expression<Func<TModel, bool>>) : Task<RepositoryResponse<TView>>
    # <<async>> DeleteAsync(predicate:Expression<Func<TModel, bool>>, isDeleteRelated:bool) : Task<RepositoryResponse<TModel>>
    # <<async>> DeleteAsync(data:TView, isDeleteRelated:bool) : Task<RepositoryResponse<TModel>>
    # <<async>> DeleteListAsync(predicate:Expression<Func<TModel, bool>>, isRemoveRelatedModel:bool) : Task<RepositoryResponse<List<TModel>>>
    # <<async>> ExportListAsync(predicate:Expression<Func<TModel, bool>>, type:string) : Task<RepositoryResponse<FileViewModel>>
    # <<async>> GetListAsync(predicate:Expression<Func<TModel, bool>>) : Task<RepositoryResponse<PaginationModel<TView>>>
    # <<async>> SaveAsync(vm:TView, isSaveSubModel:bool) : Task<RepositoryResponse<TView>>
    # <<async>> SaveAsync(obj:JObject, predicate:Expression<Func<TModel, bool>>) : Task<RepositoryResponse<TModel>>
    # <<async>> SaveListAsync(lstVm:List<TView>, isSaveSubModel:bool) : Task<RepositoryResponse<List<TView>>>
    # SaveList(lstVm:List<TView>, isSaveSubModel:bool) : RepositoryResponse<List<TView>>
    + <<virtual>> <<async>> Get() : Task<ActionResult<PaginationModel<TView>>>
    + <<async>> Get(id:string) : Task<ActionResult<TView>>
    + <<async>> Create(data:TView) : Task<ActionResult<TModel>>
    + <<async>> Update(id:string, data:TView) : Task<IActionResult>
    + <<async>> Patch(id:string, fields:JObject) : Task<IActionResult>
    + <<async>> Delete(id:string) : Task<ActionResult<TModel>>
    # <<async>> ClearCacheAsync(type:Type) : Task
}
Controller <|-- "BaseRestApiController`3"
@enduml
