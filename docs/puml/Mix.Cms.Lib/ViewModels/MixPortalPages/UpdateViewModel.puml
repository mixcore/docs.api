@startuml
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + TextKeyword : string <<get>> <<set>>
    + TextDefault : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Url : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixPortalPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPortalPage
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixPortalPage, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + GetParentNavs(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPortalPagePortalPages.UpdateViewModel>
    + GetChildNavs(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPortalPagePortalPages.UpdateViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPage,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel o-> "ChildNavs<MixPortalPagePortalPages.UpdateViewModel>" "List`1"
UpdateViewModel o-> "ParentNavs<MixPortalPagePortalPages.UpdateViewModel>" "List`1"
@enduml
