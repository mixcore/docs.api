@startuml
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Fields : string <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + TemplateFolderType : string <<get>>
    + ActivedTheme : int <<get>>
    + ThemeFolderType : string <<get>>
    + TemplateFolder : string <<get>>
    + FormFolderType : string <<get>>
    + FormFolder : string <<get>>
    + EdmFolderType : string <<get>>
    + EdmFolder : string <<get>>
    + PostId : string <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixModule, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModule
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixModule>>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixModule, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} <<async>> SaveByModuleName(culture:string, createdBy:string, name:string, formName:string, obj:JObject, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<JObject>>
    + LoadData(postId:int?, productId:int?, pageId:int?, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
class "PaginationModel`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModule,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
UpdateViewModel --> "Type" MixModuleType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel o-> "Data<MixModuleDatas.ReadViewModel>" "PaginationModel`1"
UpdateViewModel --> "Columns<ModuleFieldViewModel>" "List`1"
UpdateViewModel --> "Templates<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "Forms<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "Edms<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
UpdateViewModel --> "SysCategories<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
UpdateViewModel --> "SysTags<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
@enduml
