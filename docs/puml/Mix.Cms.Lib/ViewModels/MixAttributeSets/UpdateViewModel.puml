@startuml
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + EdmSubject : string <<get>> <<set>>
    + EdmFrom : string <<get>> <<set>>
    + EdmAutoSend : bool? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSet
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> SaveSubModels(parent:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSet,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Type" MixDatabaseType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "Fields<MixAttributeFields.UpdateViewModel>" "List`1"
@enduml
