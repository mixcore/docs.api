@startuml
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + CssClass : string <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + StaticUrl : string <<get>> <<set>>
    + Level : int? <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + TotalPost : int <<get>> <<set>>
    + TotalProduct : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + DetailsUrl : string <<get>>
    + ReadViewModel()
    + ReadViewModel(model:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} <<async>> UpdateInfosAsync(cates:List<ReadViewModel>) : Task<RepositoryResponse<List<ReadViewModel>>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPage,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadViewModel --> "Type" MixPageType
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "Childs<ReadViewModel>" "List`1"
@enduml
