@startuml
class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IHostBuilder
}
class Startup {
    + Startup(configuration:IConfiguration)
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder, env:IWebHostEnvironment) : void
}
Startup --> "Configuration" IConfiguration
class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IHostBuilder
}
class ServiceCollectionExtensions <<static>> {
    + {static} AddMyGraphQL(services:IServiceCollection) : IServiceCollection
}
class Startup {
    + Startup(configuration:IConfiguration)
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder, env:IWebHostEnvironment) : void
}
Startup --> "Configuration" IConfiguration
class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IHostBuilder
}
class ServiceCollectionExtensions <<static>> {
    + {static} AddMixRestApi(services:IServiceCollection) : IServiceCollection
    + {static} UseMixRestApi(app:IApplicationBuilder) : IApplicationBuilder
}
class Startup {
    + Startup(configuration:IConfiguration)
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder, env:IWebHostEnvironment) : void
}
Startup --> "Configuration" IConfiguration
class MixCmsHelper {
    + {static} GetSEOString(input:string) : string
    + {static} LoadDataFile(folder:string, name:string) : FileViewModel
    + {static} GetAssetFolder(culture:string) : string
    + {static} GetTemplateFolder(culture:string) : string
    + {static} Property(obj:JObject, fieldName:string) : T
    + {static} GetCategory(Url:IUrlHelper, culture:string, cateType:MixPageType, activePath:string) : List<ViewModels.MixPages.ReadListItemViewModel>
    + {static} GetRouterUrl(routeValues:object, request:HttpRequest, Url:IUrlHelper) : string
    + {static} FormatPrice(price:double?, oldPrice:string) : string
    + {static} CheckIsPrice(number:string) : bool
    + {static} ReversePrice(formatedPrice:string) : double
    + {static} LogException(ex:Exception) : void
    + {static} GetModuleAsync(name:string, culture:string, url:IUrlHelper) : System.Threading.Tasks.Task<ViewModels.MixModules.ReadMvcViewModel>
    + {static} <<async>> GetPageAsync(id:int, culture:string) : System.Threading.Tasks.Task<ViewModels.MixPages.ReadMvcViewModel>
    + {static} GetModule(name:string, culture:string) : ViewModels.MixModules.ReadMvcViewModel
    + {static} GetPage(id:int, culture:string) : ViewModels.MixPages.ReadMvcViewModel
    + {static} <<async>> GetTemplateByPath(themeName:string, templatePath:string) : System.Threading.Tasks.Task<ViewModels.MixTemplates.ReadViewModel>
    + {static} <<async>> GetNavigation(name:string, culture:string, Url:IUrlHelper) : System.Threading.Tasks.Task<ViewModels.MixAttributeSetDatas.Navigation>
    + {static} <<async>> GetListPostByAdditionalField(fieldName:string, fieldValue:object, culture:string, dataType:MixDataType, filterType:MixCompareOperatorKind, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} FilterObjectSet(propName:string, data2:T, filterType:MixCompareOperatorKind) : Expression<Func<TModel, bool>>
    + <<async>> {static} GetPostlistByMeta(context:HttpContext, culture:string, type:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + <<async>> {static} GetPostlistByAdditionalField(fieldName:string, value:string, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> GetAttributeDataByParent(culture:string, attributeSetName:string, parentId:string, parentType:MixDatabaseParentType, orderBy:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> GetPostListByPageId(context:HttpContext, pageId:int, keyword:string, culture:string, orderBy:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<Lib.ViewModels.MixPagePosts.ReadViewModel>>>
    + {static} <<async>> GetAttributeDataListBySet(context:HttpContext, attributeSetName:string, culture:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<Lib.ViewModels.MixAttributeSetDatas.ReadMvcViewModel>>>
}
class MixConstants {
    + <<const>> CONST_CMS_CONNECTION : string = "MixCmsConnection"
    + <<const>> CONST_MESSENGER_CONNECTION : string = "MixMessengerConnection"
    + <<const>> CONST_ACCOUNT_CONNECTION : string = "MixAccountConnection"
    + <<const>> CONST_SETTING_IS_MYSQL : string = "IsMysql"
    + <<const>> CONST_SETTING_DATABASE_PROVIDER : string = "DatabaseProvider"
    + <<const>> CONST_SETTING_LANGUAGE : string = "Language"
    + <<const>> CONST_FILE_APPSETTING : string = "appsettings.json"
    + <<const>> CONST_DEFAULT_FILE_APPSETTING : string = "default.appsettings.json"
    + <<const>> CONST_FILE_CONFIGURATIONS : string = "configurations.json"
    + <<const>> CONST_FILE_ATTRIBUTE_SETS : string = "attribute_sets.json"
    + <<const>> CONST_FILE_POSITIONS : string = "menu-positions.json"
    + <<const>> CONST_FILE_LANGUAGES : string = "languages.json"
    + <<const>> CONST_FILE_CULTURES : string = "cultures.json"
    + <<const>> CONST_FILE_PAGES : string = "pages.json"
    + <<const>> CONST_PATH_HOME_ACCESS_DENIED : string = "/home/access-denied"
    + <<const>> CONST_PATH_HOME_ERROR : string = "/Home/Error"
    + <<const>> CONST_SECTION_LOGGING : string = "Logging"
    + <<const>> CONST_ROUTE_DEFAULT : string = "default"
    + <<const>> CONST_APPID : string = "SetYourDataHere"
    + <<const>> CONST_APPSECRET : string = "SetYourDataHere"
    + <<const>> CONST_DOMAIN_NOTIFICATION_KEY_COMMIT : string = "Commit"
    + <<const>> CONST_DOMAIN_NOTIFICATION_KEY_COMMIT_VALUE : string = "We had a problem during saving your data."
    + <<const>> CONST_DOMAIN_NOTIFICATION : string = "DomainNotification"
    + <<const>> CONST_DEFAULT_EXTENSIONS_FILE_PATH : string = "\\Contents\\Extensions\\"
    + <<const>> CONST_DEFAULT_EXTENSION_FILE_NAME : string = "extensions.json"
    + <<const>> CONST_DEFAULT_STRING_ID : string = "default"
}
class AttributeSetName <<static>> {
    + <<const>> ADDITIONAL_FIELD_PAGE : string = "sys_additional_field_page"
    + <<const>> ADDITIONAL_FIELD_POST : string = "sys_additional_field_post"
    + <<const>> ADDITIONAL_FIELD_MODULE : string = "sys_additional_field_module"
    + <<const>> NAVIGATION : string = "sys_navigation"
    + <<const>> MENU_ITEM : string = "sys_menu_item"
    + <<const>> SYSTEM_CATEGORY : string = "sys_category"
    + <<const>> SYSTEM_TAG : string = "sys_tag"
}
class TemplateFolder <<static>> {
    + <<const>> Masters : string = "Masters"
    + <<const>> Layouts : string = "Layouts"
    + <<const>> Pages : string = "Pages"
    + <<const>> Posts : string = "Posts"
    + <<const>> Modules : string = "Modules"
    + <<const>> Forms : string = "Forms"
    + <<const>> Edms : string = "Edms"
}
class DefaultTemplate <<static>> {
    + <<const>> Master : string = "_Layout.cshtml"
    + <<const>> Page : string = "_Blank.cshtml"
    + <<const>> Post : string = "_Blank.cshtml"
    + <<const>> Module : string = "_Blank.cshtml"
}
MixConstants +-- AttributeSetName
MixConstants +-- TemplateFolder
MixConstants +-- DefaultTemplate
class ServiceCollectionExtensions <<static>> {
    + {static} AddMixScheduler(services:IServiceCollection, configuration:IConfiguration) : IServiceCollection
    + {static} UseMixScheduler(app:IApplicationBuilder) : IApplicationBuilder
    + {static} <<async>> StartScheduler() : Task
}
class ConsoleLogProvider {
    + GetLogger(name:string) : Logger
    + OpenNestedContext(message:string) : IDisposable
    + OpenMappedContext(key:string, value:string) : IDisposable
    + OpenMappedContext(key:string, value:object, destructure:bool) : IDisposable
}
ServiceCollectionExtensions +-- ConsoleLogProvider
ILogProvider <|-- ConsoleLogProvider
class Constants {
    + <<const>> DefaultDevice : string = "website"
}
class HubMethods {
    + <<const>> ReceiveMethod : string = "receive_message"
    + <<const>> SendMessage : string = "send_message"
    + <<const>> SendGroupMessage : string = "send_group_message"
    + <<const>> SendPrivateMessage : string = "send_private_message"
    + <<const>> SaveData : string = "save_data"
    + <<const>> JoinGroup : string = "join_group"
    + <<const>> NewMessage : string = "new_message"
    + <<const>> NewNotification : string = "new_notification"
    + <<const>> NewMember : string = "new_member"
}
class HubMessages {
    + <<const>> HubMemberName : string = "hub_member"
    + <<const>> HubMemberFieldName : string = "hub_name"
    + <<const>> UnknowErrorMsg : string = "Unknow"
}
class Enums {
}
enum MessageReponseKey {
    NewMessage,
    NewGroupMessage,
    NewInvite,
    NewRequest,
    RemovedTeam,
    RemovedMember,
    MemberOffline,
    NewTeam,
    NewMember,
    Connect,
    ConnectSuccess,
    ConnectFailed,
    ConnectInitData,
    GetTeam,
    GetTeamMessages,
    PreviousMessages,
    SendMessage,
    GetTeamNotifications,
    NotMembered,
    CancelRequest,
    RejectInvite,
    Error,
}
enum ApiResponseKey {
    Succeed,
    Failed,
}
enum TeamResponseKey {
    GetTeamsSucceed,
    GetTeamsFailed,
    SaveTeamSucceed,
    SaveTeamFailed,
    InvalidModel,
    NameExisted,
    NameRequired,
    CountryRequired,
    SearchTeamMembersSucceed,
    SearchTeamMembersFailed,
    SetMemberStatusSucceed,
    SetMemberStatusFailed,
    UnAuthorized,
    TeamFulled,
}
enum OnlineStatus {
    Disconnected= 0,
    Connected= 1,
}
enum MemberStatus {
    Requested= 0,
    Invited= 1,
    AdminRejected= 2,
    MemberRejected= 3,
    Banned= 4,
    Membered= 5,
    AdminRemoved= 6,
    MemberCanceled= 7,
    Guest= 8,
    MemberAccepted= 9,
    MemberLeft= 10,
}
enum MessageType {
    String= 0,
    Notification= 1,
    Image= 2,
    File= 3,
    Voice= 4,
    Location= 5,
    Html= 6,
}
enum NotificationType {
    NewMessage= 0,
    Join= 1,
    Left= 2,
}
enum DeviceStatus {
    Deactived= 0,
    Actived= 1,
    Banned= 2,
    Disconnected= 3,
}
Constants +-- HubMethods
Constants +-- HubMessages
Constants +-- Enums
Enums +-- MessageReponseKey
Enums +-- ApiResponseKey
Enums +-- TeamResponseKey
Enums +-- OnlineStatus
Enums +-- MemberStatus
Enums +-- MessageType
Enums +-- NotificationType
Enums +-- DeviceStatus
class ServiceCollectionExtensions <<static>> {
    + {static} AddMixSignalR(services:IServiceCollection) : IServiceCollection
    + {static} UseMixSignalR(app:IApplicationBuilder) : IApplicationBuilder
}
class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IHostBuilder
}
class Startup <<partial>> {
    + Startup(configuration:IConfiguration)
    <<readonly>> MixcoreAllowSpecificOrigins : string = "_mixcoreAllowSpecificOrigins"
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder, env:IWebHostEnvironment) : void
}
Startup --> "Configuration" IConfiguration
class Const {
    + <<const>> CONST_DEFAULT_CONNECTION : string = "AccountConnection"
    + <<const>> CONST_FILE_APPSETTING : string = "appsettings.json"
}
enum ApplicationTypes {
    JavaScript= 0,
    NativeConfidential= 1,
}
Const +-- ApplicationTypes
class IdentityHelper {
    + IdentityHelper(userManager:UserManager<ApplicationUser>, signInManager:SignInManager<ApplicationUser>, roleManager:RoleManager<IdentityRole>)
    + <<async>> GenerateAccessTokenAsync(user:ApplicationUser, isRemember:bool) : Task<AccessTokenViewModel>
    + <<async>> GenerateTokenAsync(user:ApplicationUser, expires:DateTime, refreshToken:string) : Task<string>
    + <<async>> GetClaimsAsync(user:ApplicationUser) : Task<List<Claim>>
    + CreateClaim(type:string, value:string) : Claim
    + GetPrincipalFromExpiredToken(token:string) : ClaimsPrincipal
}
class JwtSecurityKey <<static>> {
    + {static} Create(secret:string) : SymmetricSecurityKey
}
IdentityHelper +-- JwtSecurityKey
class GraphqlController {
    {static} GraphqlController()
    + <<async>> Get(query:QueryRequest) : Task<ActionResult>
}
ControllerBase <|-- GraphqlController
class DbContextExtensions <<static>> {
    + {static} Query(context:DbContext, entityName:string) : IQueryable
    + {static} Query(context:DbContext, entityType:Type) : IQueryable
}
DbContextExtensions o-> "SetMethod" MethodInfo
class GraphQLQuery {
    + GraphQLQuery(dbContext:DbContext, dbMetadata:IDatabaseMetadata, tableNameLookup:ITableNameLookup)
}
class "ObjectGraphType`1"<T> {
}
"ObjectGraphType`1" "<object>" <|-- GraphQLQuery
class RequestFormSizeLimitAttribute {
    + RequestFormSizeLimitAttribute(valueCountLimit:int)
    + Order : int <<get>> <<set>>
    + OnAuthorization(context:AuthorizationFilterContext) : void
}
Attribute <|-- RequestFormSizeLimitAttribute
IAuthorizationFilter <|-- RequestFormSizeLimitAttribute
IOrderedFilter <|-- RequestFormSizeLimitAttribute
class MixAppSettingKeywords {
    + <<const>> SiteName : string = "SiteName"
    + <<const>> ConnectionString : string = "ConnectionString"
    + <<const>> OrderBy : string = "OrderBy"
    + <<const>> DefaultBlankTemplateFolder : string = "DefaultTemplateFolder"
    + <<const>> DefaultTemplateFolder : string = "DefaultTemplateFolder"
    + <<const>> Language : string = "Language"
    + <<const>> DefaultStatus : string = "DefaultContentStatus"
    + <<const>> DefaultCulture : string = "DefaultCulture"
    + <<const>> IsMysql : string = "IsMysql"
    + <<const>> Domain : string = "Domain"
    + <<const>> PortalThemeSettings : string = "PortalThemeSettings"
    + <<const>> ThemeId : string = "ThemeId"
    + <<const>> ThemeName : string = "ThemeName"
    + <<const>> ThemeFolder : string = "ThemeFolder"
    + <<const>> ApiEncryptKey : string = "ApiEncryptKey"
    + <<const>> ApiEncryptIV : string = "ApiEncryptIV"
    + <<const>> IsEncryptApi : string = "IsEncryptApi"
    + <<const>> TemplateExtension : string = "TemplateExtension"
    + <<const>> DefaultTheme : string = "DefaultTheme"
    + <<const>> DefaultTemplate : string = "DefaultTemplate"
    + <<const>> DefaultTemplateContent : string = "DefaultTemplateContent"
    + <<const>> DefaultContentStatus : string = "DefaultContentStatus"
    + <<const>> NextSyncContent : string = "NextSyncContent"
    + <<const>> AllowedHosts : string = "AllowedHosts"
}
class MixConfigurations <<static>> {
    + <<const>> CONST_CMS_CONNECTION : string = "MixCmsConnection"
    + <<const>> CONST_MESSENGER_CONNECTION : string = "MixMessengerConnection"
    + <<const>> CONST_ACCOUNT_CONNECTION : string = "MixAccountConnection"
    + <<const>> CONST_SETTING_IS_MYSQL : string = "IsMysql"
    + <<const>> CONST_SETTING_DATABASE_PROVIDER : string = "DatabaseProvider"
    + <<const>> CONST_SETTING_LANGUAGE : string = "Language"
    + <<const>> CONST_FILE_APPSETTING : string = "appsettings.json"
    + <<const>> CONST_DEFAULT_FILE_APPSETTING : string = "default.appsettings.json"
    + <<const>> CONST_FILE_CONFIGURATIONS : string = "configurations.json"
    + <<const>> CONST_FILE_ATTRIBUTE_SETS : string = "attribute_sets.json"
    + <<const>> CONST_FILE_POSITIONS : string = "menu-positions.json"
    + <<const>> CONST_FILE_LANGUAGES : string = "languages.json"
    + <<const>> CONST_FILE_CULTURES : string = "cultures.json"
    + <<const>> CONST_FILE_PAGES : string = "pages.json"
    + <<const>> CONST_PATH_HOME_ACCESS_DENIED : string = "/home/access-denied"
    + <<const>> CONST_PATH_HOME_ERROR : string = "/Home/Error"
    + <<const>> CONST_SECTION_LOGGING : string = "Logging"
    + <<const>> CONST_ROUTE_DEFAULT : string = "default"
    + <<const>> CONST_APPID : string = "SetYourDataHere"
    + <<const>> CONST_APPSECRET : string = "SetYourDataHere"
    + <<const>> CONST_DOMAIN_NOTIFICATION_KEY_COMMIT : string = "Commit"
    + <<const>> CONST_DOMAIN_NOTIFICATION_KEY_COMMIT_VALUE : string = "We had a problem during saving your data."
    + <<const>> CONST_DOMAIN_NOTIFICATION : string = "DomainNotification"
    + <<const>> CONST_DEFAULT_EXTENSIONS_FILE_PATH : string = "\\Contents\\Extensions\\"
    + <<const>> CONST_DEFAULT_EXTENSION_FILE_NAME : string = "extensions.json"
    + <<const>> CONST_DEFAULT_STRING_ID : string = "default"
    + <<const>> CONST_UPLOAD_FOLDER_FORMAT : string = "MMM-yyyy"
}
class "List`1"<T> {
}
MixConfigurations o-> "cachedKeys<string>" "List`1"
class MixDatabaseNames {
    + <<const>> ADDITIONAL_FIELD_PAGE : string = "sys_additional_field_page"
    + <<const>> ADDITIONAL_FIELD_POST : string = "sys_additional_field_post"
    + <<const>> ADDITIONAL_FIELD_MODULE : string = "sys_additional_field_module"
    + <<const>> NAVIGATION : string = "sys_navigation"
    + <<const>> MENU_ITEM : string = "sys_menu_item"
    + <<const>> SYSTEM_CATEGORY : string = "sys_category"
    + <<const>> SYSTEM_TAG : string = "sys_tag"
}
class MixDefaultThemes <<static>> {
    + <<const>> Blank : string = "default_blank"
    + <<const>> Default : string = "default"
}
class MixDefaultValues {
    + <<const>> TemplateExtension : string = ".cshtml"
    + <<const>> DefaultTemplateName : string = @"_Blank.cshtml"
}
class MixFileExtensions {
    + <<const>> CsHtml : string = ".cshtml"
    + <<const>> Json : string = ".json"
    + <<const>> Zip : string = ".zip"
}
class MixFolders {
    + <<const>> WebRootPath : string = "wwwroot"
    + <<const>> TemplatesFolder : string = "Views/Shared/Templates"
    + <<const>> JsonDataFolder : string = "MixContent/data"
    + <<const>> MixCacheFolder : string = "MixContent/cache"
    + <<const>> MixLogsFolder : string = "MixContent/logs"
    + <<const>> ExportFolder : string = "mix-content/exports"
    + <<const>> ImportFolder : string = "mix-content/imports/themes"
    + <<const>> SiteContentAssetsFolder : string = "mix-content/assets"
    + <<const>> SiteContentUploadsFolder : string = "mix-content/uploads"
}
class MixTemplateFolders <<static>> {
    + <<const>> Masters : string = "Masters"
    + <<const>> Layouts : string = "Layouts"
    + <<const>> Pages : string = "Pages"
    + <<const>> Posts : string = "Posts"
    + <<const>> Modules : string = "Modules"
    + <<const>> Forms : string = "Forms"
    + <<const>> Edms : string = "Edms"
}
class "BaseReadOnlyApiController`3"<TDbContext,TModel,TView> {
    + <<virtual>> <<async>> Get() : Task<ActionResult<PaginationModel<TView>>>
    + <<async>> Get(id:string) : Task<ActionResult<TView>>
    + <<virtual>> Default() : ActionResult<TView>
    + <<virtual>> <<async>> ClearCacheAsync(id:string) : Task<ActionResult>
    + <<virtual>> <<async>> ClearCacheAsync() : Task<ActionResult>
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
Controller <|-- "BaseReadOnlyApiController`3"
class "BaseRestApiController`3"<TDbContext,TModel,TView> {
    + <<virtual>> <<async>> Get() : Task<ActionResult<PaginationModel<TView>>>
    + <<async>> Get(id:string) : Task<ActionResult<TView>>
    + <<virtual>> Default() : ActionResult<TView>
    + <<virtual>> <<async>> ClearCacheAsync(id:string) : Task<ActionResult>
    + <<virtual>> <<async>> ClearCacheAsync() : Task<ActionResult>
    + <<virtual>> <<async>> Create(data:TView) : Task<ActionResult<TModel>>
    + <<virtual>> <<async>> Update(id:string, data:TView) : Task<IActionResult>
    + <<virtual>> <<async>> Patch(id:string, fields:JObject) : Task<IActionResult>
    + <<virtual>> <<async>> Delete(id:string) : Task<ActionResult<TModel>>
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
Controller <|-- "BaseRestApiController`3"
class "BaseAuthorizedRestApiController`5"<TDbContext,TModel,TView,TRead,TDelete> {
    + <<virtual>> <<async>> Get() : Task<ActionResult<PaginationModel<TRead>>>
    + <<async>> Get(id:string) : Task<ActionResult<TView>>
    + <<async>> Duplicate(id:string) : Task<ActionResult<TView>>
    + <<virtual>> Default() : ActionResult<TView>
    + <<virtual>> <<async>> ClearCacheAsync(id:string) : Task<ActionResult>
    + <<virtual>> <<async>> ClearCacheAsync() : Task<ActionResult>
    + <<virtual>> <<async>> Create(data:TView) : Task<ActionResult<TModel>>
    + <<virtual>> <<async>> Update(id:string, data:TView) : Task<IActionResult>
    + <<virtual>> <<async>> Patch(id:string, fields:JObject) : Task<IActionResult>
    + <<virtual>> <<async>> Delete(id:string) : Task<ActionResult<TModel>>
    + <<async>> ListActionAsync(data:ListAction<string>) : Task<ActionResult<JObject>>
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
Controller <|-- "BaseAuthorizedRestApiController`5"
class "BaseAuthorizedRestApiController`4"<TDbContext,TModel,TView,TRead> {
    + <<virtual>> <<async>> Get() : Task<ActionResult<PaginationModel<TRead>>>
    + <<async>> Get(id:string) : Task<ActionResult<TView>>
    + <<virtual>> Default() : ActionResult<TView>
    + <<virtual>> <<async>> ClearCacheAsync(id:string) : Task<ActionResult>
    + <<virtual>> <<async>> ClearCacheAsync() : Task<ActionResult>
    + <<virtual>> <<async>> Create(data:TView) : Task<ActionResult<TModel>>
    + <<virtual>> <<async>> Update(id:string, data:TView) : Task<IActionResult>
    + <<virtual>> <<async>> Patch(id:string, fields:JObject) : Task<IActionResult>
    + <<virtual>> <<async>> Delete(id:string) : Task<ActionResult<TModel>>
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
Controller <|-- "BaseAuthorizedRestApiController`4"
enum MixCalculateOperatorKind {
    Add,
    Subtract,
    Multiply,
    Divide,
    Modulo,
    Has,
}
enum MixCompareOperatorKind {
    Equal,
    NotEqual,
    Contain,
    NotContain,
    InRange,
    NotInRange,
    GreaterThanOrEqual,
    GreaterThan,
    LessThanOrEqual,
    LessThan,
}
enum MixContentStatus {
    Deleted,
    Preview,
    Published,
    Draft,
    Schedule,
}
enum MixDatabaseContentAssociationType {
    DataData,
    DataPost,
    DataPage,
    DataModule,
}
enum MixDatabaseParentType {
    Set,
    Post,
    Page,
    Module,
}
enum MixDatabaseProvider {
    MSSQL,
    MySQL,
    PostgreSQL,
    SQLITE,
}
enum MixDatabaseType {
    System,
    Service,
}
enum MixDataType {
    Custom,
    DateTime,
    Date,
    Time,
    Duration,
    PhoneNumber,
    Double,
    Text,
    Html,
    MultilineText,
    EmailAddress,
    Password,
    Url,
    ImageUrl,
    CreditCard,
    PostalCode,
    Upload,
    Color,
    Boolean,
    Icon,
    VideoYoutube,
    TuiEditor,
    Integer,
    Reference,
    QRCode,
}
enum MixExpressionRule {
    Eq,
    Neq,
    Ct,
    Nct,
    Ra,
    Nra,
    Gte,
    Gt,
    Lte,
    Lt,
}
enum MixLogicalOperatorKind {
    Or,
    And,
}
enum MixModuleType {
    Content,
    Data,
    ListPost,
}
enum MixPageType {
    System,
    Home,
    Article,
    ListPost,
}
enum MixResponseKey {
    NotFound= 0,
    OK= 1,
    BadRequest= 2,
}
enum MixResponseStatus {
    Ok= 200,
    BadRequest= 400,
    UnAuthorized= 401,
    Forbidden= 403,
    ServerError= 500,
}
enum MixStructureType {
    Page,
    Module,
    Post,
    Database,
}
enum MixTemplateFolderType {
    Layouts,
    Pages,
    Modules,
    Forms,
    Edms,
    Posts,
    Widgets,
    Masters,
}
enum MixUrlAliasType {
    Page,
    Post,
    Product,
    Module,
    ModuleData,
}
enum MixUserStatus {
    Active,
    Deactive,
}
class MixAttributeValueModelExtensions <<static>> {
    + {static} ToJProperty(item:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction) : JProperty
    + {static} ToModelValue(item:ViewModels.MixAttributeSetValues.UpdateViewModel, property:JToken) : void
    + {static} LoadAllReferenceData(obj:JObject, dataId:string, attributeSetId:int, culture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class ModelBuilderExtensions <<static>> {
    + {static} ApplyAllConfigurationsFromNamespace(modelBuilder:ModelBuilder, assembly:Assembly, ns:string) : ModelBuilder
    + {static} ApplyPostgresIddentityConfigurations(modelBuilder:ModelBuilder) : ModelBuilder
    + {static} ApplyIddentityConfigurations(modelBuilder:ModelBuilder) : ModelBuilder
}
class ServiceCollectionExtensions <<static>> {
    + {static} AddMyGraphQL(services:IServiceCollection) : IServiceCollection
    + {static} AddGenerateApis(services:IServiceCollection) : IServiceCollection
}
class MixUrlHelperExtensions <<static>> {
    + {static} AbsoluteAction(url:IUrlHelper, actionName:string, controllerName:string, routeValues:object) : string
    + {static} AbsoluteContent(url:IUrlHelper, contentPath:string) : string
    + {static} AbsoluteRouteUrl(url:IUrlHelper, routeName:string, routeValues:object) : string
}
class MixAttributeSetValueHelper {
    + {static} <<async>> FilterByOtherValueAsync(culture:string, attributeSetName:string, filterType:string, queries:Dictionary<string, string>, responseName:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<List<TView>>>
}
class QueryFilterHelper {
    + TestCreateModel() : void
    + {static} CreateExpression(jsonQuery:JObject) : Expression<Func<MixAttributeSetValue, bool>>
}
interface MvcViewModel {
    + Id : int <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + ThumbnailUrl : string <<get>>
    + SeoDescription : string <<get>> <<set>>
    + TemplatePath : string <<get>>
    + DetailsUrl : string <<get>>
}
class IpRestrictionMiddleware {
    + IpRestrictionMiddleware(next:RequestDelegate, ipSecuritySettings:IOptions<IpSecuritySettings>)
    + <<async>> Invoke(context:HttpContext) : Task
}
class IpSecuritySettings {
    + IsRetrictIp : bool <<get>> <<set>>
    + AllowedPortalIps : string <<get>> <<set>>
    + AllowedIps : string <<get>> <<set>>
    + ExceptIps : string <<get>> <<set>>
}
class "List`1"<T> {
}
IpRestrictionMiddleware --> "Next" RequestDelegate
IpRestrictionMiddleware --> "IpSecuritySettings" IpSecuritySettings
IpSecuritySettings --> "AllowedIPsList<string>" "List`1"
class ExpressionModel {
    + {static} Create(expressType:MixLogicalOperatorKind) : ExpressionModel
    + AddFunction(function:FunctionModel) : ExpressionModel
    + AddExpression(expression:ExpressionModel) : ExpressionModel
}
class "List`1"<T> {
}
ExpressionModel --> "ExpressionType" MixLogicalOperatorKind
ExpressionModel --> "Functions<FunctionModel>" "List`1"
ExpressionModel --> "Expressions<ExpressionModel>" "List`1"
class FunctionModel {
    + FieldName : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + MinValue : string <<get>> <<set>>
    + MaxValue : string <<get>> <<set>>
    + {static} Create(rule:MixCompareOperatorKind, fieldName:string, value:string) : FunctionModel
    + {static} Create(operatorKind:MixCompareOperatorKind, fieldName:string, minValue:string, maxValue:string) : FunctionModel
}
FunctionModel --> "Rule" MixCompareOperatorKind
class CommonRepository {
    + LoadCultures(initCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : List<SupportedCulture>
}
CommonRepository --> "Instance" CommonRepository
class TemplateRepository {
    + GetTemplate(templatePath:string, templates:List<TemplateViewModel>, templateFolder:string) : TemplateViewModel
    + GetTemplate(name:string, templateFolder:string) : TemplateViewModel
    + DeleteTemplate(name:string, templateFolder:string) : bool
    + GetTemplates(folder:string) : List<TemplateViewModel>
    + SaveTemplate(file:TemplateViewModel) : bool
}
TemplateRepository --> "Instance" TemplateRepository
class InitCmsService {
    + InitCmsService()
    + {static} <<async>> InitCms(siteName:string, culture:InitCulture) : Task<RepositoryResponse<bool>>
    + {static} <<async>> InitSiteData(siteName:string, culture:InitCulture) : Task<RepositoryResponse<bool>>
    + {static} <<async>> InitConfigurationsAsync(siteName:string, specifiCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} <<async>> InitAttributeSetsAsync(_context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> InitLanguagesAsync(specificulture:string, languages:List<MixLanguage>, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> InitThemesAsync(siteName:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class MixCacheService {
    + MixCacheService()
    + {static} GetAsync(key:string) : Task<T>
    + {static} RemoveCacheAsync() : Task
}
class "DefaultModelRepository`2"<T1,T2> {
}
MixCacheService --> "Repository<MixCmsContext,MixCache>" "DefaultModelRepository`2"
MixCacheService --> "Instance" MixCacheService
class MixService {
    + MixService()
    + {static} GetConnectionString(name:string) : string
    + {static} SetConnectionString(name:string, value:string) : void
    + CheckValidCulture(specificulture:string) : bool
    + {static} GetAuthConfig(name:string) : T
    + {static} SetAuthConfig(name:string, value:T) : void
    + {static} GetIpConfig(name:string) : T
    + {static} SetIpConfig(name:string, value:T) : void
    + {static} GetMixConfig(name:string) : T
    + {static} SetMixConfig(name:string, value:T) : void
    + {static} GetConfig(name:string) : T
    + {static} GetEnumConfig(name:string) : T
    + {static} SetConfig(name:string, value:T) : void
    + {static} GetConfig(name:string, culture:string) : T
    + {static} SetConfig(name:string, culture:string, value:T) : void
    + {static} Translate(name:string, culture:string) : T
    + {static} TranslateString(name:string, culture:string) : string
    + {static} GetTranslator(culture:string) : JObject
    + {static} GetLocalSettings(culture:string) : JObject
    + {static} GetGlobalSetting() : JObject
    + {static} SaveSettings() : bool
    + {static} SaveSettings(content:string) : bool
    + {static} Reload() : void
    + {static} LoadFromDatabase(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} SendEdm(culture:string, template:string, data:JObject, subject:string, from:string) : Task
    + {static} SendMail(subject:string, message:string, to:string, from:string) : void
    + {static} LogException(ex:Exception) : void
    + {static} GetTemplateFolder(culture:string) : string
    + {static} GetTemplateUploadFolder(culture:string) : string
    + {static} GetDbContext() : MixCmsContext
    + {static} GetAccountDbContext() : MixCmsAccountContext
    + {static} <<async>> RemoveCacheAsync(type:Type, key:string) : Task
}
MixService --> "Instance" MixService
MixService --> "DefaultInstance" MixService
class GlobalSettingsViewModel {
    + Domain : string <<get>> <<set>>
    + Lang : string <<get>> <<set>>
    + LangIcon : string <<get>> <<set>>
    + ThemeId : int <<get>> <<set>>
    + ApiEncryptKey : string <<get>> <<set>>
    + ApiEncryptIV : string <<get>> <<set>>
    + IsEncryptApi : bool <<get>> <<set>>
    + LastUpdateConfiguration : DateTime? <<get>> <<set>>
}
class FilePageViewModel {
}
class InitCulture {
    + Specificulture : string <<get>> <<set>>
    + FullName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Alias : string <<get>> <<set>>
}
class ExtraProperty {
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
}
class DataValueViewModel {
    + Value : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
}
class TemplateViewModel {
    + FileFolder : string <<get>> <<set>>
    + Filename : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + Scripts : string <<get>> <<set>>
    + Styles : string <<get>> <<set>>
    + FileStream : string <<get>> <<set>>
}
class ModuleFieldViewModel {
    + Name : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsUnique : bool <<get>> <<set>>
    + IsRequired : bool <<get>> <<set>>
    + IsDisplay : bool <<get>> <<set>>
    + IsSelect : bool <<get>> <<set>>
    + IsGroupBy : bool <<get>> <<set>>
    + Width : int <<get>> <<set>>
}
class ApiModuleDataValueViewModel {
    + Name : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + IsUnique : bool <<get>> <<set>>
    + IsRequired : bool <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + IsDisplay : bool <<get>> <<set>>
    + IsSelect : bool <<get>> <<set>>
    + IsGroupBy : bool <<get>> <<set>>
    + Validate(id:IConvertible, specificulture:string, jItem:JObject, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
}
class MobileComponent {
    + Id : int <<get>> <<set>>
    + ComponentType : string <<get>> <<set>>
    + StyleName : string <<get>> <<set>>
    + DataType : string <<get>> <<set>>
    + DataValue : string <<get>> <<set>>
    + MobileComponent(element:XElement)
}
class SiteMap {
    + LastMod : DateTime? <<get>> <<set>>
    + ChangeFreq : string <<get>> <<set>>
    + Priority : double <<get>> <<set>>
    + Loc : string <<get>> <<set>>
    + ParseXElement() : XElement
}
class "ListAction`1"<T> {
    + Action : string <<get>> <<set>>
}
class SitemapLanguage {
    + HrefLang : string <<get>> <<set>>
    + Href : string <<get>> <<set>>
}
class FileInputModel {
}
class "List`1"<T> {
}
GlobalSettingsViewModel --> "PortalThemeSettings" JObject
GlobalSettingsViewModel --> "Cultures<SupportedCulture>" "List`1"
GlobalSettingsViewModel --> "PageTypes<object>" "List`1"
GlobalSettingsViewModel --> "ModuleTypes<object>" "List`1"
GlobalSettingsViewModel --> "AttributeSetTypes<object>" "List`1"
GlobalSettingsViewModel --> "DataTypes<object>" "List`1"
GlobalSettingsViewModel --> "Statuses<object>" "List`1"
FilePageViewModel --> "Files<FileViewModel>" "List`1"
FilePageViewModel --> "Directories<string>" "List`1"
ExtraProperty --> "DataType" MixDataType
DataValueViewModel o-> "DataType" MixDataType
ModuleFieldViewModel o-> "Options" JArray
ModuleFieldViewModel --> "DataType" MixDataType
ApiModuleDataValueViewModel --> "DataType" MixDataType
ApiModuleDataValueViewModel o-> "Options" JArray
MobileComponent --> "DataSource<MobileComponent>" "List`1"
SiteMap --> "OtherLanguages<SitemapLanguage>" "List`1"
"ListAction`1" --> "Data<T>" "List`1"
FileInputModel --> "FileToUpload" IFormFile
class DashboardViewModel {
    + TotalPage : int <<get>> <<set>>
    + TotalPost : int <<get>> <<set>>
    + TotalProduct : int <<get>> <<set>>
    + TotalModule : int <<get>> <<set>>
    + TotalUser : int <<get>> <<set>>
    + DashboardViewModel(culture:string)
}
class SiteStructureViewModel {
    + Specificulture : string <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + SiteStructureViewModel()
    + <<async>> InitAsync(culture:string) : Task
    + ExportSelectedItemsAsync() : RepositoryResponse<string>
    + <<async>> ImportAsync(destCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "List`1"<T> {
}
class "Dictionary`2"<T1,T2> {
}
SiteStructureViewModel --> "Pages<MixPages.ImportViewModel>" "List`1"
SiteStructureViewModel --> "Modules<MixModules.ImportViewModel>" "List`1"
SiteStructureViewModel --> "AttributeSets<MixAttributeSets.ImportViewModel>" "List`1"
SiteStructureViewModel --> "Configurations<MixConfigurations.ImportViewModel>" "List`1"
SiteStructureViewModel --> "Languages<MixLanguages.ImportViewModel>" "List`1"
SiteStructureViewModel o-> "RelatedData<MixRelatedAttributeDatas.ImportViewModel>" "List`1"
SiteStructureViewModel o-> "PagePostNavs<MixPagePosts.ImportViewModel>" "List`1"
SiteStructureViewModel o-> "PageModuleNavs<MixPageModules.ImportViewModel>" "List`1"
SiteStructureViewModel o-> "ModulePostNavs<MixModulePosts.ImportViewModel>" "List`1"
SiteStructureViewModel o-> "Posts<MixPosts.ImportViewModel>" "List`1"
SiteStructureViewModel o-> "ModuleDatas<MixModuleDatas.ImportViewModel>" "List`1"
SiteStructureViewModel o-> "AttributeSetDatas<MixAttributeSetDatas.ImportViewModel>" "List`1"
SiteStructureViewModel o-> "dicConfigurationIds<int,int>" "Dictionary`2"
SiteStructureViewModel o-> "dicLanguageIds<int,int>" "Dictionary`2"
SiteStructureViewModel o-> "dicModuleIds<int,int>" "Dictionary`2"
SiteStructureViewModel o-> "dicPostIds<int,int>" "Dictionary`2"
SiteStructureViewModel o-> "dicPageIds<int,int>" "Dictionary`2"
SiteStructureViewModel o-> "dicFieldIds<int,int>" "Dictionary`2"
SiteStructureViewModel o-> "dicAttributeSetIds<int,int>" "Dictionary`2"
class PublishScheduledPostsJob {
    + <<async>> Execute(context:IJobExecutionContext) : Task
}
IJob <|-- PublishScheduledPostsJob
abstract class BaseSignalRHub {
    + <<override>> OnConnectedAsync() : Task
    + <<override>> OnDisconnectedAsync(exception:Exception) : Task
    + <<virtual>> UpdateGroupConnection() : void
    + <<virtual>> UpdatePlayerConnectionIdAsync(playerId:string) : void
}
class InitCmsHub {
    + <<async>> SendMessage(message:string) : Task
    + SendMessageToCaller(message:string) : Task
    + SendMessageToGroups(message:string) : Task
    + <<override>> <<async>> OnConnectedAsync() : Task
    + <<override>> <<async>> OnDisconnectedAsync(exception:Exception) : Task
}
BaseSignalRHub <|-- InitCmsHub
class MixChatHub {
    + Join(request:HubRequest<MessengerConnection>) : void
    + SendMessage(request:JObject) : void
    + SendMessageToCaller(message:string) : Task
    + SendMessageToGroups(message:string) : Task
    + <<override>> <<async>> OnConnectedAsync() : Task
    + <<override>> OnDisconnectedAsync(exception:Exception) : Task
}
BaseSignalRHub <|-- MixChatHub
class PortalHub {
    + <<async>> SendMessage(message:string) : Task
    + SendMessageToCaller(message:string) : Task
    + SendMessageToGroups(message:string) : Task
    + <<override>> <<async>> OnConnectedAsync() : Task
    + <<override>> <<async>> OnDisconnectedAsync(exception:Exception) : Task
}
BaseSignalRHub <|-- PortalHub
class ServiceHub {
    + ServiceHub(context:MixChatServiceContext, msgContext:MixCmsContext)
    + HandleRequest(data:string) : Task
    + <<override>> OnConnectedAsync() : Task
    + <<override>> OnDisconnectedAsync(exception:Exception) : Task
}
BaseSignalRHub <|-- ServiceHub
class VideoChatHub {
    + <<async>> Join(username:string) : Task
    + <<override>> OnDisconnectedAsync(exception:Exception) : Task
    + <<async>> CallUser(targetConnectionId:string) : Task
    + <<async>> AnswerCall(acceptCall:bool, targetConnectionId:string) : Task
    + <<async>> HangUp() : Task
    + <<async>> SendSignal(signal:string, targetConnectionId:string) : Task
}
BaseSignalRHub <|-- VideoChatHub
class MessengerConnection {
    + Id : string <<get>> <<set>>
    + ConnectionId : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + DeviceId : string <<get>> <<set>>
}
class HubMessage {
    + Content : string <<get>> <<set>>
}
HubMessage --> "Connection" MessengerConnection
HubMessage --> "CreatedDate" DateTime
class "HubRequest`1"<T> {
    + Uid : string <<get>> <<set>>
    + From : string <<get>> <<set>>
    + To : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Action : string <<get>> <<set>>
    + Data : T <<get>> <<set>>
    + Room : string <<get>> <<set>>
    + IsMySelf : bool <<get>> <<set>>
    + IsSave : bool <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
}
"HubRequest`1" --> "Connection" MessengerConnection
"HubRequest`1" --> "RequestDate" DateTime
class "HubResponse`1"<T> {
    + IsSucceed : bool <<get>> <<set>>
    + ResponseKey : string <<get>> <<set>>
    + Data : T <<get>> <<set>>
}
class "List`1"<T> {
}
"HubResponse`1" o-> "Errors<string>" "List`1"
"HubResponse`1" --> "Exception" Exception
"HubResponse`1" --> "RenderDate" DateTime
class AuthServiceCollectionExtensions <<static>> {
    + {static} AddMixAuthorize(services:IServiceCollection, Configuration:IConfiguration) : IServiceCollection
    + {static} UseMixAuthorize(app:IApplicationBuilder) : IApplicationBuilder
}
class JwtSecurityKey <<static>> {
    + {static} Create(secret:string) : SymmetricSecurityKey
}
AuthServiceCollectionExtensions +-- JwtSecurityKey
class MixRoutesServiceCollectionExtensions <<static>> {
    + {static} UseMixRoutes(app:IApplicationBuilder) : IApplicationBuilder
}
class Startup <<partial>> {
    + ConfigureSignalRServices(services:IServiceCollection) : void
    + ConfigurationSignalR(app:IApplicationBuilder) : void
}
class BaseController {
    + BaseController()
    + culture : string <<get>> <<set>>
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
    + <<async>> Error(page:string) : System.Threading.Tasks.Task<IActionResult>
}
Controller <|-- BaseController
BaseController --> "ViewContext" ViewContext
class DataController {
    + <<async>> Index(attributeSetName:string, seoName:string) : Task<IActionResult>
}
BaseController <|-- DataController
class HomeController {
    + <<async>> Index(seoName:string) : Task<IActionResult>
}
BaseController <|-- HomeController
class InitController {
    + Index(page:string) : IActionResult
}
BaseController <|-- InitController
class ModuleController {
    + <<async>> Index(id:int, culture:string, seoName:string) : Task<IActionResult>
}
BaseController <|-- ModuleController
class PageController {
    + <<async>> Index(culture:string, seoName:string) : Task<IActionResult>
}
BaseController <|-- PageController
class PortalController {
    + Index(page:string) : IActionResult
}
BaseController <|-- PortalController
class PostController {
    + <<async>> Index(id:int, culture:string, seoName:string) : Task<IActionResult>
}
BaseController <|-- PostController
class SecurityController {
    + Index(page:string) : IActionResult
}
BaseController <|-- SecurityController
class VueController {
    + <<async>> Index(culture:string, seoName:string) : Task<PartialViewResult>
}
BaseController <|-- VueController
class ErrorViewModel {
    + RequestId : string <<get>> <<set>>
    + ShowRequestId : bool <<get>>
}
class MethodRules {
    + {static} RedirectXMLRequests(context:RewriteContext) : void
}
class RedirectImageRequests {
    + RedirectImageRequests(extension:string, newPath:string)
    + ApplyRule(context:RewriteContext) : void
}
IRule <|-- RedirectImageRequests
class GeneratedControllerAttribute {
    + GeneratedControllerAttribute(route:string)
    + Route : string <<get>> <<set>>
}
Attribute <|-- GeneratedControllerAttribute
class "BaseRestApiController`3"<TDbContext,TModel,TView> {
    + <<virtual>> <<async>> Get() : Task<ActionResult<PaginationModel<TView>>>
    + <<async>> Get(id:string) : Task<ActionResult<TView>>
    + <<async>> Create(data:TView) : Task<ActionResult<TModel>>
    + <<async>> Update(id:string, data:TView) : Task<IActionResult>
    + <<async>> Patch(id:string, fields:JObject) : Task<IActionResult>
    + <<async>> Delete(id:string) : Task<ActionResult<TModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
Controller <|-- "BaseRestApiController`3"
class GenericControllerRouteConvention {
    + Apply(controller:ControllerModel) : void
}
IControllerModelConvention <|-- GenericControllerRouteConvention
class ServiceCollectionExtensions <<static>> {
    + {static} AddGeneratedRestApi(services:IServiceCollection, assembly:Assembly, baseType:Type) : IServiceCollection
}
class GenericTypeControllerFeatureProvider {
    + GenericTypeControllerFeatureProvider(assembly:Assembly, baseType:Type)
    + PopulateFeature(parts:IEnumerable<ApplicationPart>, feature:ControllerFeature) : void
}
class "IApplicationFeatureProvider`1"<T> {
}
"IApplicationFeatureProvider`1" "<ControllerFeature>" <|-- GenericTypeControllerFeatureProvider
GenericTypeControllerFeatureProvider --> "Assembly" Assembly
GenericTypeControllerFeatureProvider --> "BaseType" Type
class ClaimRequirement {
    + ClaimRequirement(claimName:string, claimValue:string)
    + ClaimName : string <<get>> <<set>>
    + ClaimValue : string <<get>> <<set>>
}
IAuthorizationRequirement <|-- ClaimRequirement
class ClaimsRequirementHandler {
}
class "AuthorizationHandler`1"<T> {
}
"AuthorizationHandler`1" "<ClaimRequirement>" <|-- ClaimsRequirementHandler
class ApplicationDbContext {
    + ApplicationDbContext(options:DbContextOptions<ApplicationDbContext>)
    + ApplicationDbContext()
}
class "IdentityDbContext`1"<T> {
}
class "DbSet`1"<T> {
}
"IdentityDbContext`1" "<ApplicationUser>" <|-- ApplicationDbContext
ApplicationDbContext --> "Clients<Client>" "DbSet`1"
ApplicationDbContext --> "RefreshTokens<RefreshToken>" "DbSet`1"
class IdentityBasedData <<static>> {
}
class "List`1"<T> {
}
IdentityBasedData o-> "UserClaims<string>" "List`1"
class Client {
    + Id : string <<get>> <<set>>
    + Secret : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Active : bool <<get>> <<set>>
    + RefreshTokenLifeTime : int <<get>> <<set>>
    + AllowedOrigin : string <<get>> <<set>>
}
Client --> "ApplicationType" ApplicationTypes
class RefreshToken {
    + Id : string <<get>> <<set>>
    + ClientId : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
}
RefreshToken --> "IssuedUtc" DateTime
RefreshToken --> "ExpiresUtc" DateTime
class ApplicationUserManager {
    + ApplicationUserManager(store:IUserStore<ApplicationUser>, optionsAccessor:IOptions<IdentityOptions>, passwordHasher:IPasswordHasher<ApplicationUser>, userValidators:IEnumerable<IUserValidator<ApplicationUser>>, passwordValidators:IEnumerable<IPasswordValidator<ApplicationUser>>, keyNormalizer:ILookupNormalizer, errors:IdentityErrorDescriber, services:IServiceProvider, logger:ILogger<UserManager<ApplicationUser>>)
}
class "UserManager`1"<T> {
}
"UserManager`1" "<ApplicationUser>" <|-- ApplicationUserManager
class ExtendedClaimsProvider <<static>> {
    + {static} GetClaims(user:ApplicationUser) : IEnumerable<Claim>
    + {static} CreateClaim(type:string, value:string) : Claim
}
interface IUser {
    Name : string <<get>>
    IsAuthenticated() : bool
    GetClaimsIdentity() : IEnumerable<Claim>
}
class ApplicationUser {
    + IsActived : bool <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + RegisterType : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + NickName : string <<get>> <<set>>
    + FirstName : string <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + Gender : string <<get>> <<set>>
    + CountryId : int <<get>> <<set>>
    + Culture : string <<get>> <<set>>
    + DOB : DateTime? <<get>> <<set>>
}
class "ICollection`1"<T> {
}
IdentityUser <|-- ApplicationUser
ApplicationUser --> "JoinDate" DateTime
ApplicationUser o-> "Roles<IdentityUserRole<string>>" "ICollection`1"
ApplicationUser o-> "Claims<IdentityUserClaim<string>>" "ICollection`1"
ApplicationUser o-> "Logins<IdentityUserLogin<string>>" "ICollection`1"
class AspNetUser {
    + AspNetUser(accessor:IHttpContextAccessor)
    + Name : string <<get>>
    + IsAuthenticated() : bool
    + GetClaimsIdentity() : IEnumerable<Claim>
}
IUser <|-- AspNetUser
class AuthRepository {
    + AuthRepository(store:IUserStore<ApplicationUser>, optionsAccessor:IOptions<IdentityOptions>, passwordHasher:IPasswordHasher<ApplicationUser>, userValidators:IEnumerable<IUserValidator<ApplicationUser>>, passwordValidators:IEnumerable<IPasswordValidator<ApplicationUser>>, keyNormalizer:ILookupNormalizer, errors:IdentityErrorDescriber, services:IServiceProvider, logger:ILogger<UserManager<ApplicationUser>>)
}
class "UserManager`1"<T> {
}
"UserManager`1" "<ApplicationUser>" <|-- AuthRepository
class EmailSender {
    + SendEmailAsync(email:string, subject:string, message:string) : Task
}
interface ISmsSender {
    SendSmsAsync(number:string, message:string) : Task
}
class AuthEmailMessageSender {
    + SendEmailAsync(email:string, subject:string, message:string) : Task
}
class AuthSmsMessageSender {
    + SendSmsAsync(number:string, message:string) : Task
}
ISmsSender <|-- AuthSmsMessageSender
class ApiAccountController {
    + ApiAccountController(userManager:UserManager<ApplicationUser>, signInManager:SignInManager<ApplicationUser>, roleManager:RoleManager<IdentityRole>, logger:ILogger<ApiAccountController>)
    + ErrorMessage : string <<get>> <<set>>
    + <<async>> Logout() : Task<RepositoryResponse<bool>>
    + <<async>> Login(model:LoginViewModel) : Task<ActionResult<RepositoryResponse<AccessTokenViewModel>>>
    + <<async>> RefreshToken(refreshTokenId:string) : Task<RepositoryResponse<AccessTokenViewModel>>
    + <<async>> Register(model:MixRegisterViewModel) : Task<ActionResult<RepositoryResponse<AccessTokenViewModel>>>
    + <<async>> ManageUserInRole(model:UserRoleModel) : Task<RepositoryResponse<bool>>
    + <<async>> Details(viewType:string, id:string) : Task<JObject>
    + <<async>> MyProfile() : Task<JObject>
    + <<async>> Save(model:UserInfoViewModel) : Task<RepositoryResponse<UserInfoViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<RepositoryResponse<PaginationModel<UserInfoViewModel>>>
    + <<async>> ForgotPassword(model:Mix.Identity.Models.AccountViewModels.ForgotPasswordViewModel) : Task<RepositoryResponse<string>>
    + <<async>> ResetPassword(model:Mix.Identity.Models.AccountViewModels.ResetPasswordViewModel) : Task<RepositoryResponse<string>>
    + <<async>> RemoveUser(id:string) : Task<RepositoryResponse<string>>
}
Controller <|-- ApiAccountController
class ApiAttributeDataController {
    + ApiAttributeDataController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> Details(setId:int, type:string, viewType:string, id:string) : Task<ActionResult<JObject>>
}
class "BaseApiController`1"<T> {
}
"BaseApiController`1" "<MixCmsContext>" <|-- ApiAttributeDataController
class ApiAttributeFieldController {
    + ApiAttributeFieldController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixAttributeField>>
    + <<async>> Details(viewType:string, id:int?) : Task<ActionResult<JObject>>
    + <<async>> InitByName(setId:int) : Task<RepositoryResponse<List<UpdateViewModel>>>
    + <<async>> Save(data:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixAttributeField>" <|-- ApiAttributeFieldController
class ApiAttributeSetController {
    + ApiAttributeSetController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixAttributeSet>>
    + <<async>> Details(viewType:string, name:string, id:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(data:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixAttributeSet>" <|-- ApiAttributeSetController
class ApiConfigurationController {
    + ApiConfigurationController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(keyword:string) : Task<RepositoryResponse<MixConfiguration>>
    + <<async>> Details(viewType:string, keyword:string) : Task<ActionResult<JObject>>
    + <<async>> Save(model:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixConfiguration>" <|-- ApiConfigurationController
class ApiCultureController {
    + ApiCultureController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixCulture>>
    + <<async>> Details(viewType:string, id:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(model:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixCulture>" <|-- ApiCultureController
class ApiFileController {
    + ApiFileController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + Details(folder:string, filename:string) : RepositoryResponse<FileViewModel>
    + Delete() : RepositoryResponse<bool>
    + Upload(folder:string, file:IFormFile) : IActionResult
    + Save(model:FileViewModel) : RepositoryResponse<FileViewModel>
    + GetList(request:RequestPaging) : RepositoryResponse<FilePageViewModel>
}
class "BaseApiController`1"<T> {
}
"BaseApiController`1" "<MixCmsContext>" <|-- ApiFileController
class ApiInitCmsController {
    + ApiInitCmsController(userManager:UserManager<ApplicationUser>, signInManager:SignInManager<ApplicationUser>, roleManager:RoleManager<IdentityRole>, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>, memoryCache:IMemoryCache)
    + <<async>> Step1(model:InitCmsViewModel) : Task<RepositoryResponse<bool>>
    + <<async>> InitSuperAdmin(model:MixRegisterViewModel) : Task<RepositoryResponse<AccessTokenViewModel>>
    + <<async>> InitLanguages(model:List<MixLanguage>) : Task<RepositoryResponse<bool>>
    + <<async>> Save(model:string, assets:IFormFile, theme:IFormFile) : Task<RepositoryResponse<Cms.Lib.ViewModels.MixThemes.InitViewModel>>
}
class "BaseApiController`1"<T> {
}
"BaseApiController`1" "<MixCmsContext>" <|-- ApiInitCmsController
class ApiMediaController {
    + ApiMediaController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixMedia>>
    + <<async>> Details(viewType:string, id:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(model:string, file:IFormFile) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
    + <<async>> UpdateInfos(models:List<UpdateViewModel>) : Task<RepositoryResponse<List<UpdateViewModel>>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixMedia>" <|-- ApiMediaController
class ApiModuleController {
    + ApiModuleController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixModule>>
    + <<async>> Details(viewType:string, id:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(model:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> SaveFields(id:int, fields:List<EntityField>) : Task<RepositoryResponse<MixModule>>
    + <<async>> SaveData(name:string, formName:string, obj:JObject) : Task<ActionResult<JObject>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
    + <<async>> UpdateInfos(models:List<ReadListItemViewModel>) : Task<RepositoryResponse<List<ReadListItemViewModel>>>
    + <<async>> ListActionAsync(data:ListAction<int>) : Task<ActionResult<JObject>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixModule>" <|-- ApiModuleController
class ApiModuleDataController {
    + ApiModuleDataController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DetailsAsync(viewType:string, moduleId:int, id:string) : Task<RepositoryResponse<UpdateViewModel>>
    + Edit(id:string) : Task<RepositoryResponse<ReadViewModel>>
    + <<async>> CreateAsync(moduleId:int) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> InitByName(moduleName:string) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> SaveByName(moduleName:string, data:JObject) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> InitByIdAsync(moduleId:int) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> DeleteAsync(id:string) : Task<RepositoryResponse<MixModuleData>>
    + <<async>> Post(data:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> ExportData(request:RequestPaging) : Task<ActionResult<RepositoryResponse<PaginationModel<ReadViewModel>>>>
    + <<async>> GetList(request:RequestPaging, level:int?) : Task<ActionResult<RepositoryResponse<PaginationModel<ReadViewModel>>>>
    + <<async>> UpdateInfos(models:List<ReadViewModel>) : Task<RepositoryResponse<List<ReadViewModel>>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixModuleData>" <|-- ApiModuleDataController
class ApiModulePostController {
    + ApiModulePostController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(moduleId:int, postId:int) : Task<RepositoryResponse<MixModulePost>>
    + <<async>> Details(viewType:string, moduleId:int?, postId:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(model:ReadViewModel) : Task<RepositoryResponse<ReadViewModel>>
    + <<async>> SaveFields(moduleId:int, postId:int, fields:List<EntityField>) : Task<RepositoryResponse<MixModulePost>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
    + <<async>> UpdateInfos(models:List<ReadViewModel>) : Task<RepositoryResponse<List<ReadViewModel>>>
    + <<async>> SaveList(models:List<ReadViewModel>) : Task<RepositoryResponse<List<ReadViewModel>>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixModulePost>" <|-- ApiModulePostController
class ApiPagePostController {
    + ApiPagePostController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixPagePost>>
    + <<async>> Details(viewType:string, pageId:int?, postId:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(model:ReadViewModel) : Task<RepositoryResponse<ReadViewModel>>
    + <<async>> SaveFields(pageId:int, postId:int, fields:List<EntityField>) : Task<RepositoryResponse<MixPagePost>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
    + <<async>> UpdateInfos(models:List<ReadViewModel>) : Task<RepositoryResponse<List<ReadViewModel>>>
    + <<async>> SaveList(models:List<ReadViewModel>) : Task<RepositoryResponse<List<ReadViewModel>>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixPagePost>" <|-- ApiPagePostController
class ApiPermissionController {
    + ApiPermissionController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixPortalPage>>
    + <<async>> Details(viewType:string, id:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(model:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
    + <<async>> UpdateInfos(models:List<ReadViewModel>) : Task<RepositoryResponse<List<ReadViewModel>>>
    + UpdateNavInfos(models:List<Lib.ViewModels.MixPortalPagePortalPages.ReadViewModel>) : RepositoryResponse<List<Lib.ViewModels.MixPortalPagePortalPages.ReadViewModel>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixPortalPage>" <|-- ApiPermissionController
class ApiPortalController {
    + ApiPortalController(userManager:UserManager<ApplicationUser>, signInManager:SignInManager<ApplicationUser>, roleManager:RoleManager<IdentityRole>, context:MixCmsContext, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>, memoryCache:IMemoryCache)
    + Settings() : RepositoryResponse<GlobalSettingsViewModel>
    + AllSettingsAsync() : RepositoryResponse<JObject>
    + loadData(name:string) : RepositoryResponse<JArray>
    + loadJsonData(name:string) : RepositoryResponse<JObject>
    + Languages() : RepositoryResponse<JObject>
    + GetGlobalSettings() : RepositoryResponse<JObject>
    + Dashboard(culture:string) : RepositoryResponse<DashboardViewModel>
    + checkConfig(lastSync:DateTime) : RepositoryResponse<JObject>
    + SiteMap() : RepositoryResponse<FileViewModel>
    + LoadAppSettings() : RepositoryResponse<JObject>
    + <<async>> TranslateUrlAsync(culture:string, type:string, id:int) : Task<RepositoryResponse<string>>
    + EncryptRsa(model:JObject) : RepositoryResponse<string>
    + DecryptRsa(model:JObject) : RepositoryResponse<string>
    + Encrypt(model:JObject) : RepositoryResponse<string>
    + Decrypt(model:JObject) : RepositoryResponse<string>
    + SaveAppSettings(model:JObject) : RepositoryResponse<JObject>
    + SaveGlobalSettings(name:string, model:JObject) : RepositoryResponse<string>
    + SaveDefaultAppSettings() : RepositoryResponse<bool>
    + SendMail(model:JObject) : void
    + <<async>> ImportAsync(assets:IFormFile) : Task<RepositoryResponse<bool>>
}
class "BaseApiController`1"<T> {
}
"BaseApiController`1" "<MixCmsContext>" <|-- ApiPortalController
class ApiRoleController {
    + ApiRoleController(userManager:UserManager<ApplicationUser>, signInManager:SignInManager<ApplicationUser>, roleManager:RoleManager<IdentityRole>, logger:ILogger<ApiRoleController>, memoryCache:IMemoryCache, hubContext:IHubContext<PortalHub>)
    + Claims() : object
    + <<async>> GetDetails(id:string, viewType:string) : Task<JObject>
    + <<async>> GetPermissions() : Task<JObject>
    + <<async>> GetList() : Task<RepositoryResponse<List<RoleViewModel>>>
    + <<async>> Save(name:string) : Task<RepositoryResponse<IdentityRole>>
    + <<async>> Save(model:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> Update(model:Lib.ViewModels.MixPortalPageRoles.ReadViewModel) : Task<RepositoryResponse<Lib.ViewModels.MixPortalPageRoles.ReadViewModel>>
    + <<async>> Delete(name:string) : Task<RepositoryResponse<AspNetRoles>>
}
class "BaseApiController`1"<T> {
}
"BaseApiController`1" "<MixCmsContext>" <|-- ApiRoleController
class ApiTemplateController {
    + ApiTemplateController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DetailsAsync(viewType:string, themeId:int, folderType:string, id:int?) : Task<ActionResult<RepositoryResponse<UpdateViewModel>>>
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixTemplate>>
    + <<async>> Save(model:Lib.ViewModels.MixTemplates.UpdateViewModel) : Task<RepositoryResponse<Lib.ViewModels.MixTemplates.UpdateViewModel>>
    + <<async>> GetList(themeId:int, request:RequestPaging) : Task<ActionResult<JObject>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixTemplate>" <|-- ApiTemplateController
class ApiThemeController {
    + ApiThemeController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> Sync(id:int) : Task<RepositoryResponse<List<Lib.ViewModels.MixTemplates.UpdateViewModel>>>
    + <<async>> Export(id:int) : Task<RepositoryResponse<SiteStructureViewModel>>
    + Export(id:int, data:SiteStructureViewModel) : Task<RepositoryResponse<string>>
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixTheme>>
    + <<async>> Details(viewType:string, id:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(model:string, assets:IFormFile, theme:IFormFile) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixTheme>" <|-- ApiThemeController
class ApiUrlAliasController {
    + ApiUrlAliasController(context:MixCmsContext, memoryCache:IMemoryCache, hubContext:Microsoft.AspNetCore.SignalR.IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<async>> DeleteAsync(id:int) : Task<RepositoryResponse<MixUrlAlias>>
    + <<async>> Details(viewType:string, id:int?) : Task<ActionResult<JObject>>
    + <<async>> Save(model:UpdateViewModel) : Task<RepositoryResponse<UpdateViewModel>>
    + <<async>> GetList(request:RequestPaging) : Task<ActionResult<JObject>>
}
class "BaseGenericApiController`2"<T1,T2> {
}
"BaseGenericApiController`2" "<MixCmsContext,MixUrlAlias>" <|-- ApiUrlAliasController
class "BaseApiController`1"<TDbContext> {
    + BaseApiController(context:TDbContext, memoryCache:IMemoryCache, hubContext:IHubContext<PortalHub>)
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
}
Controller <|-- "BaseApiController`1"
class "BaseGenericApiController`2"<TDbContext,TModel> {
    + BaseGenericApiController(context:TDbContext, memoryCache:IMemoryCache, hubContext:IHubContext<Mix.Cms.Service.SignalR.Hubs.PortalHub>)
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
    + SaveEncrypt(request:RequestEncrypted) : JObject
    + {static} Log(request:dynamic, response:dynamic) : void
}
Controller <|-- "BaseGenericApiController`2"
interface IDatabaseMetadata {
    ReloadMetadata() : void
    GetTableMetadatas() : IEnumerable<TableMetadata>
}
interface ITableNameLookup {
    InsertKeyName(friendlyName:string) : bool
    GetFriendlyName(correctName:string) : string
}
class ColumnMetadata {
    + ColumnName : string <<get>> <<set>>
    + DataType : string <<get>> <<set>>
}
class DatabaseMetadata <<sealed>> {
    + DatabaseMetadata(dbContext:DbContext, tableNameLookup:ITableNameLookup)
    + GetTableMetadatas() : IEnumerable<TableMetadata>
    + ReloadMetadata() : void
}
IDatabaseMetadata <|-- DatabaseMetadata
class QueryRequest {
    + OperationName : string <<get>> <<set>>
    + NamedQuery : string <<get>> <<set>>
    + Query : string <<get>> <<set>>
}
QueryRequest --> "Variables" JObject
class TableMetadata {
    + TableName : string <<get>> <<set>>
    + AssemblyFullName : string <<get>> <<set>>
}
class "IEnumerable`1"<T> {
}
TableMetadata --> "Columns<ColumnMetadata>" "IEnumerable`1"
class TableNameLookup {
    + InsertKeyName(correctName:string) : bool
    + GetFriendlyName(correctName:string) : string
}
ITableNameLookup <|-- TableNameLookup
class DynamicLinqProvider {
    + GetCustomTypes() : HashSet<Type>
    + GetExtensionMethods() : Dictionary<Type, List<MethodInfo>>
    + ResolveType(typeName:string) : Type
    + ResolveTypeBySimpleName(simpleTypeName:string) : Type
}
IDynamicLinkCustomTypeProvider <|-- DynamicLinqProvider
class MyFieldResolver {
    + MyFieldResolver(tableMetadata:TableMetadata, dbContext:DbContext)
    + Resolve(context:IResolveFieldContext) : object
}
IFieldResolver <|-- MyFieldResolver
class NameFieldResolver {
    + Resolve(context:IResolveFieldContext) : object
}
IFieldResolver <|-- NameFieldResolver
class TableType {
    + TableType(tableMetadata:TableMetadata, type:Type)
}
class "ObjectGraphType`1"<T> {
}
"ObjectGraphType`1" "<object>" <|-- TableType
TableType --> "TableArgs" QueryArguments
TableType --> "_type" Type
class Init <<partial>> {
}
Migration <|-- Init
class Init <<partial>> {
}
class MixCmsAccountContextModelSnapshot <<partial>> {
}
ModelSnapshot <|-- MixCmsAccountContextModelSnapshot
class init <<partial>> {
}
Migration <|-- init
class init <<partial>> {
}
class MixChatServiceContextModelSnapshot <<partial>> {
}
ModelSnapshot <|-- MixChatServiceContextModelSnapshot
class Init <<partial>> {
}
Migration <|-- Init
class Init <<partial>> {
}
class MsSqlMixCmsContextModelSnapshot <<partial>> {
}
ModelSnapshot <|-- MsSqlMixCmsContextModelSnapshot
class Init <<partial>> {
}
Migration <|-- Init
class Init <<partial>> {
}
class MySqlMixCmsContextModelSnapshot <<partial>> {
}
ModelSnapshot <|-- MySqlMixCmsContextModelSnapshot
class Init <<partial>> {
}
Migration <|-- Init
class Init <<partial>> {
}
class PostgresqlMixCmsContextModelSnapshot <<partial>> {
}
ModelSnapshot <|-- PostgresqlMixCmsContextModelSnapshot
class Init <<partial>> {
}
Migration <|-- Init
class Init <<partial>> {
}
class PostgresSQLAccountContextModelSnapshot <<partial>> {
}
ModelSnapshot <|-- PostgresSQLAccountContextModelSnapshot
class Init <<partial>> {
}
Migration <|-- Init
class Init <<partial>> {
}
class SQLAccountContextModelSnapshot <<partial>> {
}
ModelSnapshot <|-- SQLAccountContextModelSnapshot
class AspNetRoleClaims <<partial>> {
    + Id : int <<get>> <<set>>
    + ClaimType : string <<get>> <<set>>
    + ClaimValue : string <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
}
AspNetRoleClaims --> "Role" AspNetRoles
class AspNetRoles <<partial>> {
    + AspNetRoles()
    + Id : string <<get>> <<set>>
    + ConcurrencyStamp : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + NormalizedName : string <<get>> <<set>>
}
class "ICollection`1"<T> {
}
AspNetRoles --> "AspNetRoleClaims<AspNetRoleClaims>" "ICollection`1"
AspNetRoles --> "AspNetUserRoles<AspNetUserRoles>" "ICollection`1"
class AspNetUserClaims <<partial>> {
    + Id : int <<get>> <<set>>
    + ApplicationUserId : string <<get>> <<set>>
    + ClaimType : string <<get>> <<set>>
    + ClaimValue : string <<get>> <<set>>
    + UserId : string <<get>> <<set>>
}
AspNetUserClaims --> "ApplicationUser" AspNetUsers
AspNetUserClaims --> "User" AspNetUsers
class AspNetUserLogins <<partial>> {
    + LoginProvider : string <<get>> <<set>>
    + ProviderKey : string <<get>> <<set>>
    + ApplicationUserId : string <<get>> <<set>>
    + ProviderDisplayName : string <<get>> <<set>>
    + UserId : string <<get>> <<set>>
}
AspNetUserLogins --> "ApplicationUser" AspNetUsers
AspNetUserLogins --> "User" AspNetUsers
class AspNetUserRoles <<partial>> {
    + UserId : string <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
    + ApplicationUserId : string <<get>> <<set>>
}
AspNetUserRoles --> "ApplicationUser" AspNetUsers
AspNetUserRoles --> "Role" AspNetRoles
AspNetUserRoles --> "User" AspNetUsers
class AspNetUsers <<partial>> {
    + AspNetUsers()
    + Id : string <<get>> <<set>>
    + AccessFailedCount : int <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + ConcurrencyStamp : string <<get>> <<set>>
    + CountryId : int <<get>> <<set>>
    + Culture : string <<get>> <<set>>
    + Dob : DateTime? <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + EmailConfirmed : bool <<get>> <<set>>
    + FirstName : string <<get>> <<set>>
    + Gender : string <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + LockoutEnabled : bool <<get>> <<set>>
    + LockoutEnd : DateTime? <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + NickName : string <<get>> <<set>>
    + NormalizedEmail : string <<get>> <<set>>
    + NormalizedUserName : string <<get>> <<set>>
    + PasswordHash : string <<get>> <<set>>
    + PhoneNumber : string <<get>> <<set>>
    + PhoneNumberConfirmed : bool <<get>> <<set>>
    + RegisterType : string <<get>> <<set>>
    + SecurityStamp : string <<get>> <<set>>
    + TwoFactorEnabled : bool <<get>> <<set>>
    + UserName : string <<get>> <<set>>
}
class "ICollection`1"<T> {
}
AspNetUsers --> "JoinDate" DateTime
AspNetUsers --> "LastModified" DateTime
AspNetUsers --> "AspNetUserClaimsApplicationUser<AspNetUserClaims>" "ICollection`1"
AspNetUsers --> "AspNetUserClaimsUser<AspNetUserClaims>" "ICollection`1"
AspNetUsers --> "AspNetUserLoginsApplicationUser<AspNetUserLogins>" "ICollection`1"
AspNetUsers --> "AspNetUserLoginsUser<AspNetUserLogins>" "ICollection`1"
AspNetUsers --> "AspNetUserRolesApplicationUser<AspNetUserRoles>" "ICollection`1"
AspNetUsers --> "AspNetUserRolesUser<AspNetUserRoles>" "ICollection`1"
AspNetUsers --> "AspNetUserTokens<AspNetUserTokens>" "ICollection`1"
class AspNetUserTokens <<partial>> {
    + UserId : string <<get>> <<set>>
    + LoginProvider : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
}
AspNetUserTokens --> "User" AspNetUsers
class Clients <<partial>> {
    + Id : string <<get>> <<set>>
    + Active : bool <<get>> <<set>>
    + AllowedOrigin : string <<get>> <<set>>
    + ApplicationType : int <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + RefreshTokenLifeTime : int <<get>> <<set>>
    + Secret : string <<get>> <<set>>
}
class RefreshTokens <<partial>> {
    + Id : string <<get>> <<set>>
    + ClientId : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + Username : string <<get>> <<set>>
}
RefreshTokens --> "ExpiresUtc" DateTime
RefreshTokens --> "IssuedUtc" DateTime
class MixCmsAccountContext <<partial>> {
    + MixCmsAccountContext(options:DbContextOptions<ApplicationDbContext>)
    + MixCmsAccountContext()
    + <<override>> Dispose() : void
    <<partial>> OnModelCreatingPartial(modelBuilder:ModelBuilder) : void
}
class "DbSet`1"<T> {
}
DbContext <|-- MixCmsAccountContext
MixCmsAccountContext --> "AspNetRoleClaims<AspNetRoleClaims>" "DbSet`1"
MixCmsAccountContext --> "AspNetRoles<AspNetRoles>" "DbSet`1"
MixCmsAccountContext --> "AspNetUserClaims<AspNetUserClaims>" "DbSet`1"
MixCmsAccountContext --> "AspNetUserLogins<AspNetUserLogins>" "DbSet`1"
MixCmsAccountContext --> "AspNetUserRoles<AspNetUserRoles>" "DbSet`1"
MixCmsAccountContext --> "AspNetUsers<AspNetUsers>" "DbSet`1"
MixCmsAccountContext --> "AspNetUserTokens<AspNetUserTokens>" "DbSet`1"
MixCmsAccountContext --> "Clients<Clients>" "DbSet`1"
MixCmsAccountContext --> "RefreshTokens<RefreshTokens>" "DbSet`1"
class MixDbContext {
    + MixDbContext(options:DbContextOptions<MixDbContext>)
    + MixDbContext()
    + <<override>> Dispose() : void
}
class "IdentityDbContext`1"<T> {
}
class "DbSet`1"<T> {
}
"IdentityDbContext`1" "<ApplicationUser>" <|-- MixDbContext
MixDbContext --> "Clients<Client>" "DbSet`1"
MixDbContext --> "RefreshTokens<RefreshToken>" "DbSet`1"
class PostgresSQLAccountContext <<partial>> {
    + PostgresSQLAccountContext(options:DbContextOptions<ApplicationDbContext>)
    + PostgresSQLAccountContext()
    <<partial>> OnModelCreatingPartial(modelBuilder:ModelBuilder) : void
}
MixCmsAccountContext <|-- PostgresSQLAccountContext
class SQLAccountContext <<partial>> {
    + SQLAccountContext(options:DbContextOptions<ApplicationDbContext>)
    + SQLAccountContext()
    <<partial>> OnModelCreatingPartial(modelBuilder:ModelBuilder) : void
}
MixCmsAccountContext <|-- SQLAccountContext
class Aspnetroleclaims <<partial>> {
    + Id : int <<get>> <<set>>
    + ClaimType : string <<get>> <<set>>
    + ClaimValue : string <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
}
Aspnetroleclaims --> "Role" Aspnetroles
class Aspnetroles <<partial>> {
    + Aspnetroles()
    + Id : string <<get>> <<set>>
    + ConcurrencyStamp : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + NormalizedName : string <<get>> <<set>>
}
class "ICollection`1"<T> {
}
Aspnetroles --> "Aspnetroleclaims<Aspnetroleclaims>" "ICollection`1"
Aspnetroles --> "Aspnetuserroles<Aspnetuserroles>" "ICollection`1"
class Aspnetuserclaims <<partial>> {
    + Id : int <<get>> <<set>>
    + ApplicationUserId : string <<get>> <<set>>
    + ClaimType : string <<get>> <<set>>
    + ClaimValue : string <<get>> <<set>>
    + UserId : string <<get>> <<set>>
}
Aspnetuserclaims --> "ApplicationUser" Aspnetusers
Aspnetuserclaims --> "User" Aspnetusers
class Aspnetuserlogins <<partial>> {
    + LoginProvider : string <<get>> <<set>>
    + ProviderKey : string <<get>> <<set>>
    + ApplicationUserId : string <<get>> <<set>>
    + ProviderDisplayName : string <<get>> <<set>>
    + UserId : string <<get>> <<set>>
}
Aspnetuserlogins --> "ApplicationUser" Aspnetusers
Aspnetuserlogins --> "User" Aspnetusers
class Aspnetuserroles <<partial>> {
    + UserId : string <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
    + ApplicationUserId : string <<get>> <<set>>
}
Aspnetuserroles --> "ApplicationUser" Aspnetusers
Aspnetuserroles --> "Role" Aspnetroles
Aspnetuserroles --> "User" Aspnetusers
class Aspnetusers <<partial>> {
    + Aspnetusers()
    + Id : string <<get>> <<set>>
    + AccessFailedCount : int <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + ConcurrencyStamp : string <<get>> <<set>>
    + CountryId : int <<get>> <<set>>
    + Culture : string <<get>> <<set>>
    + Dob : DateTime? <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + EmailConfirmed : ulong <<get>> <<set>>
    + FirstName : string <<get>> <<set>>
    + Gender : string <<get>> <<set>>
    + IsActived : ulong <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + LockoutEnabled : ulong <<get>> <<set>>
    + LockoutEnd : DateTime? <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + NickName : string <<get>> <<set>>
    + NormalizedEmail : string <<get>> <<set>>
    + NormalizedUserName : string <<get>> <<set>>
    + PasswordHash : string <<get>> <<set>>
    + PhoneNumber : string <<get>> <<set>>
    + PhoneNumberConfirmed : ulong <<get>> <<set>>
    + RegisterType : string <<get>> <<set>>
    + SecurityStamp : string <<get>> <<set>>
    + TwoFactorEnabled : ulong <<get>> <<set>>
    + UserName : string <<get>> <<set>>
}
class "ICollection`1"<T> {
}
Aspnetusers --> "JoinDate" DateTime
Aspnetusers --> "LastModified" DateTime
Aspnetusers --> "AspnetuserclaimsApplicationUser<Aspnetuserclaims>" "ICollection`1"
Aspnetusers --> "AspnetuserclaimsUser<Aspnetuserclaims>" "ICollection`1"
Aspnetusers --> "AspnetuserloginsApplicationUser<Aspnetuserlogins>" "ICollection`1"
Aspnetusers --> "AspnetuserloginsUser<Aspnetuserlogins>" "ICollection`1"
Aspnetusers --> "AspnetuserrolesApplicationUser<Aspnetuserroles>" "ICollection`1"
Aspnetusers --> "AspnetuserrolesUser<Aspnetuserroles>" "ICollection`1"
Aspnetusers --> "Aspnetusertokens<Aspnetusertokens>" "ICollection`1"
class Aspnetusertokens <<partial>> {
    + UserId : string <<get>> <<set>>
    + LoginProvider : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
}
Aspnetusertokens --> "User" Aspnetusers
class Clients <<partial>> {
    + Id : string <<get>> <<set>>
    + Active : ulong <<get>> <<set>>
    + AllowedOrigin : string <<get>> <<set>>
    + ApplicationType : int <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + RefreshTokenLifeTime : int <<get>> <<set>>
    + Secret : string <<get>> <<set>>
}
class Efmigrationshistory <<partial>> {
    + MigrationId : string <<get>> <<set>>
    + ProductVersion : string <<get>> <<set>>
}
class MixAttributeField <<partial>> {
    + Id : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Configurations : string <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Options : string <<get>> <<set>>
    + IsRequire : bool <<get>> <<set>>
    + IsEncrypt : bool <<get>> <<set>>
    + IsMultiple : bool <<get>> <<set>>
    + IsSelect : bool <<get>> <<set>>
    + IsUnique : bool <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixAttributeField --> "DataType" MixDataType
MixAttributeField --> "CreatedDateTime" DateTime
MixAttributeField --> "Status" MixContentStatus
class MixAttributeSet <<partial>> {
    + MixAttributeSet()
    + Id : int <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + EdmSubject : string <<get>> <<set>>
    + EdmFrom : string <<get>> <<set>>
    + EdmAutoSend : bool? <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixAttributeSet --> "Type" MixDatabaseType
MixAttributeSet --> "CreatedDateTime" DateTime
MixAttributeSet --> "Status" MixContentStatus
class MixAttributeSetData <<partial>> {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixAttributeSetData --> "CreatedDateTime" DateTime
MixAttributeSetData --> "Status" MixContentStatus
MixAttributeSetData --> "AttributeSet" MixAttributeSet
class MixAttributeSetReference <<partial>> {
    + Id : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + ParentType : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixAttributeSetReference --> "CreatedDateTime" DateTime
MixAttributeSetReference --> "Status" MixContentStatus
MixAttributeSetReference --> "AttributeSet" MixAttributeSet
class MixAttributeSetValue <<partial>> {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixAttributeSetValue --> "DataType" MixDataType
MixAttributeSetValue --> "CreatedDateTime" DateTime
MixAttributeSetValue --> "Status" MixContentStatus
class MixCache <<partial>> {
    + Id : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + ExpiredDateTime : DateTime? <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixCache --> "CreatedDateTime" DateTime
MixCache --> "Status" MixContentStatus
class MixCmsUser <<partial>> {
    + Id : string <<get>> <<set>>
    + Address : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + FirstName : string <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + MiddleName : string <<get>> <<set>>
    + PhoneNumber : string <<get>> <<set>>
    + Username : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixCmsUser --> "CreatedDateTime" DateTime
MixCmsUser --> "Status" MixUserStatus
class MixConfiguration <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixConfiguration --> "DataType" MixDataType
MixConfiguration --> "CreatedDateTime" DateTime
MixConfiguration --> "Status" MixContentStatus
MixConfiguration --> "SpecificultureNavigation" MixCulture
class MixCulture <<partial>> {
    + MixCulture()
    + Id : int <<get>> <<set>>
    + Alias : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FullName : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Lcid : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixCulture --> "CreatedDateTime" DateTime
MixCulture --> "Status" MixContentStatus
MixCulture --> "MixConfiguration<MixConfiguration>" "ICollection`1"
MixCulture --> "MixLanguage<MixLanguage>" "ICollection`1"
MixCulture --> "MixModule<MixModule>" "ICollection`1"
MixCulture --> "MixPage<MixPage>" "ICollection`1"
MixCulture --> "MixPost<MixPost>" "ICollection`1"
MixCulture --> "MixUrlAlias<MixUrlAlias>" "ICollection`1"
class MixFile <<partial>> {
    + Id : int <<get>> <<set>>
    + StringContent : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + FolderType : string <<get>> <<set>>
    + ThemeId : int? <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixFile --> "CreatedDateTime" DateTime
MixFile --> "Status" MixContentStatus
MixFile --> "Theme" MixTheme
class MixLanguage <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixLanguage --> "DataType" MixDataType
MixLanguage --> "CreatedDateTime" DateTime
MixLanguage --> "Status" MixContentStatus
MixLanguage --> "SpecificultureNavigation" MixCulture
class MixMedia <<partial>> {
    + MixMedia()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + FileProperties : string <<get>> <<set>>
    + FileSize : long <<get>> <<set>>
    + FileType : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + TargetUrl : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixMedia --> "CreatedDateTime" DateTime
MixMedia --> "Status" MixContentStatus
MixMedia --> "MixPostMedia<MixPostMedia>" "ICollection`1"
class MixMessengerHubRoom <<partial>> {
    + MixMessengerHubRoom()
    + Avatar : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + HostId : string <<get>> <<set>>
    + IsOpen : bool <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + TeamId : int? <<get>> <<set>>
    + Title : string <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixMessengerHubRoom --> "Id" Guid
MixMessengerHubRoom --> "CreatedDate" DateTime
MixMessengerHubRoom --> "MixMessengerMessage<MixMessengerMessage>" "ICollection`1"
MixMessengerHubRoom --> "MixMessengerNavRoomUser<MixMessengerNavRoomUser>" "ICollection`1"
class MixMessengerMessage <<partial>> {
    + Content : string <<get>> <<set>>
    + RoomId : Guid? <<get>> <<set>>
    + TeamId : int? <<get>> <<set>>
    + UserId : string <<get>> <<set>>
}
MixMessengerMessage --> "Id" Guid
MixMessengerMessage --> "CreatedDate" DateTime
MixMessengerMessage --> "Room" MixMessengerHubRoom
MixMessengerMessage --> "Team" MixMessengerTeam
MixMessengerMessage --> "User" MixMessengerUser
class MixMessengerNavRoomUser <<partial>> {
    + UserId : string <<get>> <<set>>
}
MixMessengerNavRoomUser --> "RoomId" Guid
MixMessengerNavRoomUser --> "JoinedDate" DateTime
MixMessengerNavRoomUser --> "Room" MixMessengerHubRoom
MixMessengerNavRoomUser --> "User" MixMessengerUser
class MixMessengerNavTeamUser <<partial>> {
    + TeamId : int <<get>> <<set>>
    + UserId : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Status : int <<get>> <<set>>
}
MixMessengerNavTeamUser --> "JoinedDate" DateTime
MixMessengerNavTeamUser --> "Team" MixMessengerTeam
MixMessengerNavTeamUser --> "User" MixMessengerUser
class MixMessengerTeam <<partial>> {
    + MixMessengerTeam()
    + Id : int <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + HostId : string <<get>> <<set>>
    + IsOpen : bool? <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Type : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixMessengerTeam --> "CreatedDate" DateTime
MixMessengerTeam --> "MixMessengerMessage<MixMessengerMessage>" "ICollection`1"
MixMessengerTeam --> "MixMessengerNavTeamUser<MixMessengerNavTeamUser>" "ICollection`1"
class MixMessengerUser <<partial>> {
    + MixMessengerUser()
    + Id : string <<get>> <<set>>
    + FacebookId : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Status : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixMessengerUser --> "CreatedDate" DateTime
MixMessengerUser --> "MixMessengerMessage<MixMessengerMessage>" "ICollection`1"
MixMessengerUser --> "MixMessengerNavRoomUser<MixMessengerNavRoomUser>" "ICollection`1"
MixMessengerUser --> "MixMessengerNavTeamUser<MixMessengerNavTeamUser>" "ICollection`1"
class MixMessengerUserDevice <<partial>> {
    + UserId : string <<get>> <<set>>
    + ConnectionId : string <<get>> <<set>>
    + DeviceId : string <<get>> <<set>>
    + Status : int <<get>> <<set>>
    + EndDate : DateTime? <<get>> <<set>>
}
MixMessengerUserDevice --> "StartDate" DateTime
class MixModule <<partial>> {
    + MixModule()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Fields : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Type : int <<get>> <<set>>
    + PostType : string <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixModule --> "CreatedDateTime" DateTime
MixModule --> "Status" MixContentStatus
MixModule --> "SpecificultureNavigation" MixCulture
MixModule --> "MixModuleData<MixModuleData>" "ICollection`1"
MixModule --> "MixModulePost<MixModulePost>" "ICollection`1"
MixModule --> "MixPageModule<MixPageModule>" "ICollection`1"
MixModule --> "MixPostModule<MixPostModule>" "ICollection`1"
class MixModuleData <<partial>> {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + PageId : int? <<get>> <<set>>
    + PostId : int? <<get>> <<set>>
    + Fields : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixModuleData --> "CreatedDateTime" DateTime
MixModuleData --> "Status" MixContentStatus
MixModuleData --> "MixModule" MixModule
MixModuleData --> "MixPage" MixPage
MixModuleData --> "MixPost" MixPost
class MixModulePost <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixModulePost --> "CreatedDateTime" DateTime
MixModulePost --> "Status" MixContentStatus
MixModulePost --> "MixModule" MixModule
MixModulePost --> "MixPost" MixPost
class MixPage <<partial>> {
    + MixPage()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + CssClass : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + Level : int? <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + StaticUrl : string <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + PostType : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + ExtraFields : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixPage --> "Type" MixPageType
MixPage --> "CreatedDateTime" DateTime
MixPage --> "Status" MixContentStatus
MixPage --> "SpecificultureNavigation" MixCulture
MixPage --> "MixModuleData<MixModuleData>" "ICollection`1"
MixPage --> "MixPageModule<MixPageModule>" "ICollection`1"
MixPage --> "MixPagePost<MixPagePost>" "ICollection`1"
class MixPageModule <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Position : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixPageModule --> "CreatedDateTime" DateTime
MixPageModule --> "Status" MixContentStatus
MixPageModule --> "MixModule" MixModule
MixPageModule --> "MixPage" MixPage
class MixPagePost <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixPagePost --> "CreatedDateTime" DateTime
MixPagePost --> "Status" MixContentStatus
MixPagePost --> "MixPage" MixPage
MixPagePost --> "MixPost" MixPost
class MixPortalPage <<partial>> {
    + MixPortalPage()
    + Id : int <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + TextKeyword : string <<get>> <<set>>
    + Url : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + TextDefault : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixPortalPage --> "CreatedDateTime" DateTime
MixPortalPage --> "Status" MixContentStatus
MixPortalPage --> "MixPortalPageNavigationPage<MixPortalPageNavigation>" "ICollection`1"
MixPortalPage --> "MixPortalPageNavigationParent<MixPortalPageNavigation>" "ICollection`1"
MixPortalPage --> "MixPortalPageRole<MixPortalPageRole>" "ICollection`1"
class MixPortalPageNavigation <<partial>> {
    + Id : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixPortalPageNavigation --> "CreatedDateTime" DateTime
MixPortalPageNavigation --> "Status" MixContentStatus
MixPortalPageNavigation --> "Page" MixPortalPage
MixPortalPageNavigation --> "Parent" MixPortalPage
class MixPortalPageRole <<partial>> {
    + Id : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixPortalPageRole --> "CreatedDateTime" DateTime
MixPortalPageRole --> "Status" MixContentStatus
MixPortalPageRole --> "Page" MixPortalPage
class MixPost <<partial>> {
    + MixPost()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + PublishedDateTime : DateTime? <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + ExtraProperties : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + ExtraFields : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixPost --> "CreatedDateTime" DateTime
MixPost --> "Status" MixContentStatus
MixPost --> "SpecificultureNavigation" MixCulture
MixPost --> "MixModuleData<MixModuleData>" "ICollection`1"
MixPost --> "MixModulePost<MixModulePost>" "ICollection`1"
MixPost --> "MixPagePost<MixPagePost>" "ICollection`1"
MixPost --> "MixPostMedia<MixPostMedia>" "ICollection`1"
MixPost --> "MixPostModule<MixPostModule>" "ICollection`1"
MixPost --> "MixRelatedPostMixPost<MixRelatedPost>" "ICollection`1"
MixPost --> "MixRelatedPostS<MixRelatedPost>" "ICollection`1"
class MixPostMedia <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + MediaId : int <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Position : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixPostMedia --> "CreatedDateTime" DateTime
MixPostMedia --> "Status" MixContentStatus
MixPostMedia --> "MixMedia" MixMedia
MixPostMedia --> "MixPost" MixPost
class MixPostModule <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Position : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixPostModule --> "CreatedDateTime" DateTime
MixPostModule --> "Status" MixContentStatus
MixPostModule --> "MixModule" MixModule
MixPostModule --> "MixPost" MixPost
class MixRelatedAttributeData <<partial>> {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixRelatedAttributeData --> "ParentType" MixDatabaseParentType
MixRelatedAttributeData --> "CreatedDateTime" DateTime
MixRelatedAttributeData --> "Status" MixContentStatus
class MixRelatedAttributeSet <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixRelatedAttributeSet --> "ParentType" MixDatabaseType
MixRelatedAttributeSet --> "CreatedDateTime" DateTime
MixRelatedAttributeSet --> "Status" MixContentStatus
MixRelatedAttributeSet --> "IdNavigation" MixAttributeSet
class MixRelatedData <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + Type : int <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + ParentType : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixRelatedData --> "CreatedDateTime" DateTime
MixRelatedData --> "Status" MixContentStatus
class MixRelatedPost <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + SourceId : int <<get>> <<set>>
    + DestinationId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixRelatedPost --> "CreatedDateTime" DateTime
MixRelatedPost --> "Status" MixContentStatus
MixRelatedPost --> "MixPost" MixPost
MixRelatedPost --> "S" MixPost
class MixTemplate <<partial>> {
    + Id : int <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + FolderType : string <<get>> <<set>>
    + MobileContent : string <<get>> <<set>>
    + Scripts : string <<get>> <<set>>
    + SpaContent : string <<get>> <<set>>
    + Styles : string <<get>> <<set>>
    + ThemeId : int <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixTemplate --> "CreatedDateTime" DateTime
MixTemplate --> "Status" MixContentStatus
MixTemplate --> "Theme" MixTheme
class MixTheme <<partial>> {
    + MixTheme()
    + Id : int <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + PreviewUrl : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixTheme --> "CreatedDateTime" DateTime
MixTheme --> "Status" MixContentStatus
MixTheme --> "MixFile<MixFile>" "ICollection`1"
MixTheme --> "MixTemplate<MixTemplate>" "ICollection`1"
class MixUrlAlias <<partial>> {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + SourceId : string <<get>> <<set>>
    + Type : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Alias : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
}
MixUrlAlias --> "CreatedDateTime" DateTime
MixUrlAlias --> "Status" MixContentStatus
MixUrlAlias --> "SpecificultureNavigation" MixCulture
class Refreshtokens <<partial>> {
    + Id : string <<get>> <<set>>
    + ClientId : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + Username : string <<get>> <<set>>
}
Refreshtokens --> "ExpiresUtc" DateTime
Refreshtokens --> "IssuedUtc" DateTime
class MixCmsContext <<partial>> {
    + MixCmsContext(options:DbContextOptions<MixCmsContext>)
    + MixCmsContext()
    + <<override>> Dispose() : void
    <<partial>> OnModelCreatingPartial(modelBuilder:ModelBuilder) : void
}
class "DbSet`1"<T> {
}
DbContext <|-- MixCmsContext
MixCmsContext --> "MixAttributeField<MixAttributeField>" "DbSet`1"
MixCmsContext --> "MixAttributeSet<MixAttributeSet>" "DbSet`1"
MixCmsContext --> "MixAttributeSetData<MixAttributeSetData>" "DbSet`1"
MixCmsContext --> "MixAttributeSetReference<MixAttributeSetReference>" "DbSet`1"
MixCmsContext --> "MixAttributeSetValue<MixAttributeSetValue>" "DbSet`1"
MixCmsContext --> "MixCache<MixCache>" "DbSet`1"
MixCmsContext --> "MixCmsUser<MixCmsUser>" "DbSet`1"
MixCmsContext --> "MixConfiguration<MixConfiguration>" "DbSet`1"
MixCmsContext --> "MixCulture<MixCulture>" "DbSet`1"
MixCmsContext --> "MixFile<MixFile>" "DbSet`1"
MixCmsContext --> "MixLanguage<MixLanguage>" "DbSet`1"
MixCmsContext --> "MixMedia<MixMedia>" "DbSet`1"
MixCmsContext --> "MixModule<MixModule>" "DbSet`1"
MixCmsContext --> "MixModuleData<MixModuleData>" "DbSet`1"
MixCmsContext --> "MixModulePost<MixModulePost>" "DbSet`1"
MixCmsContext --> "MixPage<MixPage>" "DbSet`1"
MixCmsContext --> "MixPageModule<MixPageModule>" "DbSet`1"
MixCmsContext --> "MixPagePost<MixPagePost>" "DbSet`1"
MixCmsContext --> "MixPortalPage<MixPortalPage>" "DbSet`1"
MixCmsContext --> "MixPortalPageNavigation<MixPortalPageNavigation>" "DbSet`1"
MixCmsContext --> "MixPortalPageRole<MixPortalPageRole>" "DbSet`1"
MixCmsContext --> "MixPost<MixPost>" "DbSet`1"
MixCmsContext --> "MixPostMedia<MixPostMedia>" "DbSet`1"
MixCmsContext --> "MixPostModule<MixPostModule>" "DbSet`1"
MixCmsContext --> "MixRelatedAttributeData<MixRelatedAttributeData>" "DbSet`1"
MixCmsContext --> "MixRelatedAttributeSet<MixRelatedAttributeSet>" "DbSet`1"
MixCmsContext --> "MixRelatedPost<MixRelatedPost>" "DbSet`1"
MixCmsContext --> "MixTemplate<MixTemplate>" "DbSet`1"
MixCmsContext --> "MixTheme<MixTheme>" "DbSet`1"
MixCmsContext --> "MixUrlAlias<MixUrlAlias>" "DbSet`1"
class MsSqlMixCmsContext <<partial>> {
    + MsSqlMixCmsContext()
    <<partial>> OnModelCreatingPartial(modelBuilder:ModelBuilder) : void
}
MixCmsContext <|-- MsSqlMixCmsContext
class MySqlMixCmsContext <<partial>> {
    + MySqlMixCmsContext(options:DbContextOptions<MixCmsContext>)
    + MySqlMixCmsContext()
    <<partial>> OnModelCreatingPartial(modelBuilder:ModelBuilder) : void
}
MixCmsContext <|-- MySqlMixCmsContext
class PostgresqlMixCmsContext <<partial>> {
    + PostgresqlMixCmsContext()
    + PostgresqlMixCmsContext(options:DbContextOptions<MixCmsContext>)
    <<partial>> OnModelCreatingPartial(modelBuilder:ModelBuilder) : void
}
MixCmsContext <|-- PostgresqlMixCmsContext
class SqliteMixCmsContext <<partial>> {
    + SqliteMixCmsContext()
    <<partial>> OnModelCreatingPartial(modelBuilder:ModelBuilder) : void
}
MixCmsContext <|-- SqliteMixCmsContext
class AccessTokenViewModel {
    + Access_token : string <<get>> <<set>>
    + Token_type : string <<get>> <<set>>
    + Refresh_token : string <<get>> <<set>>
    + Expires_in : int <<get>> <<set>>
    + Client_id : string <<get>> <<set>>
    + DeviceId : string <<get>> <<set>>
    + LastUpdateConfiguration : DateTime? <<get>> <<set>>
}
AccessTokenViewModel --> "Issued" DateTime
AccessTokenViewModel --> "Expires" DateTime
AccessTokenViewModel --> "UserData" UserInfoViewModel
class MixRegisterViewModel {
    + Id : string <<get>> <<set>>
    + Username : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + FirstName : string <<get>> <<set>>
    + MiddleName : string <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + Address : string <<get>> <<set>>
    + PhoneNumber : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + ConfirmPassword : string <<get>> <<set>>
    + DetailsUrl : string <<get>> <<set>>
    + Domain : string <<get>>
    + AvatarUrl : string <<get>>
    + MixRegisterViewModel()
    + MixRegisterViewModel(model:MixCmsUser, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixCmsUser
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + GetRoleNavs() : List<NavUserRoleViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixCmsUser,MixRegisterViewModel>" <|-- MixRegisterViewModel
MixRegisterViewModel --> "CreatedDateTime" DateTime
MixRegisterViewModel --> "Status" MixUserStatus
MixRegisterViewModel --> "UserRoles<NavUserRoleViewModel>" "List`1"
MixRegisterViewModel o-> "MediaFile" FileViewModel
class NavUserRoleViewModel {
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UserId : string <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
    + ApplicationUserId : string <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + NavUserRoleViewModel()
    + NavUserRoleViewModel(model:AspNetUserRoles, _context:MixCmsAccountContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsAccountContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsAccountContext,AspNetUserRoles,NavUserRoleViewModel>" <|-- NavUserRoleViewModel
NavUserRoleViewModel --> "Role" RoleViewModel
class RefreshTokenViewModel {
    + Id : string <<get>> <<set>>
    + ClientId : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + RefreshTokenViewModel()
    + RefreshTokenViewModel(model:RefreshTokens, _context:MixCmsAccountContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsAccountContext,RefreshTokens,RefreshTokenViewModel>" <|-- RefreshTokenViewModel
RefreshTokenViewModel --> "ExpiresUtc" DateTime
RefreshTokenViewModel --> "IssuedUtc" DateTime
class RoleViewModel {
    + Id : string <<get>> <<set>>
    + ConcurrencyStamp : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + NormalizedName : string <<get>> <<set>>
    + RoleViewModel()
    + RoleViewModel(model:AspNetRoles, _context:MixCmsAccountContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsAccountContext, _transaction:IDbContextTransaction) : AspNetRoles
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:RoleViewModel, _context:MixCmsAccountContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsAccountContext,AspNetRoles,RoleViewModel>" <|-- RoleViewModel
class UserInfoViewModel {
    + Id : string <<get>> <<set>>
    + Username : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + FirstName : string <<get>> <<set>>
    + MiddleName : string <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + Address : string <<get>> <<set>>
    + PhoneNumber : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DetailsUrl : string <<get>> <<set>>
    + Domain : string <<get>>
    + AvatarUrl : string <<get>>
    + IsChangePassword : bool <<get>> <<set>>
    + UserInfoViewModel()
    + UserInfoViewModel(model:MixCmsUser, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixCmsUser
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class ChangePasswordViewModel {
    + CurrentPassword : string <<get>> <<set>>
    + NewPassword : string <<get>> <<set>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixCmsUser,UserInfoViewModel>" <|-- UserInfoViewModel
UserInfoViewModel --> "CreatedDateTime" DateTime
UserInfoViewModel --> "Status" MixUserStatus
UserInfoViewModel o-> "UserRoles<UserRoleViewModel>" "List`1"
UserInfoViewModel o-> "MediaFile" FileViewModel
UserInfoViewModel --> "ResetPassword" ResetPasswordViewModel
UserInfoViewModel --> "ChangePassword" ChangePasswordViewModel
class UserRoleViewModel {
    + UserId : string <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
    + ApplicationUserId : string <<get>> <<set>>
    + UserRoleViewModel()
    + UserRoleViewModel(model:AspNetUserRoles, _context:MixCmsAccountContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsAccountContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsAccountContext,AspNetUserRoles,UserRoleViewModel>" <|-- UserRoleViewModel
UserRoleViewModel --> "Role" RoleViewModel
class InitCmsViewModel {
    + ConnectionString : string <<get>>
    + DatabaseServer : string <<get>> <<set>>
    + DatabasePort : string <<get>> <<set>>
    + DatabaseName : string <<get>> <<set>>
    + DatabaseUser : string <<get>> <<set>>
    + DatabasePassword : string <<get>> <<set>>
    + IsUseLocal : bool <<get>> <<set>>
    + LocalDbConnectionString : string <<get>> <<set>>
    + SqliteDbConnectionString : string <<get>> <<set>>
    + Lang : string <<get>> <<set>>
    + SiteName : string <<get>> <<set>> = "MixCore"
    + InitCmsViewModel()
}
InitCmsViewModel --> "DatabaseProvider" MixDatabaseProvider
InitCmsViewModel --> "Culture" InitCulture
class DeleteViewModel {
    + Id : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + DataType : int <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + IsRequire : bool <<get>> <<set>>
    + IsEncrypt : bool <<get>> <<set>>
    + IsSelect : bool <<get>> <<set>>
    + IsUnique : bool <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixAttributeField, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:DeleteViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeField,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "CreatedDateTime" DateTime
DeleteViewModel --> "Status" MixContentStatus
class FieldConfigurations {
}
class UploadConfigurations {
    + Accepts : string <<get>>
    + Width : int? <<get>> <<set>>
    + Height : int? <<get>> <<set>>
    + IsCrop : bool <<get>> <<set>>
}
FieldConfigurations o-> "Upload" UploadConfigurations
UploadConfigurations o-> "ArrayAccepts" JArray
class HubViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + IsRequire : bool <<get>> <<set>>
    + IsEncrypt : bool <<get>> <<set>>
    + IsSelect : bool <<get>> <<set>>
    + IsUnique : bool <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + HubViewModel()
    + HubViewModel(model:MixAttributeField, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeField,HubViewModel>" <|-- HubViewModel
HubViewModel --> "CreatedDateTime" DateTime
class MobileViewModel {
    + Id : int <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + IsRequire : bool <<get>> <<set>>
    + IsEncrypt : bool <<get>> <<set>>
    + IsSelect : bool <<get>> <<set>>
    + IsUnique : bool <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + MobileViewModel()
    + MobileViewModel(model:MixAttributeField, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeField,MobileViewModel>" <|-- MobileViewModel
MobileViewModel --> "CreatedDateTime" DateTime
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + IsRequire : bool <<get>> <<set>>
    + IsEncrypt : bool <<get>> <<set>>
    + IsSelect : bool <<get>> <<set>>
    + IsUnique : bool <<get>> <<set>>
    + IsMultiple : bool <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixAttributeField, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeField,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "DataType" MixDataType
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Configurations : string <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + IsRegex : bool <<get>>
    + Title : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + Options : string <<get>> <<set>> = "[]"
    + Name : string <<get>> <<set>>
    + IsRequire : bool <<get>> <<set>>
    + IsEncrypt : bool <<get>> <<set>>
    + IsSelect : bool <<get>> <<set>>
    + IsUnique : bool <<get>> <<set>>
    + IsMultiple : bool <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixAttributeField, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeField
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeField,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "DataType" MixDataType
UpdateViewModel --> "JOptions" JArray
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel o-> "FieldConfigurations" FieldConfigurations
class AdditionalViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DetailsUrl : string <<get>>
    + ParentId : string <<get>> <<set>>
    + AdditionalViewModel()
    + AdditionalViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetData
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<AdditionalViewModel>>
    + <<override>> SaveModel(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<AdditionalViewModel>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} <<async>> SaveObjectAsync(data:JObject, attributeSetName:string) : Task<RepositoryResponse<FormViewModel>>
    + HasValue(fieldName:string) : bool
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,AdditionalViewModel>" <|-- AdditionalViewModel
AdditionalViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
AdditionalViewModel --> "CreatedDateTime" DateTime
AdditionalViewModel --> "Status" MixContentStatus
AdditionalViewModel --> "Obj" JObject
AdditionalViewModel --> "ParentType" MixDatabaseParentType
AdditionalViewModel o-> "RelatedData<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
AdditionalViewModel --> "Values<MixAttributeSetValues.UpdateViewModel>" "List`1"
AdditionalViewModel --> "Fields<MixAttributeFields.UpdateViewModel>" "List`1"
AdditionalViewModel o-> "RefData<MixAttributeSetDatas.AdditionalViewModel>" "List`1"
class DeleteViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> RemoveRelatedModels(view:DeleteViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:DeleteViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : System.Threading.Tasks.Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,DeleteViewModel>" <|-- DeleteViewModel
class ExportViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ExportViewModel()
    + ExportViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetData
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,ExportViewModel>" <|-- ExportViewModel
ExportViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ExportViewModel --> "CreatedDateTime" DateTime
ExportViewModel --> "Status" MixContentStatus
ExportViewModel --> "Values<MixAttributeSetValues.UpdateViewModel>" "List`1"
ExportViewModel --> "Fields<MixAttributeFields.UpdateViewModel>" "List`1"
ExportViewModel o-> "RefData<MixAttributeSetDatas.UpdateViewModel>" "List`1"
ExportViewModel --> "Data" JObject
ExportViewModel o-> "RelatedData<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
class FormViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DetailsUrl : string <<get>>
    + ParentId : string <<get>> <<set>>
    + FormViewModel()
    + FormViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetData
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<FormViewModel>>
    + <<override>> SaveModel(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<FormViewModel>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} <<async>> SaveObjectAsync(data:JObject, attributeSetName:string) : Task<RepositoryResponse<FormViewModel>>
    + HasValue(fieldName:string) : bool
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,FormViewModel>" <|-- FormViewModel
FormViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
FormViewModel --> "CreatedDateTime" DateTime
FormViewModel --> "Status" MixContentStatus
FormViewModel --> "Obj" JObject
FormViewModel --> "ParentType" MixDatabaseParentType
FormViewModel o-> "RelatedData<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
FormViewModel --> "Values<MixAttributeSetValues.UpdateViewModel>" "List`1"
FormViewModel --> "Fields<MixAttributeFields.UpdateViewModel>" "List`1"
FormViewModel o-> "RefData<MixAttributeSetDatas.FormViewModel>" "List`1"
class Helper <<static>> {
    + {static} <<async>> ImportData(culture:string, attributeSet:Lib.ViewModels.MixAttributeSets.ReadViewModel, file:IFormFile) : Task<RepositoryResponse<bool>>
    + {static} <<async>> GetAdditionalData(parentType:MixDatabaseParentType, parentId:int, request:HttpRequest, culture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<AdditionalViewModel>>
    + {static} <<async>> FilterByKeywordAsync(culture:string, attributeSetName:string, request:RequestPaging, keyword:string, queryDictionary:Dictionary<string, Microsoft.Extensions.Primitives.StringValues>, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> FilterByKeywordAsync(request:HttpRequest, culture:string, attributeSetName:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> FilterByKeywordAsync(culture:string, attributeSetName:string, filterType:string, fieldName:string, keyword:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<List<TView>>>
    + {static} <<async>> GetAttributeDataByParent(culture:string, attributeSetName:string, parentId:string, parentType:MixDatabaseParentType, orderBy:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} ExportAttributeToExcel(lstData:List<JObject>, sheetName:string, folderPath:string, fileName:string, headers:List<string>) : RepositoryResponse<FileViewModel>
    + {static} ParseData(dataId:string, culture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : JObject
}
class ImportViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + ImportViewModel()
    + ImportViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetData
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<ImportViewModel>>
    + <<override>> SaveModel(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<ImportViewModel>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} <<async>> SaveObjectAsync(data:JObject, attributeSetName:string) : Task<RepositoryResponse<ImportViewModel>>
    + HasValue(fieldName:string) : bool
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
ImportViewModel --> "Obj" JObject
ImportViewModel --> "ParentType" MixDatabaseParentType
ImportViewModel o-> "RelatedData<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
ImportViewModel --> "Values<MixAttributeSetValues.UpdateViewModel>" "List`1"
ImportViewModel --> "Fields<MixAttributeFields.UpdateViewModel>" "List`1"
ImportViewModel o-> "RefData<MixAttributeSetDatas.ImportViewModel>" "List`1"
class NavigationViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + NavigationViewModel()
    + NavigationViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class Navigation {
    + Id : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
}
class MenuItem {
    + Id : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Uri : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + Target : string <<get>> <<set>>
    + Classes : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + TargetId : string <<get>> <<set>>
    + IsActive : bool <<get>> <<set>>
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,NavigationViewModel>" <|-- NavigationViewModel
NavigationViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
NavigationViewModel --> "CreatedDateTime" DateTime
NavigationViewModel --> "Status" MixContentStatus
NavigationViewModel --> "Values<MixAttributeSetValues.NavigationViewModel>" "List`1"
NavigationViewModel --> "Fields<MixAttributeFields.ReadViewModel>" "List`1"
NavigationViewModel --> "Obj" JObject
NavigationViewModel --> "Nav" Navigation
Navigation o-> "MenuItems<MenuItem>" "List`1"
Navigation o-> "ActivedMenuItems<MenuItem>" "List`1"
Navigation --> "ActivedMenuItem" MenuItem
MenuItem --> "Obj" JObject
MenuItem --> "MenuItems<MenuItem>" "List`1"
class ReadMvcViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + PreviewUrl : string <<get>>
    + DetailApiUrl : string <<get>>
    + TemplatePath : string <<get>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + HasValue(fieldName:string) : bool
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
ReadMvcViewModel --> "Values<MixAttributeSetValues.ReadViewModel>" "List`1"
ReadMvcViewModel --> "Obj" JObject
class ReadViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "Values<MixAttributeSetValues.ReadViewModel>" "List`1"
ReadViewModel --> "Fields<MixAttributeFields.ReadViewModel>" "List`1"
class UpdateViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetData
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<UpdateViewModel>>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> SaveSubModels(parent:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel o-> "RelatedData<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
UpdateViewModel --> "Values<MixAttributeSetValues.UpdateViewModel>" "List`1"
UpdateViewModel --> "Fields<MixAttributeFields.UpdateViewModel>" "List`1"
UpdateViewModel --> "DataNavs<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
UpdateViewModel --> "Data" JObject
UpdateViewModel --> "ParentType" MixDatabaseParentType
class DeleteViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + DataType : int <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetValue,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
DeleteViewModel --> "CreatedDateTime" DateTime
class Helper <<static>> {
    + {static} <<async>> FilterByOtherValueAsync(culture:string, attributeSetName:string, filterType:string, queries:Dictionary<string, string>, responseName:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<List<TView>>>
}
class HubViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + HubViewModel()
    + HubViewModel(model:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetValue
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetValue,HubViewModel>" <|-- HubViewModel
HubViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
HubViewModel --> "CreatedDateTime" DateTime
HubViewModel --> "DataNavs<MixRelatedAttributeDatas.HubViewModel>" "List`1"
class ImportViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ImportViewModel()
    + ImportViewModel(model:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetValue
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetValue,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "DataType" MixDataType
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
class MobileViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + MobileViewModel()
    + MobileViewModel(model:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetValue
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetValue,MobileViewModel>" <|-- MobileViewModel
MobileViewModel --> "CreatedDateTime" DateTime
MobileViewModel --> "DataNavs<MixRelatedAttributeDatas.MobileViewModel>" "List`1"
class NavigationViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + NavigationViewModel()
    + NavigationViewModel(model:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetValue
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetValue,NavigationViewModel>" <|-- NavigationViewModel
NavigationViewModel --> "DataType" MixDataType
NavigationViewModel --> "CreatedDateTime" DateTime
NavigationViewModel --> "Status" MixContentStatus
NavigationViewModel --> "DataNavs<MixRelatedAttributeDatas.NavigationViewModel>" "List`1"
class ReadMvcViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetValue,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "DataType" MixDataType
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetValue,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "DataType" MixDataType
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class UpdateViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeFieldId : int <<get>> <<set>>
    + Regex : string <<get>> <<set>>
    + AttributeFieldName : string <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + BooleanValue : bool? <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + DateTimeValue : DateTime? <<get>> <<set>>
    + DoubleValue : double? <<get>> <<set>>
    + IntegerValue : int? <<get>> <<set>>
    + StringValue : string <<get>> <<set>>
    + EncryptValue : string <<get>> <<set>>
    + EncryptKey : string <<get>> <<set>>
    + EncryptType : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixAttributeSetValue, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetValue
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetValue,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "DataType" MixDataType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
class ContentUpdateViewModel {
    + Id : int <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Type : int? <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + EdmSubject : string <<get>> <<set>>
    + EdmFrom : string <<get>> <<set>>
    + EdmAutoSend : bool? <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + ContentUpdateViewModel()
    + ContentUpdateViewModel(model:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSet
    + LoadPostData(postId:int, specificulture:string, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
class "PaginationModel`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSet,ContentUpdateViewModel>" <|-- ContentUpdateViewModel
ContentUpdateViewModel --> "CreatedDateTime" DateTime
ContentUpdateViewModel --> "Attributes<MixAttributeFields.UpdateViewModel>" "List`1"
ContentUpdateViewModel --> "PostData<MixRelatedAttributeDatas.UpdateViewModel>" "PaginationModel`1"
class DeleteViewModel {
    + Id : int <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> RemoveRelatedModels(view:DeleteViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:DeleteViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : System.Threading.Tasks.Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSet,DeleteViewModel>" <|-- DeleteViewModel
class Helper {
}
class ImportViewModel {
    + Id : int <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + EdmSubject : string <<get>> <<set>>
    + EdmFrom : string <<get>> <<set>>
    + EdmAutoSend : bool? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsExportData : bool <<get>> <<set>>
    + ImportViewModel()
    + ImportViewModel(model:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSet
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> SaveSubModels(parent:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSet,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
ImportViewModel --> "Fields<Lib.ViewModels.MixAttributeFields.UpdateViewModel>" "List`1"
ImportViewModel --> "Data<MixAttributeSetDatas.ImportViewModel>" "List`1"
class ReadMvcPostViewModel {
    + Id : int <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Type : int? <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + EdmSubject : string <<get>> <<set>>
    + EdmFrom : string <<get>> <<set>>
    + EdmAutoSend : bool? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadMvcPostViewModel()
    + ReadMvcPostViewModel(model:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + LoadPostData(postId:int, specificulture:string, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSet,ReadMvcPostViewModel>" <|-- ReadMvcPostViewModel
ReadMvcPostViewModel --> "CreatedDateTime" DateTime
class ReadMvcViewModel {
    + Id : int <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + EdmSubject : string <<get>> <<set>>
    + EdmFrom : string <<get>> <<set>>
    + EdmAutoSend : bool? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + LoadData(parentId:string, parentType:MixDatabaseParentType, specificulture:string, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "PaginationModel`1"<T> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSet,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
ReadMvcViewModel --> "Data<MixRelatedAttributeDatas.ReadMvcViewModel>" "PaginationModel`1"
ReadMvcViewModel --> "Fields<MixAttributeFields.UpdateViewModel>" "List`1"
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + EdmSubject : string <<get>> <<set>>
    + EdmFrom : string <<get>> <<set>>
    + EdmAutoSend : bool? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSet,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "Fields<MixAttributeFields.ReadViewModel>" "List`1"
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + ReferenceId : int? <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + EdmSubject : string <<get>> <<set>>
    + EdmFrom : string <<get>> <<set>>
    + EdmAutoSend : bool? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSet
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> SaveSubModels(parent:MixAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSet,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Type" MixDatabaseType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "Fields<MixAttributeFields.UpdateViewModel>" "List`1"
class DeleteViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixConfiguration, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixConfiguration,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
DeleteViewModel --> "DataType" MixDataType
DeleteViewModel --> "Status" MixContentStatus
DeleteViewModel --> "CreatedDateTime" DateTime
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixConfiguration, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixConfiguration
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<UpdateViewModel>>
    + {static} <<async>> ImportConfigurations(arrConfiguration:List<MixConfiguration>, destCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixConfiguration,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "DataType" MixDataType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "Property" DataValueViewModel
class ReadMvcViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixConfiguration, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixConfiguration,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "DataType" MixDataType
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
ReadMvcViewModel --> "Property" DataValueViewModel
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixConfiguration, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixConfiguration,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "DataType" MixDataType
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class SystemConfigurationViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + SystemConfigurationViewModel()
    + SystemConfigurationViewModel(model:MixConfiguration, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixConfiguration
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} <<async>> ImportConfigurations(arrConfiguration:List<MixConfiguration>, destCulture:string) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixConfiguration,SystemConfigurationViewModel>" <|-- SystemConfigurationViewModel
SystemConfigurationViewModel --> "DataType" MixDataType
SystemConfigurationViewModel --> "CreatedDateTime" DateTime
SystemConfigurationViewModel --> "Status" MixContentStatus
SystemConfigurationViewModel --> "Property" DataValueViewModel
class ImportViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImportViewModel()
    + ImportViewModel(model:MixConfiguration, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixConfiguration
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<ImportViewModel>>
    + {static} <<async>> ImportConfigurations(arrConfiguration:List<MixConfiguration>, destCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixConfiguration,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "DataType" MixDataType
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
ImportViewModel --> "Property" DataValueViewModel
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Alias : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FullName : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Lcid : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixCulture, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixCulture,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "Configurations<MixConfigurations.ReadMvcViewModel>" "List`1"
class SystemCultureViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Alias : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FullName : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Lcid : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + SystemCultureViewModel()
    + SystemCultureViewModel(model:MixCulture, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:SystemCultureViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixCulture,SystemCultureViewModel>" <|-- SystemCultureViewModel
SystemCultureViewModel --> "CreatedDateTime" DateTime
SystemCultureViewModel --> "Status" MixContentStatus
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Alias : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + FullName : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Lcid : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixCulture, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixCulture
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<UpdateViewModel>>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixCulture, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneRelatedAttributeDatasAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneAttributeDatasAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneAttributeValuesAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneUrlAliasAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneModulesAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneMediasAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> ClonePostMediasAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> ClonePostPostsAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneModulePostsAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> ClonePagePostsAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> ClonePageModulesAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> ClonePostsAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneModuleDatasAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneLanguagesAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> CloneConfigurationsAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> ClonePagesAsync(parent:MixCulture, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixCulture>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixCulture,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "Configurations<MixConfigurations.ReadMvcViewModel>" "List`1"
class ImportViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImportViewModel()
    + ImportViewModel(model:MixLanguage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixLanguage
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:ImportViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<ImportViewModel>>
    + <<override>> <<async>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixLanguage>>
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> RemoveRelatedModels(view:ImportViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + {static} <<async>> ImportLanguages(arrLanguage:List<MixLanguage>, destCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixLanguage,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "Cultures<SupportedCulture>" "List`1"
ImportViewModel --> "DataType" MixDataType
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
ImportViewModel --> "Property" DataValueViewModel
class MobileViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + MobileViewModel()
    + MobileViewModel(model:MixLanguage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> RemoveRelatedModels(view:MobileViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:MobileViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} <<async>> ImportLanguages(arrLanguage:List<MixLanguage>, destCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixLanguage,MobileViewModel>" <|-- MobileViewModel
MobileViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
MobileViewModel --> "DataType" MixDataType
class ReadAndroidViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + ReadAndroidViewModel()
    + ReadAndroidViewModel(model:MixLanguage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> RemoveRelatedModels(view:ReadAndroidViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:ReadAndroidViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} <<async>> ImportLanguages(arrLanguage:List<MixLanguage>, destCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixLanguage,ReadAndroidViewModel>" <|-- ReadAndroidViewModel
ReadAndroidViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadAndroidViewModel --> "DataType" MixDataType
class ReadMvcViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixLanguage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> RemoveRelatedModels(view:ReadMvcViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:ReadMvcViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixLanguage,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "Cultures<SupportedCulture>" "List`1"
ReadMvcViewModel --> "DataType" MixDataType
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
ReadMvcViewModel --> "Property" DataValueViewModel
class SystemLanguageViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + SystemLanguageViewModel()
    + SystemLanguageViewModel(model:MixLanguage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + {static} <<async>> ImportLanguages(arrLanguage:List<MixLanguage>, destCulture:string) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixLanguage,SystemLanguageViewModel>" <|-- SystemLanguageViewModel
SystemLanguageViewModel --> "Cultures<SupportedCulture>" "List`1"
SystemLanguageViewModel --> "DataType" MixDataType
SystemLanguageViewModel --> "CreatedDateTime" DateTime
SystemLanguageViewModel --> "Status" MixContentStatus
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Keyword : string <<get>> <<set>>
    + Category : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Value : string <<get>> <<set>>
    + DefaultValue : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixLanguage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixLanguage
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<UpdateViewModel>>
    + <<override>> <<async>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixLanguage>>
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> RemoveRelatedModels(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + {static} <<async>> ImportLanguages(arrLanguage:List<MixLanguage>, destCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixLanguage,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<SupportedCulture>" "List`1"
UpdateViewModel --> "DataType" MixDataType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "Property" DataValueViewModel
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + FileType : string <<get>> <<set>>
    + FileSize : int <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + TargetUrl : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + FullPath : string <<get>>
    + FilePath : string <<get>>
    + ReadViewModel()
    + ReadViewModel(model:MixMedia, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixMedia,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "MediaFile" FileViewModel
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + FileType : string <<get>> <<set>>
    + FileSize : int <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + TargetUrl : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + FullPath : string <<get>>
    + FilePath : string <<get>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixMedia, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixMedia
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> RemoveRelatedModels(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixMedia,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "MediaFile" FileViewModel
UpdateViewModel --> "File" IFormFile
class Helper {
    + {static} ParseValue(JItem:JObject, item:ApiModuleDataValueViewModel) : JToken
}
class ImportViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + Fields : string <<get>> <<set>> = "[]"
    + Value : string <<get>> <<set>>
    + PostId : int? <<get>> <<set>>
    + ProductId : int? <<get>> <<set>>
    + PageId : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ImportViewModel()
    + ImportViewModel(model:MixModuleData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModuleData
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModuleData,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
class ReadMvcViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + Fields : string <<get>> <<set>> = "[]"
    + Value : string <<get>> <<set>>
    + PostId : int? <<get>> <<set>>
    + ProductId : int? <<get>> <<set>>
    + PageId : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixModuleData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModuleData
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + ParseObjectValue() : string
    + InitValue() : JObject
    + GetStringValue(name:string) : string
    + Property(name:string) : string
    + GetDataProperty(name:string) : ApiModuleDataValueViewModel
    + {static} <<async>> UpdateInfosAsync(data:List<ReadViewModel>) : System.Threading.Tasks.Task<RepositoryResponse<List<ReadViewModel>>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModuleData,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
ReadMvcViewModel --> "DataProperties<ApiModuleDataValueViewModel>" "List`1"
ReadMvcViewModel --> "Obj" JObject
class ReadViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + Fields : string <<get>> <<set>> = "[]"
    + Value : string <<get>> <<set>>
    + PostId : int? <<get>> <<set>>
    + ProductId : int? <<get>> <<set>>
    + PageId : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixModuleData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModuleData
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + ParseObjectValue() : string
    + InitValue() : JObject
    + GetStringValue(name:string) : string
    + HasValue(fieldName:string) : bool
    + Property(name:string) : string
    + GetDataProperty(name:string) : ApiModuleDataValueViewModel
    + {static} <<async>> UpdateInfosAsync(data:List<ReadViewModel>) : System.Threading.Tasks.Task<RepositoryResponse<List<ReadViewModel>>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModuleData,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "DataProperties<ApiModuleDataValueViewModel>" "List`1"
ReadViewModel --> "JItem" JObject
class UpdateViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + Fields : string <<get>> <<set>> = "[]"
    + Value : string <<get>> <<set>>
    + PostId : int? <<get>> <<set>>
    + ProductId : int? <<get>> <<set>>
    + PageId : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixModuleData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModuleData
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + ParseObjectValue() : string
    + InitValue() : JObject
    + GetStringValue(name:string) : string
    + GetDataProperty(name:string) : ApiModuleDataValueViewModel
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModuleData,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "DataProperties<ApiModuleDataValueViewModel>" "List`1"
UpdateViewModel --> "JItem" JObject
class ImportViewModel {
    + ImportViewModel(model:MixModulePost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ImportViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModulePost
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} GetModulePostNavAsync(postId:int, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<List<MixModulePosts.ReadViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixModulePost,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
class ReadMvcViewModel {
    + ReadMvcViewModel(model:MixModulePost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadMvcViewModel()
    + Specificulture : string <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} GetModulePostNavAsync(postId:int, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<List<MixModulePosts.ReadViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixModulePost,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + ReadViewModel(model:MixModulePost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModulePost
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} GetModulePostNavAsync(postId:int, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<List<MixModulePosts.ReadViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixModulePost,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class Helper {
    + {static} <<async>> Import(arrModule:List<MixModule>, destCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} LoadCultures(id:int, initCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : List<SupportedCulture>
    + {static} GetBy(predicate:Expression<Func<MixModule, bool>>, postId:string, productId:string, pageId:int, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<UpdateViewModel>
}
class ImportViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Fields : string <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + PostId : string <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + IsExportData : bool <<get>> <<set>>
    + ImportViewModel()
    + ImportViewModel(model:MixModule, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModule
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixModule, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixModule>>
    + LoadData(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + GetPostNavs(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixModulePosts.ImportViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModule,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ImportViewModel --> "Type" MixModuleType
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
ImportViewModel o-> "Data<MixModuleDatas.ImportViewModel>" "List`1"
ImportViewModel --> "PostNavs<MixModulePosts.ImportViewModel>" "List`1"
class ReadListItemViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Fields : string <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + DetailsUrl : string <<get>>
    + ReadListItemViewModel()
    + ReadListItemViewModel(model:MixModule, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModule,ReadListItemViewModel>" <|-- ReadListItemViewModel
ReadListItemViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadListItemViewModel --> "Type" MixModuleType
ReadListItemViewModel --> "CreatedDateTime" DateTime
ReadListItemViewModel --> "Status" MixContentStatus
class ReadMvcViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Fields : string <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + DetailsUrl : string <<get>> <<set>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + TemplatePath : string <<get>>
    + FormTemplatePath : string <<get>>
    + EdmTemplatePath : string <<get>>
    + PostId : int? <<get>> <<set>>
    + PageId : int? <<get>> <<set>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixModule, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} GetBy(predicate:Expression<Func<MixModule, bool>>, postId:int?, productid:int?, pageId:int, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<ReadMvcViewModel>
    + LoadData(postId:int?, productId:int?, pageId:int?, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + HasValue(fieldName:string) : bool
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
class "PaginationModel`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModule,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadMvcViewModel --> "Type" MixModuleType
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
ReadMvcViewModel --> "Columns<ModuleFieldViewModel>" "List`1"
ReadMvcViewModel o-> "Data<ViewModels.MixModuleDatas.ReadViewModel>" "PaginationModel`1"
ReadMvcViewModel o-> "Posts<MixModulePosts.ReadViewModel>" "PaginationModel`1"
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + FormTemplate : string <<get>> <<set>>
    + EdmTemplate : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Fields : string <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + TemplateFolderType : string <<get>>
    + ActivedTheme : int <<get>>
    + ThemeFolderType : string <<get>>
    + TemplateFolder : string <<get>>
    + FormFolderType : string <<get>>
    + FormFolder : string <<get>>
    + EdmFolderType : string <<get>>
    + EdmFolder : string <<get>>
    + PostId : string <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixModule, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixModule
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixModule>>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixModule, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} <<async>> SaveByModuleName(culture:string, createdBy:string, name:string, formName:string, obj:JObject, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<JObject>>
    + LoadData(postId:int?, productId:int?, pageId:int?, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
class "PaginationModel`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixModule,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
UpdateViewModel --> "Type" MixModuleType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel o-> "Data<MixModuleDatas.ReadViewModel>" "PaginationModel`1"
UpdateViewModel --> "Columns<ModuleFieldViewModel>" "List`1"
UpdateViewModel --> "Templates<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "Forms<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "Edms<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
UpdateViewModel --> "SysCategories<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
UpdateViewModel --> "SysTags<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
class ImportViewModel {
    + ImportViewModel(model:MixPageModule, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ImportViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPageModule,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
class ReadMvcViewModel {
    + ReadMvcViewModel(model:MixPageModule, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadMvcViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPageModule
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPageModule,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
class Helper {
    + {static} GetNavAsync(postId:int, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<List<MixPagePosts.ReadViewModel>>
    + {static} GetActivedNavAsync(postId:int?, pageId:int?, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<List<TView>>
}
class ImportViewModel {
    + ImportViewModel(model:MixPagePost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ImportViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPagePost
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} GetPagePostNavAsync(postId:int, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<List<MixPagePosts.ImportViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPagePost,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
class ReadMvcViewModel {
    + ReadMvcViewModel(model:MixPagePost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadMvcViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPagePost
    + LoadPage(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + LoadPost(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} GetPagePostNavAsync(postId:int, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<List<MixPagePosts.ReadViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPagePost,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + ReadViewModel(model:MixPagePost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPagePost
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + LoadPage(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + LoadPost(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} GetPagePostNavAsync(postId:int, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<List<MixPagePosts.ReadViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPagePost,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class DeleteViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + CssClass : string <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + UpdatedDateTime : DateTime? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + StaticUrl : string <<get>> <<set>>
    + Level : int? <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + DetailsUrl : string <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + ActivedTheme : int <<get>>
    + TemplateFolderType : string <<get>>
    + TemplateFolder : string <<get>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:DeleteViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPage,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
DeleteViewModel --> "Type" MixPageType
DeleteViewModel --> "Status" MixContentStatus
DeleteViewModel --> "CreatedDateTime" DateTime
DeleteViewModel --> "ModuleNavs<MixPageModules.ReadMvcViewModel>" "List`1"
DeleteViewModel o-> "ListTag" JArray
DeleteViewModel --> "ImageFileStream" FileStreamViewModel
DeleteViewModel --> "Templates<MixTemplates.UpdateViewModel>" "List`1"
DeleteViewModel --> "Masters<MixTemplates.UpdateViewModel>" "List`1"
DeleteViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
DeleteViewModel --> "SysCategories<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
DeleteViewModel --> "SysTags<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
class Helper {
    + {static} LoadCultures(id:int, initCulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : List<SupportedCulture>
}
class ImportViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + CssClass : string <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + StaticUrl : string <<get>> <<set>>
    + Level : int? <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsExportData : bool <<get>> <<set>>
    + ThemeName : string <<get>> <<set>> = "default"
    + ImportViewModel()
    + ImportViewModel(model:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + GetAliases(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixUrlAliases.UpdateViewModel>
    + GetModuleNavs(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPageModules.ImportViewModel>
    + GetPostNavs(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPagePosts.ImportViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPage,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ImportViewModel --> "Type" MixPageType
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
ImportViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
class ReadListItemViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + CssClass : string <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + StaticUrl : string <<get>> <<set>>
    + Level : int? <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + TotalPost : int <<get>> <<set>>
    + TotalProduct : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + DetailsUrl : string <<get>> <<set>>
    + ReadListItemViewModel()
    + ReadListItemViewModel(model:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPage,ReadListItemViewModel>" <|-- ReadListItemViewModel
ReadListItemViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadListItemViewModel --> "Type" MixPageType
ReadListItemViewModel --> "CreatedDateTime" DateTime
ReadListItemViewModel --> "Status" MixContentStatus
class ReadMvcViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + CssClass : string <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + StaticUrl : string <<get>> <<set>>
    + Level : int? <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DetailsUrl : string <<get>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + TemplatePath : string <<get>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + LoadData(pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + LoadDataByTag(tagName:string, orderBy:string, orderDirection:int, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + LoadDataByKeyword(keyword:string, orderBy:string, orderDirection:int, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + GetModule(name:string) : MixModules.ReadMvcViewModel
    + HasValue(fieldName:string) : bool
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
class "PaginationModel`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPage,ReadMvcViewModel>" <|-- ReadMvcViewModel
MvcViewModel <|-- ReadMvcViewModel
ReadMvcViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadMvcViewModel --> "Type" MixPageType
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
ReadMvcViewModel o-> "Posts<MixPagePosts.ReadViewModel>" "PaginationModel`1"
ReadMvcViewModel o-> "Modules<MixPageModules.ReadMvcViewModel>" "List`1"
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + CssClass : string <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + StaticUrl : string <<get>> <<set>>
    + Level : int? <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + TotalPost : int <<get>> <<set>>
    + TotalProduct : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + DetailsUrl : string <<get>>
    + ReadViewModel()
    + ReadViewModel(model:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} <<async>> UpdateInfosAsync(cates:List<ReadViewModel>) : Task<RepositoryResponse<List<ReadViewModel>>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPage,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadViewModel --> "Type" MixPageType
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "Childs<ReadViewModel>" "List`1"
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + CssClass : string <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Tags : string <<get>> <<set>>
    + StaticUrl : string <<get>> <<set>>
    + Level : int? <<get>> <<set>>
    + PageSize : int? <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DetailsUrl : string <<get>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + ActivedTheme : int <<get>>
    + TemplateFolderType : string <<get>>
    + TemplateFolder : string <<get>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPage
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> SaveSubModels(parent:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixPage, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + GetAliases(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixUrlAliases.UpdateViewModel>
    + GetModuleNavs(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPageModules.ReadMvcViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPage,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
UpdateViewModel o-> "Type" MixPageType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "ModuleNavs<MixPageModules.ReadMvcViewModel>" "List`1"
UpdateViewModel o-> "ListTag" JArray
UpdateViewModel --> "ImageFileStream" FileStreamViewModel
UpdateViewModel --> "Templates<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "Masters<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
UpdateViewModel --> "SysCategories<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
UpdateViewModel --> "SysTags<MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
class ReadPermissionViewModel {
    + ReadPermissionViewModel(model:MixPortalPageNavigation, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadPermissionViewModel()
    + Specificulture : string <<get>> <<set>>
    + Id : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} <<async>> UpdateInfosAsync(cates:List<MixPortalPagePortalPages.ReadViewModel>) : System.Threading.Tasks.Task<RepositoryResponse<List<ReadViewModel>>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPageNavigation,ReadPermissionViewModel>" <|-- ReadPermissionViewModel
ReadPermissionViewModel --> "CreatedDateTime" DateTime
ReadPermissionViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + ReadViewModel(model:MixPortalPageNavigation, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadViewModel()
    + Specificulture : string <<get>> <<set>>
    + Id : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPageNavigation,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class UpdateViewModel {
    + UpdateViewModel(model:MixPortalPageNavigation, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + UpdateViewModel()
    + Specificulture : string <<get>> <<set>>
    + Id : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPortalPageNavigation
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixPortalPageNavigation, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + {static} <<async>> UpdateInfosAsync(cates:List<MixPortalPagePortalPages.UpdateViewModel>) : System.Threading.Tasks.Task<RepositoryResponse<List<UpdateViewModel>>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPageNavigation,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + PageId : int <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + ReadViewModel(model:MixPortalPageRole, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadViewModel()
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPortalPageRole
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPageRole,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class ReadRolePermissionViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + TextKeyword : string <<get>> <<set>>
    + TextDefault : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Descriotion : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Url : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadRolePermissionViewModel()
    + ReadRolePermissionViewModel(model:MixPortalPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPage,ReadRolePermissionViewModel>" <|-- ReadRolePermissionViewModel
ReadRolePermissionViewModel --> "CreatedDateTime" DateTime
ReadRolePermissionViewModel --> "Status" MixContentStatus
ReadRolePermissionViewModel o-> "ChildPages<MixPortalPagePortalPages.ReadPermissionViewModel>" "List`1"
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + TextKeyword : string <<get>> <<set>>
    + TextDefault : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Descriotion : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Url : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixPortalPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPage,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class UpdateRolePermissionViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + TextKeyword : string <<get>> <<set>>
    + TextDefault : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Descriotion : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Url : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateRolePermissionViewModel()
    + UpdateRolePermissionViewModel(model:MixPortalPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPage,UpdateRolePermissionViewModel>" <|-- UpdateRolePermissionViewModel
UpdateRolePermissionViewModel --> "CreatedDateTime" DateTime
UpdateRolePermissionViewModel --> "Status" MixContentStatus
UpdateRolePermissionViewModel o-> "ChildPages<MixPortalPagePortalPages.UpdateViewModel>" "List`1"
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + TextKeyword : string <<get>> <<set>>
    + TextDefault : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Url : string <<get>> <<set>>
    + Level : int <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixPortalPage, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPortalPage
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixPortalPage, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + GetParentNavs(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPortalPagePortalPages.UpdateViewModel>
    + GetChildNavs(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPortalPagePortalPages.UpdateViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPortalPage,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel o-> "ChildNavs<MixPortalPagePortalPages.UpdateViewModel>" "List`1"
UpdateViewModel o-> "ParentNavs<MixPortalPagePortalPages.UpdateViewModel>" "List`1"
class ReadViewModel {
    + ReadViewModel(model:MixPostMedia, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + MediaId : int <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPostMedia
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> SaveSubModels(parent:MixPostMedia, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixPostMedia, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPostMedia,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "Media" UpdateViewModel
class ReadViewModel {
    + ReadViewModel(model:MixPostModule, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadViewModel()
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + ModuleId : int <<get>> <<set>>
    + PostId : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPostModule
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPostModule,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + SourceId : int <<get>> <<set>>
    + DestinationId : int <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixRelatedPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixRelatedPost
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedPost,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class CreateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + ExtraFields : string <<get>> <<set>> = "[]"
    + ExtraProperties : string <<get>> <<set>> = "[]"
    + Icon : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + PublishedDateTime : DateTime? <<get>> <<set>>
    + Tags : string <<get>> <<set>> = "[]"
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ActivedTheme : int <<get>>
    + TemplateFolderType : string <<get>>
    + TemplateFolder : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + DetailsUrl : string <<get>> <<set>>
    + CreateViewModel()
    + CreateViewModel(model:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPost
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:CreateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> CloneAsync(model:MixPost, cloneCultures:List<SupportedCulture>, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<List<CreateViewModel>>>
    + <<override>> SaveSubModels(parent:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> RemoveRelatedModels(view:CreateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + GetRelated(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPostPosts.ReadViewModel>
    + GetAliases(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixUrlAliases.UpdateViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPost,CreateViewModel>" <|-- CreateViewModel
CreateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
CreateViewModel --> "CreatedDateTime" DateTime
CreateViewModel --> "Status" MixContentStatus
CreateViewModel --> "Pages<MixPagePosts.ReadViewModel>" "List`1"
CreateViewModel --> "Modules<MixModulePosts.ReadViewModel>" "List`1"
CreateViewModel --> "MediaNavs<MixPostMedias.ReadViewModel>" "List`1"
CreateViewModel --> "PostNavs<MixPostPosts.ReadViewModel>" "List`1"
CreateViewModel o-> "ListTag" JArray
CreateViewModel --> "ImageFileStream" FileStreamViewModel
CreateViewModel --> "ThumbnailFileStream" FileStreamViewModel
CreateViewModel --> "Templates<MixTemplates.UpdateViewModel>" "List`1"
CreateViewModel --> "Properties<ExtraProperty>" "List`1"
CreateViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
CreateViewModel --> "Columns<ModuleFieldViewModel>" "List`1"
class DeleteViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:DeleteViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixPost,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "CreatedDateTime" DateTime
DeleteViewModel --> "Status" MixContentStatus
class Helper {
    + {static} <<async>> GetModelistByMeta(metaName:string, metaValue:string, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> GetPostListByValueId(valueId:string, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> GetPostListByValueIds(valueIds:List<string>, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> GetPostListByPageId(pageId:int, keyword:string, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> GetPostListByDataId(dataId:string, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> GetPostListByDataIds(dataIds:List<string>, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> SearchPost(keyword:string, dataIds:List<string>, pageIds:List<int>, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> GetModelistByAdditionalField(fieldName:string, value:string, culture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<TView>>>
    + {static} <<async>> PublishScheduledPosts() : Task
}
class ImportViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + PublishedDateTime : DateTime? <<get>> <<set>>
    + Tags : string <<get>> <<set>> = "[]"
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImportViewModel()
    + ImportViewModel(model:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPost,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
ImportViewModel --> "Pages<MixPagePosts.ReadViewModel>" "List`1"
ImportViewModel --> "Modules<MixModulePosts.ReadViewModel>" "List`1"
ImportViewModel --> "MediaNavs<MixPostMedias.ReadViewModel>" "List`1"
ImportViewModel --> "PostNavs<MixPostPosts.ReadViewModel>" "List`1"
ImportViewModel o-> "ListTag" JArray
ImportViewModel --> "SysCategories<MixRelatedAttributeDatas.FormViewModel>" "List`1"
ImportViewModel --> "SysTags<MixRelatedAttributeDatas.FormViewModel>" "List`1"
ImportViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
class ReadListItemViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Icon : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + PublishedDateTime : DateTime? <<get>> <<set>>
    + Tags : string <<get>> <<set>> = "[]"
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DetailsUrl : string <<get>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + ReadListItemViewModel()
    + ReadListItemViewModel(model:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPost,ReadListItemViewModel>" <|-- ReadListItemViewModel
ReadListItemViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadListItemViewModel --> "CreatedDateTime" DateTime
ReadListItemViewModel --> "Status" MixContentStatus
ReadListItemViewModel o-> "SysTags<MixRelatedAttributeDatas.FormViewModel>" "List`1"
ReadListItemViewModel o-> "SysCategories<MixRelatedAttributeDatas.FormViewModel>" "List`1"
ReadListItemViewModel --> "ListTag<string>" "List`1"
ReadListItemViewModel --> "ListCategory<string>" "List`1"
ReadListItemViewModel --> "Pages<MixPagePosts.ReadViewModel>" "List`1"
class ReadMvcViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + ExtraFields : string <<get>> <<set>> = "[]"
    + ExtraProperties : string <<get>> <<set>> = "[]"
    + Icon : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + PublishedDateTime : DateTime? <<get>> <<set>>
    + Tags : string <<get>> <<set>> = "[]"
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + DetailsUrl : string <<get>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + TemplatePath : string <<get>>
    + Layout : string <<get>> <<set>>
    + ReadMvcViewModel()
    + ReadMvcViewModel(model:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + HasValue(fieldName:string) : bool
    + Property(fieldName:string) : T
    + GetModule(name:string) : MixModules.ReadMvcViewModel
    + GetAttributeSet(name:string) : MixAttributeSets.ReadViewModel
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPost,ReadMvcViewModel>" <|-- ReadMvcViewModel
MvcViewModel <|-- ReadMvcViewModel
ReadMvcViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
ReadMvcViewModel --> "Modules<ViewModels.MixModules.ReadMvcViewModel>" "List`1"
ReadMvcViewModel --> "MediaNavs<MixPostMedias.ReadViewModel>" "List`1"
ReadMvcViewModel --> "ModuleNavs<MixPostModules.ReadViewModel>" "List`1"
ReadMvcViewModel --> "PostNavs<MixPostPosts.ReadViewModel>" "List`1"
ReadMvcViewModel o-> "AttributeSets<MixAttributeSets.ReadViewModel>" "List`1"
ReadMvcViewModel o-> "SysTags<MixRelatedAttributeDatas.FormViewModel>" "List`1"
ReadMvcViewModel o-> "SysCategories<MixRelatedAttributeDatas.FormViewModel>" "List`1"
ReadMvcViewModel --> "ListTag<string>" "List`1"
ReadMvcViewModel --> "ListCategory<string>" "List`1"
ReadMvcViewModel --> "Pages<MixPagePosts.ReadViewModel>" "List`1"
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + ExtraFields : string <<get>> <<set>> = "[]"
    + ExtraProperties : string <<get>> <<set>> = "[]"
    + Icon : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + PublishedDateTime : DateTime? <<get>> <<set>>
    + Tags : string <<get>> <<set>> = "[]"
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + DetailsUrl : string <<get>>
    + ReadViewModel()
    + ReadViewModel(model:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + Property(name:string) : string
    + {static} <<async>> GetModelListByCategoryAsync(pageId:int, specificulture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, skip:int?, top:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<PaginationModel<ReadViewModel>>>
    + {static} GetModelListByCategory(pageId:int, specificulture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<PaginationModel<ReadViewModel>>
    + {static} GetModelListByModule(ModuleId:int, specificulture:string, orderByPropertyName:string, direction:Heart.Enums.MixHeartEnums.DisplayDirection, pageSize:int?, pageIndex:int?, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<PaginationModel<ReadViewModel>>
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + Property(fieldName:string) : T
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPost,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "Properties<ExtraProperty>" "List`1"
ReadViewModel o-> "SysTags<MixRelatedAttributeDatas.FormViewModel>" "List`1"
ReadViewModel o-> "SysCategories<MixRelatedAttributeDatas.FormViewModel>" "List`1"
ReadViewModel --> "ListTag<string>" "List`1"
ReadViewModel --> "ListCategory<string>" "List`1"
class SyncViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + ExtraFields : string <<get>> <<set>> = "[]"
    + ExtraProperties : string <<get>> <<set>> = "[]"
    + Icon : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + PublishedDateTime : DateTime? <<get>> <<set>>
    + Tags : string <<get>> <<set>> = "[]"
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Domain : string <<get>>
    + ActivedTheme : int <<get>>
    + TemplateFolderType : string <<get>>
    + TemplateFolder : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + DetailsUrl : string <<get>> <<set>>
    + SyncViewModel()
    + SyncViewModel(model:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPost
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> SaveSubModels(parent:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> RemoveRelatedModels(view:SyncViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + GetRelated(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPostPosts.ReadViewModel>
    + GetAliases(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixUrlAliases.UpdateViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPost,SyncViewModel>" <|-- SyncViewModel
SyncViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
SyncViewModel --> "CreatedDateTime" DateTime
SyncViewModel --> "Status" MixContentStatus
SyncViewModel --> "Pages<MixPagePosts.ReadViewModel>" "List`1"
SyncViewModel --> "Modules<MixModulePosts.ReadViewModel>" "List`1"
SyncViewModel --> "MediaNavs<MixPostMedias.ReadViewModel>" "List`1"
SyncViewModel --> "ModuleNavs<MixPostModules.ReadViewModel>" "List`1"
SyncViewModel --> "PostNavs<MixPostPosts.ReadViewModel>" "List`1"
SyncViewModel o-> "ListTag" JArray
SyncViewModel --> "ImageFileStream" FileStreamViewModel
SyncViewModel --> "ThumbnailFileStream" FileStreamViewModel
SyncViewModel --> "Templates<MixTemplates.UpdateViewModel>" "List`1"
SyncViewModel --> "Properties<ExtraProperty>" "List`1"
SyncViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
SyncViewModel --> "Columns<ModuleFieldViewModel>" "List`1"
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Template : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + ExtraFields : string <<get>> <<set>> = "[]"
    + ExtraProperties : string <<get>> <<set>> = "[]"
    + Icon : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Excerpt : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + SeoName : string <<get>> <<set>>
    + SeoTitle : string <<get>> <<set>>
    + SeoDescription : string <<get>> <<set>>
    + SeoKeywords : string <<get>> <<set>>
    + Source : string <<get>> <<set>>
    + Views : int? <<get>> <<set>>
    + Type : string <<get>> <<set>>
    + PublishedDateTime : DateTime? <<get>> <<set>>
    + Tags : string <<get>> <<set>> = "[]"
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + TemplatePath : string <<get>> <<set>>
    + Domain : string <<get>>
    + ActivedTheme : int <<get>>
    + TemplateFolderType : string <<get>>
    + TemplateFolder : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + DetailsUrl : string <<get>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixPost
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> CloneAsync(model:MixPost, cloneCultures:List<SupportedCulture>, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<List<UpdateViewModel>>>
    + <<override>> SaveSubModels(parent:MixPost, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> RemoveRelatedModels(view:UpdateViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + GetRelated(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixPostPosts.ReadViewModel>
    + GetAliases(context:MixCmsContext, transaction:IDbContextTransaction) : List<MixUrlAliases.UpdateViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixPost,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "Pages<MixPagePosts.ReadViewModel>" "List`1"
UpdateViewModel --> "Modules<MixModulePosts.ReadViewModel>" "List`1"
UpdateViewModel --> "MediaNavs<MixPostMedias.ReadViewModel>" "List`1"
UpdateViewModel --> "ModuleNavs<MixPostModules.ReadViewModel>" "List`1"
UpdateViewModel --> "PostNavs<MixPostPosts.ReadViewModel>" "List`1"
UpdateViewModel o-> "ListTag" JArray
UpdateViewModel --> "ImageFileStream" FileStreamViewModel
UpdateViewModel --> "ThumbnailFileStream" FileStreamViewModel
UpdateViewModel --> "SysCategories<MixRelatedAttributeDatas.FormViewModel>" "List`1"
UpdateViewModel --> "SysTags<MixRelatedAttributeDatas.FormViewModel>" "List`1"
UpdateViewModel --> "Templates<MixTemplates.UpdateViewModel>" "List`1"
UpdateViewModel --> "Properties<ExtraProperty>" "List`1"
UpdateViewModel --> "UrlAliases<MixUrlAliases.UpdateViewModel>" "List`1"
UpdateViewModel --> "Columns<ModuleFieldViewModel>" "List`1"
class DeleteViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixRelatedAttributeData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixRelatedAttributeData
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeData,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "ParentType" MixDatabaseParentType
DeleteViewModel --> "CreatedDateTime" DateTime
class FormViewModel {
    + FormViewModel(model:MixRelatedAttributeData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + FormViewModel()
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixRelatedAttributeData
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<FormViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeData,FormViewModel>" <|-- FormViewModel
FormViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
FormViewModel --> "ParentType" MixDatabaseParentType
FormViewModel --> "CreatedDateTime" DateTime
FormViewModel --> "Status" MixContentStatus
class Helper {
    + {static} <<async>> RemoveRelatedDataAsync(parentId:string, parentType:MixDatabaseParentType, specificulture:string, context:MixCmsContext, transaction:IDbContextTransaction) : Task<RepositoryResponse<List<MixRelatedAttributeData>>>
}
class ImportViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsProcessed : bool <<get>> <<set>>
    + ImportViewModel()
    + ImportViewModel(model:MixRelatedAttributeData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeData,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ImportViewModel --> "ParentType" MixDatabaseParentType
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
class NavigationViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ParentName : string <<get>> <<set>>
    + NavigationViewModel(model:MixRelatedAttributeData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + NavigationViewModel()
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeData,NavigationViewModel>" <|-- NavigationViewModel
NavigationViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
NavigationViewModel --> "ParentType" MixDatabaseParentType
NavigationViewModel --> "CreatedDateTime" DateTime
NavigationViewModel --> "Status" MixContentStatus
class ReadMvcViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadMvcViewModel(model:MixRelatedAttributeData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadMvcViewModel()
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeData,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadMvcViewModel --> "ParentType" MixDatabaseParentType
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixRelatedAttributeData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeData,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
ReadViewModel --> "ParentType" MixDatabaseParentType
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class UpdateViewModel {
    + UpdateViewModel(model:MixRelatedAttributeData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + UpdateViewModel()
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + DataId : string <<get>> <<set>>
    + ParentId : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ParentName : string <<get>> <<set>>
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixRelatedAttributeData
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeData,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
UpdateViewModel --> "ParentType" MixDatabaseParentType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
class DeleteViewModel {
    + Id : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixRelatedAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixRelatedAttributeSet
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeSet,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "ParentType" MixDatabaseParentType
DeleteViewModel --> "CreatedDateTime" DateTime
class ReadMvcViewModel {
    + ReadMvcViewModel(model:MixRelatedAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + ReadMvcViewModel()
    + Id : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeSet,ReadMvcViewModel>" <|-- ReadMvcViewModel
ReadMvcViewModel --> "ParentType" MixDatabaseParentType
ReadMvcViewModel --> "CreatedDateTime" DateTime
ReadMvcViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsActived : bool <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixRelatedAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixRelatedAttributeSet
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeSet,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "ParentType" MixDatabaseParentType
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + ParentId : int <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateViewModel(model:MixRelatedAttributeSet, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + UpdateViewModel()
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixRelatedAttributeSet
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixRelatedAttributeSet,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "ParentType" MixDatabaseParentType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
class DeleteViewModel {
    + Id : int <<get>> <<set>>
    + ThemeId : int <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + FolderType : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + AssetFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + TemplatePath : string <<get>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixTemplate
    + <<override>> RemoveModel(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<MixTemplate>
    + <<override>> <<async>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixTemplate>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixTemplate,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "CreatedDateTime" DateTime
class ImportViewModel {
    + Id : int <<get>> <<set>>
    + ThemeId : int <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + FolderType : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + Extension : string <<get>> <<set>> = ".cshtml"
    + Content : string <<get>> <<set>>
    + MobileContent : string <<get>> <<set>> = "{}"
    + SpaContent : string <<get>> <<set>> = ""
    + Scripts : string <<get>> <<set>>
    + Styles : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + AssetFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + TemplatePath : string <<get>>
    + ImportViewModel()
    + ImportViewModel(model:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixTemplate
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<ImportViewModel>>
    + <<override>> RemoveModel(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<MixTemplate>
    + <<override>> SaveSubModels(parent:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixTemplate>>
    + <<override>> SaveSubModelsAsync(parent:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} GetTemplateByPath(path:string, culture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<ImportViewModel>
    + {static} GetTemplateByPath(path:string, specificulture:string, folderType:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : ImportViewModel
    + {static} GetDefault(folderType:string, specificulture:string) : ImportViewModel
    + <<async>> CopyAsync() : Task<RepositoryResponse<ImportViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixTemplate,ImportViewModel>" <|-- ImportViewModel
ImportViewModel --> "CreatedDateTime" DateTime
ImportViewModel --> "Status" MixContentStatus
class InitViewModel {
    + Id : int <<get>> <<set>>
    + ThemeId : int <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + FolderType : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + MobileContent : string <<get>> <<set>> = "{}"
    + SpaContent : string <<get>> <<set>> = ""
    + Scripts : string <<get>> <<set>>
    + Styles : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + AssetFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + TemplatePath : string <<get>>
    + InitViewModel()
    + InitViewModel(model:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixTemplate
    + <<override>> RemoveModel(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<MixTemplate>
    + <<override>> SaveSubModels(parent:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixTemplate>>
    + <<override>> SaveSubModelsAsync(parent:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixTemplate,InitViewModel>" <|-- InitViewModel
InitViewModel --> "CreatedDateTime" DateTime
InitViewModel --> "Status" MixContentStatus
class ReadListItemViewModel {
    + Id : int <<get>> <<set>>
    + ThemeId : int <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + FolderType : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + MobileContent : string <<get>> <<set>> = "{}"
    + SpaContent : string <<get>> <<set>> = ""
    + Scripts : string <<get>> <<set>>
    + Styles : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AssetFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + TemplatePath : string <<get>>
    + ReadListItemViewModel()
    + ReadListItemViewModel(model:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + {static} GetTemplateByPath(path:string, culture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<ReadListItemViewModel>
    + {static} GetTemplateByPath(themeId:int, path:string, type:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : ReadListItemViewModel
    + {static} GetDefault(activedTemplate:string, folderType:string, folder:string, specificulture:string) : ReadListItemViewModel
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixTemplate,ReadListItemViewModel>" <|-- ReadListItemViewModel
ReadListItemViewModel --> "CreatedDateTime" DateTime
ReadListItemViewModel --> "Status" MixContentStatus
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + ThemeId : int <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + FolderType : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + Extension : string <<get>> <<set>>
    + Content : string <<get>> <<set>>
    + MobileContent : string <<get>> <<set>> = "{}"
    + SpaContent : string <<get>> <<set>> = ""
    + Scripts : string <<get>> <<set>>
    + Styles : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AssetFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + TemplatePath : string <<get>>
    + ReadViewModel()
    + ReadViewModel(model:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixTemplate
    + <<override>> RemoveModel(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<MixTemplate>
    + <<override>> SaveSubModels(parent:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixTemplate>>
    + <<override>> SaveSubModelsAsync(parent:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} GetTemplateByPath(path:string, culture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<ReadViewModel>
    + {static} <<async>> GetTemplateByPathAsync(path:string, culture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<ReadViewModel>>
    + {static} GetTemplateByPath(themeId:int, path:string, type:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : ReadViewModel
    + {static} GetDefault(activedTemplate:string, folderType:string, folder:string, specificulture:string) : ReadViewModel
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixTemplate,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + ThemeId : int <<get>> <<set>>
    + ThemeName : string <<get>> <<set>>
    + FolderType : string <<get>> <<set>>
    + FileFolder : string <<get>> <<set>>
    + FileName : string <<get>> <<set>>
    + Extension : string <<get>> <<set>> = ".cshtml"
    + Content : string <<get>> <<set>>
    + MobileContent : string <<get>> <<set>> = "{}"
    + SpaContent : string <<get>> <<set>> = ""
    + Scripts : string <<get>> <<set>>
    + Styles : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Layout : string <<get>> <<set>>
    + AssetFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + TemplatePath : string <<get>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixTemplate
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<UpdateViewModel>>
    + <<override>> RemoveModel(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<MixTemplate>
    + <<override>> SaveSubModels(parent:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
    + <<override>> <<async>> RemoveModelAsync(isRemoveRelatedModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<MixTemplate>>
    + <<override>> SaveSubModelsAsync(parent:MixTemplate, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + {static} GetTemplateByPath(path:string, culture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<UpdateViewModel>
    + {static} GetTemplateByPath(path:string, specificulture:string, folderType:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : UpdateViewModel
    + {static} GetDefault(folderType:string, specificulture:string, _context:MixCmsContext, _transaction:IDbContextTransaction) : UpdateViewModel
    + <<async>> CopyAsync() : Task<RepositoryResponse<UpdateViewModel>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixTemplate,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
class DeleteViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + IsActived : bool <<get>> <<set>>
    + AssetFolder : string <<get>>
    + UploadsFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + DeleteViewModel()
    + DeleteViewModel(model:MixTheme, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:DeleteViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixTheme,DeleteViewModel>" <|-- DeleteViewModel
DeleteViewModel --> "CreatedDateTime" DateTime
DeleteViewModel --> "Status" MixContentStatus
DeleteViewModel --> "TemplateAsset" FileViewModel
DeleteViewModel --> "Asset" FileViewModel
DeleteViewModel --> "Templates<MixTemplates.DeleteViewModel>" "List`1"
class Helper {
    + {static} <<async>> ExportTheme(id:int, data:SiteStructureViewModel, culture:string, scheme:string, host:string) : Task<RepositoryResponse<string>>
    + {static} <<async>> InitTheme(model:string, culture:string, assets:IFormFile, theme:IFormFile) : Task<RepositoryResponse<InitViewModel>>
}
class InitViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsCreateDefault : bool <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + IsActived : bool <<get>> <<set>>
    + AssetFolder : string <<get>>
    + UploadsFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + InitViewModel()
    + InitViewModel(model:MixTheme, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixTheme
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixTheme, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixTheme,InitViewModel>" <|-- InitViewModel
InitViewModel --> "CreatedDateTime" DateTime
InitViewModel --> "Status" MixContentStatus
InitViewModel --> "TemplateAsset" FileViewModel
InitViewModel --> "Asset" FileViewModel
InitViewModel --> "Templates<MixTemplates.InitViewModel>" "List`1"
class ReadViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + IsActived : bool <<get>> <<set>>
    + AssetFolder : string <<get>>
    + UploadsFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + Domain : string <<get>>
    + ReadViewModel()
    + ReadViewModel(model:MixTheme, _context:MixCmsContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixCmsContext,MixTheme,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Status" MixContentStatus
ReadViewModel --> "Asset" IFormFile
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Title : string <<get>> <<set>>
    + Image : string <<get>> <<set>>
    + Thumbnail : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + IsCloneFromCurrentTheme : bool <<get>> <<set>>
    + Domain : string <<get>>
    + ImageUrl : string <<get>>
    + ThumbnailUrl : string <<get>>
    + IsActived : bool <<get>> <<set>>
    + AssetFolder : string <<get>>
    + UploadsFolder : string <<get>>
    + TemplateFolder : string <<get>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixTheme, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixTheme
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixTheme, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixTheme,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
UpdateViewModel --> "TemplateAsset" FileViewModel
UpdateViewModel --> "Asset" FileViewModel
UpdateViewModel --> "Templates<MixTemplates.UpdateViewModel>" "List`1"
class UpdateViewModel {
    + Id : int <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + SourceId : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + Alias : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixUrlAlias, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixUrlAlias
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> Validate(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixUrlAlias,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Cultures<Domain.Core.Models.SupportedCulture>" "List`1"
UpdateViewModel --> "Type" MixUrlAliasType
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixContentStatus
class CallOffer {
}
CallOffer --> "Caller" User
CallOffer --> "Callee" User
class User {
    + Username : string
    + ConnectionId : string
    + InCall : bool
}
class UserCall {
}
class "List`1"<T> {
}
UserCall --> "Users<User>" "List`1"
class FormViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + FormViewModel()
    + FormViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixAttributeSetData
    + <<override>> <<async>> SaveModelAsync(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<FormViewModel>>
    + <<override>> SaveModel(isSaveSubModels:bool, _context:MixCmsContext, _transaction:IDbContextTransaction) : RepositoryResponse<FormViewModel>
    + <<override>> <<async>> SaveSubModelsAsync(parent:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> <<async>> GenerateCache(model:MixAttributeSetData, view:FormViewModel, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,FormViewModel>" <|-- FormViewModel
FormViewModel --> "CreatedDateTime" DateTime
FormViewModel --> "Data" JObject
FormViewModel o-> "RelatedData<Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
FormViewModel --> "Values<Lib.ViewModels.MixAttributeSetValues.UpdateViewModel>" "List`1"
FormViewModel --> "Fields<Lib.ViewModels.MixAttributeFields.UpdateViewModel>" "List`1"
FormViewModel o-> "RefData<MixAttributeSetDatas.FormViewModel>" "List`1"
class ReadViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + AttributeSetId : int <<get>> <<set>>
    + AttributeSetName : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + Status : string <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:MixAttributeSetData, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixAttributeSetData,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "CreatedDateTime" DateTime
ReadViewModel --> "Data" JObject
ReadViewModel --> "Connection" MessengerConnection
ReadViewModel o-> "RelatedData<Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel>" "List`1"
ReadViewModel --> "Values<Lib.ViewModels.MixAttributeSetValues.UpdateViewModel>" "List`1"
ReadViewModel --> "Fields<Lib.ViewModels.MixAttributeFields.UpdateViewModel>" "List`1"
ReadViewModel o-> "RefData<MixAttributeSetDatas.FormViewModel>" "List`1"
class DefaultViewModel {
    + Id : string <<get>> <<set>>
    + UserId : string <<get>> <<set>>
    + ConnectionId : string <<get>> <<set>>
    + DeviceId : string <<get>> <<set>>
    + EndDate : DateTime? <<get>> <<set>>
    + DefaultViewModel()
    + DefaultViewModel(model:MixMessengerUserDevice, _context:MixChatServiceContext, _transaction:IDbContextTransaction)
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixChatServiceContext,MixMessengerUserDevice,DefaultViewModel>" <|-- DefaultViewModel
DefaultViewModel --> "StartDate" DateTime
class ConnectViewModel {
    + Id : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + IsJoin : bool <<get>> <<set>>
    + ConnectViewModel(connection:MessengerConnection)
    + Join(_context:MixChatServiceContext, _transaction:IDbContextTransaction) : RepositoryResponse<bool>
}
ConnectViewModel --> "Device" MixMessengerUserDevice
ConnectViewModel --> "CreatedDate" DateTime
class DefaultViewModel {
    + Id : string <<get>> <<set>>
    + FacebookId : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + DefaultViewModel()
    + DefaultViewModel(model:MixMessengerUser, _context:MixChatServiceContext, _transaction:IDbContextTransaction)
    + <<override>> ExpandView(_context:MixChatServiceContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
"ViewModelBase`3" "<MixChatServiceContext,MixMessengerUser,DefaultViewModel>" <|-- DefaultViewModel
DefaultViewModel --> "CreatedDate" DateTime
class CookieValidator {
    + {static} <<async>> ValidateAsync(context:CookieValidatePrincipalContext) : Task
}
class JwtValidator {
    + {static} ValidateAsync(context:TokenValidatedContext) : void
    + {static} ValidateFail(context:AuthenticationFailedContext) : void
}
class CreateRoleBindingModel {
    + Name : string <<get>> <<set>>
}
class ExternalLoginConfirmationViewModel {
    + Email : string <<get>> <<set>>
}
class ExternalLoginViewModel {
    + Email : string <<get>> <<set>>
}
class ForgotPasswordViewModel {
    + Email : string <<get>> <<set>>
}
class LoginViewModel {
    + Email : string <<get>> <<set>>
    + UserName : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + RememberMe : bool <<get>> <<set>>
    + ReturnUrl : string <<get>> <<set>>
}
class LoginWith2FaViewModel {
    + TwoFactorCode : string <<get>> <<set>>
    + RememberMachine : bool <<get>> <<set>>
    + RememberMe : bool <<get>> <<set>>
}
class LoginWithRecoveryCodeViewModel {
    + RecoveryCode : string <<get>> <<set>>
}
class RegisterViewModel {
    + FirstName : string <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + NickName : string <<get>> <<set>>
    + UserName : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + ConfirmPassword : string <<get>> <<set>>
    + ReturnUrl : string <<get>> <<set>>
}
class ResetPasswordViewModel {
    + Email : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + ConfirmPassword : string <<get>> <<set>>
    + Code : string <<get>> <<set>>
}
class SendCodeViewModel {
    + SelectedProvider : string <<get>> <<set>>
    + ReturnUrl : string <<get>> <<set>>
    + RememberMe : bool <<get>> <<set>>
}
class UserRoleModel {
    + UserId : string <<get>> <<set>>
    + RoleId : string <<get>> <<set>>
    + RoleName : string <<get>> <<set>>
    + IsUserInRole : bool <<get>> <<set>>
}
class UsersInRoleModel {
    + Id : string <<get>> <<set>>
}
class "List`1"<T> {
}
UsersInRoleModel --> "EnrolledUsers<string>" "List`1"
UsersInRoleModel --> "RemovedUsers<string>" "List`1"
class UserViewModel {
    + Id : string <<get>> <<set>>
    + UserName : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + ConfirmPassword : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
}
class VerifyCodeViewModel {
    + Provider : string <<get>> <<set>>
    + Code : string <<get>> <<set>>
    + ReturnUrl : string <<get>> <<set>>
    + RememberBrowser : bool <<get>> <<set>>
    + RememberMe : bool <<get>> <<set>>
}
class AddPhoneNumberViewModel {
    + PhoneNumber : string <<get>> <<set>>
}
class ChangePasswordViewModel {
    + OldPassword : string <<get>> <<set>>
    + NewPassword : string <<get>> <<set>>
    + ConfirmPassword : string <<get>> <<set>>
}
class ConfigureTwoFactorViewModel {
    + SelectedProvider : string <<get>> <<set>>
}
class FactorViewModel {
    + Purpose : string <<get>> <<set>>
}
class IndexViewModel {
    + HasPassword : bool <<get>> <<set>>
    + PhoneNumber : string <<get>> <<set>>
    + TwoFactor : bool <<get>> <<set>>
    + BrowserRemembered : bool <<get>> <<set>>
}
class "IList`1"<T> {
}
IndexViewModel --> "Logins<UserLoginInfo>" "IList`1"
class ManageLoginsViewModel {
}
class "IList`1"<T> {
}
ManageLoginsViewModel --> "CurrentLogins<UserLoginInfo>" "IList`1"
ManageLoginsViewModel --> "OtherLogins<AuthenticationScheme>" "IList`1"
class RemoveLoginViewModel {
    + LoginProvider : string <<get>> <<set>>
    + ProviderKey : string <<get>> <<set>>
}
class SetPasswordViewModel {
    + NewPassword : string <<get>> <<set>>
    + ConfirmPassword : string <<get>> <<set>>
}
class VerifyPhoneNumberViewModel {
    + Code : string <<get>> <<set>>
    + PhoneNumber : string <<get>> <<set>>
}
class "BaseRestApiController`2"<TDbContext,TModel> {
    + <<override>> OnActionExecuting(context:ActionExecutingContext) : void
}
Controller <|-- "BaseRestApiController`2"
class ApiAttributeSetDataController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<FormViewModel>>>
    + <<async>> Init(attributeSetName:string) : Task<ActionResult<UpdateViewModel>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixAttributeSetData,FormViewModel,FormViewModel,FormViewModel>" <|-- ApiAttributeSetDataController
class AttributeSetDataMvcController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
}
class "BaseReadOnlyApiController`3"<T1,T2,T3> {
}
"BaseReadOnlyApiController`3" "<MixCmsContext,MixAttributeSetData,ReadMvcViewModel>" <|-- AttributeSetDataMvcController
class AttributeSetDataPortalController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<FormViewModel>>>
    + <<async>> GetAdditionalData() : Task<ActionResult<PaginationModel<AdditionalViewModel>>>
    + <<async>> SaveAdditionalData(data:AdditionalViewModel) : Task<IActionResult>
    + <<async>> Init(attributeSet:string) : Task<ActionResult<FormViewModel>>
    + <<async>> Export() : Task<ActionResult>
    + <<async>> ImportData(attributeSetName:string, file:IFormFile) : Task<ActionResult<RepositoryResponse<ImportViewModel>>>
    + <<override>> <<async>> Delete(id:string) : Task<ActionResult<MixAttributeSetData>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixAttributeSetData,FormViewModel,FormViewModel,DeleteViewModel>" <|-- AttributeSetDataPortalController
class ApiAttributeFieldController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadViewModel>>>
    + <<async>> Init(attributeSet:string) : Task<ActionResult<PaginationModel<UpdateViewModel>>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixAttributeField,UpdateViewModel,ReadViewModel,DeleteViewModel>" <|-- ApiAttributeFieldController
class ApiAttributeSetController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadViewModel>>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixAttributeSet,UpdateViewModel,ReadViewModel,UpdateViewModel>" <|-- ApiAttributeSetController
class ApiAttributeSetPortalController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadViewModel>>>
    + <<override>> <<async>> Delete(id:string) : Task<ActionResult<MixAttributeSet>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixAttributeSet,UpdateViewModel,ReadViewModel,UpdateViewModel>" <|-- ApiAttributeSetPortalController
class ApiAttributeSetValueController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadViewModel>>>
}
class "BaseAuthorizedRestApiController`4"<T1,T2,T3,T4> {
}
"BaseAuthorizedRestApiController`4" "<MixCmsContext,MixAttributeSetValue,UpdateViewModel,ReadViewModel>" <|-- ApiAttributeSetValueController
class ApiConfigurationPortalController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixConfiguration,UpdateViewModel,ReadMvcViewModel,UpdateViewModel>" <|-- ApiConfigurationPortalController
class ApiLanguageController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixLanguage,UpdateViewModel,ReadMvcViewModel,UpdateViewModel>" <|-- ApiLanguageController
class ApiModuleDataMvcController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
    + <<async>> InitByIdAsync(moduleId:int) : Task<ActionResult<UpdateViewModel>>
    + <<async>> SaveByName(moduleName:string, data:JObject) : Task<RepositoryResponse<UpdateViewModel>>
}
class "BaseAuthorizedRestApiController`4"<T1,T2,T3,T4> {
}
"BaseAuthorizedRestApiController`4" "<MixCmsContext,MixModuleData,UpdateViewModel,ReadMvcViewModel>" <|-- ApiModuleDataMvcController
class ApiModuleDataDataController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<UpdateViewModel>>>
    + <<async>> Export() : Task<ActionResult<FileViewModel>>
    + <<async>> InitByIdAsync(moduleId:int) : Task<ActionResult<UpdateViewModel>>
    + <<async>> SaveByName(moduleName:string, data:JObject) : Task<RepositoryResponse<UpdateViewModel>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixModuleData,UpdateViewModel,UpdateViewModel,UpdateViewModel>" <|-- ApiModuleDataDataController
class ApiModulePostMvcController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
}
class "BaseAuthorizedRestApiController`4"<T1,T2,T3,T4> {
}
"BaseAuthorizedRestApiController`4" "<MixCmsContext,MixModulePost,ReadMvcViewModel,ReadMvcViewModel>" <|-- ApiModulePostMvcController
class ApiModuleMvcController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadListItemViewModel>>>
}
class "BaseAuthorizedRestApiController`4"<T1,T2,T3,T4> {
}
"BaseAuthorizedRestApiController`4" "<MixCmsContext,MixModule,ReadMvcViewModel,ReadListItemViewModel>" <|-- ApiModuleMvcController
class ApiModuleController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadListItemViewModel>>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixModule,UpdateViewModel,ReadListItemViewModel,UpdateViewModel>" <|-- ApiModuleController
class ApiPagePostMvcController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
}
class "BaseAuthorizedRestApiController`4"<T1,T2,T3,T4> {
}
"BaseAuthorizedRestApiController`4" "<MixCmsContext,MixPagePost,ReadMvcViewModel,ReadMvcViewModel>" <|-- ApiPagePostMvcController
class ApiPageController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadViewModel>>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixPage,UpdateViewModel,ReadViewModel,DeleteViewModel>" <|-- ApiPageController
class ApiPortalPageNavigationPortalController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadViewModel>>>
}
class "BaseAuthorizedRestApiController`4"<T1,T2,T3,T4> {
}
"BaseAuthorizedRestApiController`4" "<MixCmsContext,MixPortalPageNavigation,UpdateViewModel,ReadViewModel>" <|-- ApiPortalPageNavigationPortalController
class ApiPortalPageController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadViewModel>>>
}
class "BaseAuthorizedRestApiController`4"<T1,T2,T3,T4> {
}
"BaseAuthorizedRestApiController`4" "<MixCmsContext,MixPortalPage,UpdateViewModel,ReadViewModel>" <|-- ApiPortalPageController
class ApiPostMvcController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
    + <<async>> GetByAttribute() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
    + <<async>> GetByValueId() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
    + <<async>> GetByValueIds(valueIds:List<string>) : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
    + <<async>> SearchPost(dataIds:List<string>, keyword:string) : Task<ActionResult<PaginationModel<ReadListItemViewModel>>>
    + <<async>> GetByAttributeDataId() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
}
class "BaseReadOnlyApiController`3"<T1,T2,T3> {
}
"BaseReadOnlyApiController`3" "<MixCmsContext,MixPost,ReadMvcViewModel>" <|-- ApiPostMvcController
class ApiPostController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadListItemViewModel>>>
    + <<override>> Default() : ActionResult<UpdateViewModel>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixPost,UpdateViewModel,ReadListItemViewModel,DeleteViewModel>" <|-- ApiPostController
class ApiRelatedAttributeDataPortalController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<FormViewModel>>>
    + <<async>> GetNavigation(name:string) : Task<ActionResult<Lib.ViewModels.MixAttributeSetDatas.Navigation>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixRelatedAttributeData,FormViewModel,FormViewModel,DeleteViewModel>" <|-- ApiRelatedAttributeDataPortalController
class ApiRelatedAttributeSetPortalController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadMvcViewModel>>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixRelatedAttributeSet,UpdateViewModel,ReadMvcViewModel,DeleteViewModel>" <|-- ApiRelatedAttributeSetPortalController
class ApiTemplateController {
    + <<override>> <<async>> Get() : Task<ActionResult<PaginationModel<ReadViewModel>>>
    + <<async>> Copy(id:string) : Task<ActionResult<UpdateViewModel>>
}
class "BaseAuthorizedRestApiController`5"<T1,T2,T3,T4,T5> {
}
"BaseAuthorizedRestApiController`5" "<MixCmsContext,MixTemplate,UpdateViewModel,ReadViewModel,DeleteViewModel>" <|-- ApiTemplateController
class MixAttributeFieldConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeField>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeField>" <|-- MixAttributeFieldConfiguration
class MixAttributeSetConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSet>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSet>" <|-- MixAttributeSetConfiguration
class MixAttributeSetDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetData>" <|-- MixAttributeSetDataConfiguration
class MixAttributeSetReferenceConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetReference>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetReference>" <|-- MixAttributeSetReferenceConfiguration
class MixAttributeSetValueConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetValue>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetValue>" <|-- MixAttributeSetValueConfiguration
class MixAttributeValueConfiguration {
    + Configure(builder:EntityTypeBuilder<MixAttributeSetValue>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetValue>" <|-- MixAttributeValueConfiguration
class MixCacheConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCache>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCache>" <|-- MixCacheConfiguration
class MixCmsUserConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCmsUser>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCmsUser>" <|-- MixCmsUserConfiguration
class MixConfigurationConfiguration {
    + Configure(entity:EntityTypeBuilder<MixConfiguration>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixConfiguration>" <|-- MixConfigurationConfiguration
class MixCultureConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCulture>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCulture>" <|-- MixCultureConfiguration
class MixFileConfiguration {
    + Configure(entity:EntityTypeBuilder<MixFile>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixFile>" <|-- MixFileConfiguration
class MixLanguageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixLanguage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixLanguage>" <|-- MixLanguageConfiguration
class MixMediaConfiguration {
    + Configure(entity:EntityTypeBuilder<MixMedia>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixMedia>" <|-- MixMediaConfiguration
class MixModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModule>" <|-- MixModuleConfiguration
class MixModuleDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModuleData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModuleData>" <|-- MixModuleDataConfiguration
class MixModulePostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModulePost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModulePost>" <|-- MixModulePostConfiguration
class MixPageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPage>" <|-- MixPageConfiguration
class MixPageModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPageModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPageModule>" <|-- MixPageModuleConfiguration
class MixPagePostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPagePost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPagePost>" <|-- MixPagePostConfiguration
class MixPortalPageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPage>" <|-- MixPortalPageConfiguration
class MixPortalPageNavigationConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPageNavigation>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPageNavigation>" <|-- MixPortalPageNavigationConfiguration
class MixPortalPageRoleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPageRole>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPageRole>" <|-- MixPortalPageRoleConfiguration
class MixPostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPost>" <|-- MixPostConfiguration
class MixPostMediaConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPostMedia>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPostMedia>" <|-- MixPostMediaConfiguration
class MixPostModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPostModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPostModule>" <|-- MixPostModuleConfiguration
class MixRelatedAttributeDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedAttributeData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedAttributeData>" <|-- MixRelatedAttributeDataConfiguration
class MixRelatedAttributeSetConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedAttributeSet>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedAttributeSet>" <|-- MixRelatedAttributeSetConfiguration
class MixRelatedDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedData>" <|-- MixRelatedDataConfiguration
class MixRelatedPostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedPost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedPost>" <|-- MixRelatedPostConfiguration
class MixTemplateConfiguration {
    + Configure(entity:EntityTypeBuilder<MixTemplate>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixTemplate>" <|-- MixTemplateConfiguration
class MixThemeConfiguration {
    + Configure(entity:EntityTypeBuilder<MixTheme>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixTheme>" <|-- MixThemeConfiguration
class MixUrlAliasConfiguration {
    + Configure(entity:EntityTypeBuilder<MixUrlAlias>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixUrlAlias>" <|-- MixUrlAliasConfiguration
class MixAttributeFieldConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeField>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeField>" <|-- MixAttributeFieldConfiguration
class MixAttributeSetConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSet>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSet>" <|-- MixAttributeSetConfiguration
class MixAttributeSetDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetData>" <|-- MixAttributeSetDataConfiguration
class MixAttributeSetReferenceConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetReference>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetReference>" <|-- MixAttributeSetReferenceConfiguration
class MixAttributeSetValueConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetValue>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetValue>" <|-- MixAttributeSetValueConfiguration
class MixAttributeValueConfiguration {
    + Configure(builder:EntityTypeBuilder<MixAttributeSetValue>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetValue>" <|-- MixAttributeValueConfiguration
class MixCacheConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCache>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCache>" <|-- MixCacheConfiguration
class MixCmsUserConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCmsUser>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCmsUser>" <|-- MixCmsUserConfiguration
class MixConfigurationConfiguration {
    + Configure(entity:EntityTypeBuilder<MixConfiguration>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixConfiguration>" <|-- MixConfigurationConfiguration
class MixCultureConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCulture>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCulture>" <|-- MixCultureConfiguration
class MixFileConfiguration {
    + Configure(entity:EntityTypeBuilder<MixFile>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixFile>" <|-- MixFileConfiguration
class MixLanguageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixLanguage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixLanguage>" <|-- MixLanguageConfiguration
class MixMediaConfiguration {
    + Configure(entity:EntityTypeBuilder<MixMedia>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixMedia>" <|-- MixMediaConfiguration
class MixModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModule>" <|-- MixModuleConfiguration
class MixModuleDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModuleData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModuleData>" <|-- MixModuleDataConfiguration
class MixModulePostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModulePost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModulePost>" <|-- MixModulePostConfiguration
class MixPageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPage>" <|-- MixPageConfiguration
class MixPageModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPageModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPageModule>" <|-- MixPageModuleConfiguration
class MixPagePostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPagePost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPagePost>" <|-- MixPagePostConfiguration
class MixPortalPageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPage>" <|-- MixPortalPageConfiguration
class MixPortalPageNavigationConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPageNavigation>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPageNavigation>" <|-- MixPortalPageNavigationConfiguration
class MixPortalPageRoleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPageRole>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPageRole>" <|-- MixPortalPageRoleConfiguration
class MixPostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPost>" <|-- MixPostConfiguration
class MixPostMediaConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPostMedia>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPostMedia>" <|-- MixPostMediaConfiguration
class MixPostModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPostModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPostModule>" <|-- MixPostModuleConfiguration
class MixRelatedAttributeDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedAttributeData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedAttributeData>" <|-- MixRelatedAttributeDataConfiguration
class MixRelatedAttributeSetConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedAttributeSet>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedAttributeSet>" <|-- MixRelatedAttributeSetConfiguration
class MixRelatedDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedData>" <|-- MixRelatedDataConfiguration
class MixRelatedPostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedPost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedPost>" <|-- MixRelatedPostConfiguration
class MixTemplateConfiguration {
    + Configure(entity:EntityTypeBuilder<MixTemplate>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixTemplate>" <|-- MixTemplateConfiguration
class MixThemeConfiguration {
    + Configure(entity:EntityTypeBuilder<MixTheme>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixTheme>" <|-- MixThemeConfiguration
class MixUrlAliasConfiguration {
    + Configure(entity:EntityTypeBuilder<MixUrlAlias>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixUrlAlias>" <|-- MixUrlAliasConfiguration
class MixAttributeFieldConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeField>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeField>" <|-- MixAttributeFieldConfiguration
class MixAttributeSetConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSet>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSet>" <|-- MixAttributeSetConfiguration
class MixAttributeSetDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetData>" <|-- MixAttributeSetDataConfiguration
class MixAttributeSetReferenceConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetReference>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetReference>" <|-- MixAttributeSetReferenceConfiguration
class MixAttributeSetValueConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetValue>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetValue>" <|-- MixAttributeSetValueConfiguration
class MixAttributeValueConfiguration {
    + Configure(builder:EntityTypeBuilder<MixAttributeSetValue>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetValue>" <|-- MixAttributeValueConfiguration
class MixCacheConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCache>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCache>" <|-- MixCacheConfiguration
class MixCmsUserConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCmsUser>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCmsUser>" <|-- MixCmsUserConfiguration
class MixConfigurationConfiguration {
    + Configure(entity:EntityTypeBuilder<MixConfiguration>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixConfiguration>" <|-- MixConfigurationConfiguration
class MixCultureConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCulture>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCulture>" <|-- MixCultureConfiguration
class MixFileConfiguration {
    + Configure(entity:EntityTypeBuilder<MixFile>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixFile>" <|-- MixFileConfiguration
class MixLanguageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixLanguage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixLanguage>" <|-- MixLanguageConfiguration
class MixMediaConfiguration {
    + Configure(entity:EntityTypeBuilder<MixMedia>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixMedia>" <|-- MixMediaConfiguration
class MixModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModule>" <|-- MixModuleConfiguration
class MixModuleDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModuleData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModuleData>" <|-- MixModuleDataConfiguration
class MixModulePostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModulePost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModulePost>" <|-- MixModulePostConfiguration
class MixPageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPage>" <|-- MixPageConfiguration
class MixPageModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPageModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPageModule>" <|-- MixPageModuleConfiguration
class MixPagePostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPagePost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPagePost>" <|-- MixPagePostConfiguration
class MixPortalPageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPage>" <|-- MixPortalPageConfiguration
class MixPortalPageNavigationConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPageNavigation>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPageNavigation>" <|-- MixPortalPageNavigationConfiguration
class MixPortalPageRoleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPageRole>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPageRole>" <|-- MixPortalPageRoleConfiguration
class MixPostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPost>" <|-- MixPostConfiguration
class MixPostMediaConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPostMedia>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPostMedia>" <|-- MixPostMediaConfiguration
class MixPostModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPostModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPostModule>" <|-- MixPostModuleConfiguration
class MixRelatedAttributeDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedAttributeData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedAttributeData>" <|-- MixRelatedAttributeDataConfiguration
class MixRelatedAttributeSetConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedAttributeSet>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedAttributeSet>" <|-- MixRelatedAttributeSetConfiguration
class MixRelatedDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedData>" <|-- MixRelatedDataConfiguration
class MixRelatedPostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedPost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedPost>" <|-- MixRelatedPostConfiguration
class MixTemplateConfiguration {
    + Configure(entity:EntityTypeBuilder<MixTemplate>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixTemplate>" <|-- MixTemplateConfiguration
class MixThemeConfiguration {
    + Configure(entity:EntityTypeBuilder<MixTheme>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixTheme>" <|-- MixThemeConfiguration
class MixUrlAliasConfiguration {
    + Configure(entity:EntityTypeBuilder<MixUrlAlias>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixUrlAlias>" <|-- MixUrlAliasConfiguration
class MixAttributeFieldConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeField>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeField>" <|-- MixAttributeFieldConfiguration
class MixAttributeSetConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSet>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSet>" <|-- MixAttributeSetConfiguration
class MixAttributeSetDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetData>" <|-- MixAttributeSetDataConfiguration
class MixAttributeSetReferenceConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetReference>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetReference>" <|-- MixAttributeSetReferenceConfiguration
class MixAttributeSetValueConfiguration {
    + Configure(entity:EntityTypeBuilder<MixAttributeSetValue>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetValue>" <|-- MixAttributeSetValueConfiguration
class MixAttributeValueConfiguration {
    + Configure(builder:EntityTypeBuilder<MixAttributeSetValue>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixAttributeSetValue>" <|-- MixAttributeValueConfiguration
class MixCacheConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCache>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCache>" <|-- MixCacheConfiguration
class MixCmsUserConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCmsUser>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCmsUser>" <|-- MixCmsUserConfiguration
class MixConfigurationConfiguration {
    + Configure(entity:EntityTypeBuilder<MixConfiguration>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixConfiguration>" <|-- MixConfigurationConfiguration
class MixCultureConfiguration {
    + Configure(entity:EntityTypeBuilder<MixCulture>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixCulture>" <|-- MixCultureConfiguration
class MixFileConfiguration {
    + Configure(entity:EntityTypeBuilder<MixFile>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixFile>" <|-- MixFileConfiguration
class MixLanguageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixLanguage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixLanguage>" <|-- MixLanguageConfiguration
class MixMediaConfiguration {
    + Configure(entity:EntityTypeBuilder<MixMedia>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixMedia>" <|-- MixMediaConfiguration
class MixModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModule>" <|-- MixModuleConfiguration
class MixModuleDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModuleData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModuleData>" <|-- MixModuleDataConfiguration
class MixModulePostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixModulePost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixModulePost>" <|-- MixModulePostConfiguration
class MixPageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPage>" <|-- MixPageConfiguration
class MixPageModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPageModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPageModule>" <|-- MixPageModuleConfiguration
class MixPagePostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPagePost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPagePost>" <|-- MixPagePostConfiguration
class MixPortalPageConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPage>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPage>" <|-- MixPortalPageConfiguration
class MixPortalPageNavigationConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPageNavigation>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPageNavigation>" <|-- MixPortalPageNavigationConfiguration
class MixPortalPageRoleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPortalPageRole>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPortalPageRole>" <|-- MixPortalPageRoleConfiguration
class MixPostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPost>" <|-- MixPostConfiguration
class MixPostMediaConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPostMedia>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPostMedia>" <|-- MixPostMediaConfiguration
class MixPostModuleConfiguration {
    + Configure(entity:EntityTypeBuilder<MixPostModule>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixPostModule>" <|-- MixPostModuleConfiguration
class MixRelatedAttributeDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedAttributeData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedAttributeData>" <|-- MixRelatedAttributeDataConfiguration
class MixRelatedAttributeSetConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedAttributeSet>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedAttributeSet>" <|-- MixRelatedAttributeSetConfiguration
class MixRelatedDataConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedData>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedData>" <|-- MixRelatedDataConfiguration
class MixRelatedPostConfiguration {
    + Configure(entity:EntityTypeBuilder<MixRelatedPost>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixRelatedPost>" <|-- MixRelatedPostConfiguration
class MixTemplateConfiguration {
    + Configure(entity:EntityTypeBuilder<MixTemplate>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixTemplate>" <|-- MixTemplateConfiguration
class MixThemeConfiguration {
    + Configure(entity:EntityTypeBuilder<MixTheme>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixTheme>" <|-- MixThemeConfiguration
class MixUrlAliasConfiguration {
    + Configure(entity:EntityTypeBuilder<MixUrlAlias>) : void
}
class "IEntityTypeConfiguration`1"<T> {
}
"IEntityTypeConfiguration`1" "<MixUrlAlias>" <|-- MixUrlAliasConfiguration
class MixMessengerHubRoom <<partial>> {
    + MixMessengerHubRoom()
    + Avatar : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + HostId : string <<get>> <<set>>
    + IsOpen : bool <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + TeamId : int? <<get>> <<set>>
    + Title : string <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixMessengerHubRoom --> "Id" Guid
MixMessengerHubRoom --> "CreatedDate" DateTime
MixMessengerHubRoom --> "MixMessengerMessage<MixMessengerMessage>" "ICollection`1"
MixMessengerHubRoom --> "MixMessengerNavRoomUser<MixMessengerNavRoomUser>" "ICollection`1"
class MixMessengerMessage <<partial>> {
    + Content : string <<get>> <<set>>
    + RoomId : Guid? <<get>> <<set>>
    + TeamId : int? <<get>> <<set>>
    + UserId : string <<get>> <<set>>
}
MixMessengerMessage --> "Id" Guid
MixMessengerMessage --> "CreatedDate" DateTime
MixMessengerMessage --> "Room" MixMessengerHubRoom
MixMessengerMessage --> "Team" MixMessengerTeam
MixMessengerMessage --> "User" MixMessengerUser
class MixMessengerNavRoomUser <<partial>> {
    + UserId : string <<get>> <<set>>
}
MixMessengerNavRoomUser --> "RoomId" Guid
MixMessengerNavRoomUser --> "JoinedDate" DateTime
MixMessengerNavRoomUser --> "Room" MixMessengerHubRoom
MixMessengerNavRoomUser --> "User" MixMessengerUser
class MixMessengerNavTeamUser <<partial>> {
    + TeamId : int <<get>> <<set>>
    + UserId : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
}
MixMessengerNavTeamUser --> "JoinedDate" DateTime
MixMessengerNavTeamUser --> "Status" MixContentStatus
MixMessengerNavTeamUser --> "Team" MixMessengerTeam
MixMessengerNavTeamUser --> "User" MixMessengerUser
class MixMessengerTeam <<partial>> {
    + MixMessengerTeam()
    + Id : int <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + HostId : string <<get>> <<set>>
    + IsOpen : bool? <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Type : int <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixMessengerTeam --> "CreatedDate" DateTime
MixMessengerTeam --> "MixMessengerMessage<MixMessengerMessage>" "ICollection`1"
MixMessengerTeam --> "MixMessengerNavTeamUser<MixMessengerNavTeamUser>" "ICollection`1"
class MixMessengerUser <<partial>> {
    + MixMessengerUser()
    + Id : string <<get>> <<set>>
    + FacebookId : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Status : string <<get>> <<set>>
}
class "ICollection`1"<T> {
}
MixMessengerUser --> "CreatedDate" DateTime
MixMessengerUser --> "MixMessengerMessage<MixMessengerMessage>" "ICollection`1"
MixMessengerUser --> "MixMessengerNavRoomUser<MixMessengerNavRoomUser>" "ICollection`1"
MixMessengerUser --> "MixMessengerNavTeamUser<MixMessengerNavTeamUser>" "ICollection`1"
class MixMessengerUserDevice <<partial>> {
    + UserId : string <<get>> <<set>>
    + ConnectionId : string <<get>> <<set>>
    + DeviceId : string <<get>> <<set>>
    + Status : int <<get>> <<set>>
    + EndDate : DateTime? <<get>> <<set>>
}
MixMessengerUserDevice --> "StartDate" DateTime
class MixChatServiceContext <<partial>> {
    + MixChatServiceContext()
    + MixChatServiceContext(options:DbContextOptions<MixChatServiceContext>)
    + <<override>> Dispose() : void
}
class "DbSet`1"<T> {
}
DbContext <|-- MixChatServiceContext
MixChatServiceContext --> "MixMessengerHubRoom<MixMessengerHubRoom>" "DbSet`1"
MixChatServiceContext --> "MixMessengerMessage<MixMessengerMessage>" "DbSet`1"
MixChatServiceContext --> "MixMessengerNavRoomUser<MixMessengerNavRoomUser>" "DbSet`1"
MixChatServiceContext --> "MixMessengerNavTeamUser<MixMessengerNavTeamUser>" "DbSet`1"
MixChatServiceContext --> "MixMessengerTeam<MixMessengerTeam>" "DbSet`1"
MixChatServiceContext --> "MixMessengerUser<MixMessengerUser>" "DbSet`1"
MixChatServiceContext --> "MixMessengerUserDevice<MixMessengerUserDevice>" "DbSet`1"
class ReadViewModel {
    + Id : string <<get>> <<set>>
    + ConcurrencyStamp : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + NormalizedName : string <<get>> <<set>>
    + ReadViewModel()
    + ReadViewModel(model:AspNetRoles, _context:MixCmsAccountContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsAccountContext, _transaction:IDbContextTransaction) : AspNetRoles
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:ReadViewModel, _context:MixCmsAccountContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<override>> ExpandView(_context:MixCmsAccountContext, _transaction:IDbContextTransaction) : void
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsAccountContext,AspNetRoles,ReadViewModel>" <|-- ReadViewModel
ReadViewModel --> "Permissions<MixPortalPages.ReadRolePermissionViewModel>" "List`1"
class UpdateViewModel {
    + Id : string <<get>> <<set>>
    + ConcurrencyStamp : string <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + NormalizedName : string <<get>> <<set>>
    + UpdateViewModel()
    + UpdateViewModel(model:AspNetRoles, _context:MixCmsAccountContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsAccountContext, _transaction:IDbContextTransaction) : AspNetRoles
    + <<override>> <<async>> RemoveRelatedModelsAsync(view:UpdateViewModel, _context:MixCmsAccountContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
    + <<async>> LoadPermissions(_context:MixCmsContext, _transaction:IDbContextTransaction) : Task
    + <<async>> SavePermissionsAsync(parent:AspNetRoles, _context:MixCmsContext, _transaction:IDbContextTransaction) : Task<RepositoryResponse<bool>>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsAccountContext,AspNetRoles,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "Permissions<MixPortalPages.UpdateRolePermissionViewModel>" "List`1"
class UpdateViewModel {
    + Id : string <<get>> <<set>>
    + Specificulture : string <<get>> <<set>>
    + Username : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + FirstName : string <<get>> <<set>>
    + MiddleName : string <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + Avatar : string <<get>> <<set>>
    + Address : string <<get>> <<set>>
    + PhoneNumber : string <<get>> <<set>>
    + CreatedBy : string <<get>> <<set>>
    + ModifiedBy : string <<get>> <<set>>
    + LastModified : DateTime? <<get>> <<set>>
    + Priority : int <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + ConfirmPassword : string <<get>> <<set>>
    + DetailsUrl : string <<get>> <<set>>
    + Domain : string <<get>>
    + AvatarUrl : string <<get>>
    + UpdateViewModel()
    + UpdateViewModel(model:MixCmsUser, _context:MixCmsContext, _transaction:IDbContextTransaction)
    + <<override>> ParseModel(_context:MixCmsContext, _transaction:IDbContextTransaction) : MixCmsUser
    + <<override>> ExpandView(_context:MixCmsContext, _transaction:IDbContextTransaction) : void
    + GetRoleNavs() : List<NavUserRoleViewModel>
}
class "ViewModelBase`3"<T1,T2,T3> {
}
class "List`1"<T> {
}
"ViewModelBase`3" "<MixCmsContext,MixCmsUser,UpdateViewModel>" <|-- UpdateViewModel
UpdateViewModel --> "CreatedDateTime" DateTime
UpdateViewModel --> "Status" MixUserStatus
UpdateViewModel --> "UserRoles<NavUserRoleViewModel>" "List`1"
UpdateViewModel o-> "MediaFile" FileViewModel
class Views__ViewImports {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views__ViewStart {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class wwwroot__ProductDetailImages {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views__ViewImports {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views__ViewStart {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class wwwroot__ProductDetailImages {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Data_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Home_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Home_Module {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Init_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Module_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Page_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Portal_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Post_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Security_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared_Error {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared__Layout {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared__LayoutInit_Angular {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared__LayoutPortal_Angular {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class "UserManager`1"<T> {
}
Views_Shared__LayoutPortal_Angular --> "UserManager<ApplicationUser>" "UserManager`1"
class Views_Shared__LayoutPortal_Angular_bk {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class "UserManager`1"<T> {
}
Views_Shared__LayoutPortal_Angular_bk --> "UserManager<ApplicationUser>" "UserManager`1"
class Views_Shared__LayoutSecurity_Angular {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared__LoginPartial {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class "UserManager`1"<T> {
}
class "SignInManager`1"<T> {
}
Views_Shared__LoginPartial --> "UserManager<ApplicationUser>" "UserManager`1"
Views_Shared__LoginPartial --> "SignInManager<ApplicationUser>" "SignInManager`1"
class Views_Shared__ValidationScriptsPartial {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Vue_VueComponent {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Data_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Home_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Home_Module {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Init_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Module_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Page_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Portal_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Post_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Security_Index {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared_Error {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared__Layout {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared__LayoutInit_Angular {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared__LayoutPortal_Angular {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class "UserManager`1"<T> {
}
Views_Shared__LayoutPortal_Angular --> "UserManager<ApplicationUser>" "UserManager`1"
class Views_Shared__LayoutPortal_Angular_bk {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class "UserManager`1"<T> {
}
Views_Shared__LayoutPortal_Angular_bk --> "UserManager<ApplicationUser>" "UserManager`1"
class Views_Shared__LayoutSecurity_Angular {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Shared__LoginPartial {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class "UserManager`1"<T> {
}
class "SignInManager`1"<T> {
}
Views_Shared__LoginPartial --> "UserManager<ApplicationUser>" "UserManager`1"
Views_Shared__LoginPartial --> "SignInManager<ApplicationUser>" "SignInManager`1"
class Views_Shared__ValidationScriptsPartial {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
class Views_Vue_VueComponent {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
@enduml
