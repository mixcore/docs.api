### YamlMime:ManagedReference
items:
- uid: Mix.Queue.Interfaces.IQueuePublisher`1
  commentId: T:Mix.Queue.Interfaces.IQueuePublisher`1
  id: IQueuePublisher`1
  parent: Mix.Queue.Interfaces
  children:
  - Mix.Queue.Interfaces.IQueuePublisher`1.SendMessage(`0)
  - Mix.Queue.Interfaces.IQueuePublisher`1.SendMessages(System.Collections.Generic.IList{`0})
  langs:
  - csharp
  - vb
  name: IQueuePublisher<T>
  nameWithType: IQueuePublisher<T>
  fullName: Mix.Queue.Interfaces.IQueuePublisher<T>
  type: Interface
  source:
    remote:
      path: src/platform/mix.queue/Interfaces/IQueuePublisher.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IQueuePublisher
    path: ../../mix.core/src/platform/mix.queue/Interfaces/IQueuePublisher.cs
    startLine: 6
  assemblies:
  - mix.queue
  namespace: Mix.Queue.Interfaces
  syntax:
    content: >-
      public interface IQueuePublisher<T>
          where T : MessageQueueModel
    typeParameters:
    - id: T
    content.vb: Public Interface IQueuePublisher(Of T As MessageQueueModel)
  nameWithType.vb: IQueuePublisher(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Mix.Queue.Interfaces.IQueuePublisher(Of T)
  name.vb: IQueuePublisher(Of T)
- uid: Mix.Queue.Interfaces.IQueuePublisher`1.SendMessage(`0)
  commentId: M:Mix.Queue.Interfaces.IQueuePublisher`1.SendMessage(`0)
  id: SendMessage(`0)
  parent: Mix.Queue.Interfaces.IQueuePublisher`1
  langs:
  - csharp
  - vb
  name: SendMessage(T)
  nameWithType: IQueuePublisher<T>.SendMessage(T)
  fullName: Mix.Queue.Interfaces.IQueuePublisher<T>.SendMessage(T)
  type: Method
  source:
    remote:
      path: src/platform/mix.queue/Interfaces/IQueuePublisher.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SendMessage
    path: ../../mix.core/src/platform/mix.queue/Interfaces/IQueuePublisher.cs
    startLine: 9
  assemblies:
  - mix.queue
  namespace: Mix.Queue.Interfaces
  syntax:
    content: Task SendMessage(T message)
    parameters:
    - id: message
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SendMessage(message As T) As Task
  overload: Mix.Queue.Interfaces.IQueuePublisher`1.SendMessage*
  nameWithType.vb: IQueuePublisher(Of T).SendMessage(T)
  fullName.vb: Mix.Queue.Interfaces.IQueuePublisher(Of T).SendMessage(T)
- uid: Mix.Queue.Interfaces.IQueuePublisher`1.SendMessages(System.Collections.Generic.IList{`0})
  commentId: M:Mix.Queue.Interfaces.IQueuePublisher`1.SendMessages(System.Collections.Generic.IList{`0})
  id: SendMessages(System.Collections.Generic.IList{`0})
  parent: Mix.Queue.Interfaces.IQueuePublisher`1
  langs:
  - csharp
  - vb
  name: SendMessages(IList<T>)
  nameWithType: IQueuePublisher<T>.SendMessages(IList<T>)
  fullName: Mix.Queue.Interfaces.IQueuePublisher<T>.SendMessages(System.Collections.Generic.IList<T>)
  type: Method
  source:
    remote:
      path: src/platform/mix.queue/Interfaces/IQueuePublisher.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SendMessages
    path: ../../mix.core/src/platform/mix.queue/Interfaces/IQueuePublisher.cs
    startLine: 11
  assemblies:
  - mix.queue
  namespace: Mix.Queue.Interfaces
  syntax:
    content: Task SendMessages(IList<T> messages)
    parameters:
    - id: messages
      type: System.Collections.Generic.IList{{T}}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SendMessages(messages As IList(Of T)) As Task
  overload: Mix.Queue.Interfaces.IQueuePublisher`1.SendMessages*
  nameWithType.vb: IQueuePublisher(Of T).SendMessages(IList(Of T))
  fullName.vb: Mix.Queue.Interfaces.IQueuePublisher(Of T).SendMessages(System.Collections.Generic.IList(Of T))
  name.vb: SendMessages(IList(Of T))
references:
- uid: Mix.Queue.Interfaces
  commentId: N:Mix.Queue.Interfaces
  name: Mix.Queue.Interfaces
  nameWithType: Mix.Queue.Interfaces
  fullName: Mix.Queue.Interfaces
- uid: Mix.Queue.Interfaces.IQueuePublisher`1.SendMessage*
  commentId: Overload:Mix.Queue.Interfaces.IQueuePublisher`1.SendMessage
  name: SendMessage
  nameWithType: IQueuePublisher<T>.SendMessage
  fullName: Mix.Queue.Interfaces.IQueuePublisher<T>.SendMessage
  nameWithType.vb: IQueuePublisher(Of T).SendMessage
  fullName.vb: Mix.Queue.Interfaces.IQueuePublisher(Of T).SendMessage
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mix.Queue.Interfaces.IQueuePublisher`1.SendMessages*
  commentId: Overload:Mix.Queue.Interfaces.IQueuePublisher`1.SendMessages
  name: SendMessages
  nameWithType: IQueuePublisher<T>.SendMessages
  fullName: Mix.Queue.Interfaces.IQueuePublisher<T>.SendMessages
  nameWithType.vb: IQueuePublisher(Of T).SendMessages
  fullName.vb: Mix.Queue.Interfaces.IQueuePublisher(Of T).SendMessages
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
