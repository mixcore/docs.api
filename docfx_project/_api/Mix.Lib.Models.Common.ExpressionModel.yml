### YamlMime:ManagedReference
items:
- uid: Mix.Lib.Models.Common.ExpressionModel
  commentId: T:Mix.Lib.Models.Common.ExpressionModel
  id: ExpressionModel
  parent: Mix.Lib.Models.Common
  children:
  - Mix.Lib.Models.Common.ExpressionModel.AddExpression(Mix.Lib.Models.Common.ExpressionModel)
  - Mix.Lib.Models.Common.ExpressionModel.AddFunction(Mix.Lib.Models.Common.FunctionModel)
  - Mix.Lib.Models.Common.ExpressionModel.Create(MixLogicalOperatorKind)
  - Mix.Lib.Models.Common.ExpressionModel.Expressions
  - Mix.Lib.Models.Common.ExpressionModel.ExpressionType
  - Mix.Lib.Models.Common.ExpressionModel.Functions
  langs:
  - csharp
  - vb
  name: ExpressionModel
  nameWithType: ExpressionModel
  fullName: Mix.Lib.Models.Common.ExpressionModel
  type: Class
  source:
    remote:
      path: src/platform/mix.library/Models/Common/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ExpressionModel
    path: ../../mix.core/src/platform/mix.library/Models/Common/ExpressionModel.cs
    startLine: 2
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public class ExpressionModel
    content.vb: Public Class ExpressionModel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Lib.Models.Common.ExpressionModel.ExpressionType
  commentId: P:Mix.Lib.Models.Common.ExpressionModel.ExpressionType
  id: ExpressionType
  parent: Mix.Lib.Models.Common.ExpressionModel
  langs:
  - csharp
  - vb
  name: ExpressionType
  nameWithType: ExpressionModel.ExpressionType
  fullName: Mix.Lib.Models.Common.ExpressionModel.ExpressionType
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ExpressionType
    path: ../../mix.core/src/platform/mix.library/Models/Common/ExpressionModel.cs
    startLine: 4
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public MixLogicalOperatorKind ExpressionType { get; set; }
    parameters: []
    return:
      type: MixLogicalOperatorKind
    content.vb: Public Property ExpressionType As MixLogicalOperatorKind
  overload: Mix.Lib.Models.Common.ExpressionModel.ExpressionType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Lib.Models.Common.ExpressionModel.Functions
  commentId: P:Mix.Lib.Models.Common.ExpressionModel.Functions
  id: Functions
  parent: Mix.Lib.Models.Common.ExpressionModel
  langs:
  - csharp
  - vb
  name: Functions
  nameWithType: ExpressionModel.Functions
  fullName: Mix.Lib.Models.Common.ExpressionModel.Functions
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Functions
    path: ../../mix.core/src/platform/mix.library/Models/Common/ExpressionModel.cs
    startLine: 6
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public List<FunctionModel> Functions { get; set; }
    parameters: []
    return:
      type: List{Mix.Lib.Models.Common.FunctionModel}
    content.vb: Public Property Functions As List(Of FunctionModel)
  overload: Mix.Lib.Models.Common.ExpressionModel.Functions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Lib.Models.Common.ExpressionModel.Expressions
  commentId: P:Mix.Lib.Models.Common.ExpressionModel.Expressions
  id: Expressions
  parent: Mix.Lib.Models.Common.ExpressionModel
  langs:
  - csharp
  - vb
  name: Expressions
  nameWithType: ExpressionModel.Expressions
  fullName: Mix.Lib.Models.Common.ExpressionModel.Expressions
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Expressions
    path: ../../mix.core/src/platform/mix.library/Models/Common/ExpressionModel.cs
    startLine: 8
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public List<ExpressionModel> Expressions { get; set; }
    parameters: []
    return:
      type: List{Mix.Lib.Models.Common.ExpressionModel}
    content.vb: Public Property Expressions As List(Of ExpressionModel)
  overload: Mix.Lib.Models.Common.ExpressionModel.Expressions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Lib.Models.Common.ExpressionModel.Create(MixLogicalOperatorKind)
  commentId: M:Mix.Lib.Models.Common.ExpressionModel.Create(MixLogicalOperatorKind)
  id: Create(MixLogicalOperatorKind)
  parent: Mix.Lib.Models.Common.ExpressionModel
  langs:
  - csharp
  - vb
  name: Create(MixLogicalOperatorKind)
  nameWithType: ExpressionModel.Create(MixLogicalOperatorKind)
  fullName: Mix.Lib.Models.Common.ExpressionModel.Create(MixLogicalOperatorKind)
  type: Method
  source:
    remote:
      path: src/platform/mix.library/Models/Common/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Create
    path: ../../mix.core/src/platform/mix.library/Models/Common/ExpressionModel.cs
    startLine: 10
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public static ExpressionModel Create(MixLogicalOperatorKind expressType)
    parameters:
    - id: expressType
      type: MixLogicalOperatorKind
    return:
      type: Mix.Lib.Models.Common.ExpressionModel
    content.vb: Public Shared Function Create(expressType As MixLogicalOperatorKind) As ExpressionModel
  overload: Mix.Lib.Models.Common.ExpressionModel.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mix.Lib.Models.Common.ExpressionModel.AddFunction(Mix.Lib.Models.Common.FunctionModel)
  commentId: M:Mix.Lib.Models.Common.ExpressionModel.AddFunction(Mix.Lib.Models.Common.FunctionModel)
  id: AddFunction(Mix.Lib.Models.Common.FunctionModel)
  parent: Mix.Lib.Models.Common.ExpressionModel
  langs:
  - csharp
  - vb
  name: AddFunction(FunctionModel)
  nameWithType: ExpressionModel.AddFunction(FunctionModel)
  fullName: Mix.Lib.Models.Common.ExpressionModel.AddFunction(Mix.Lib.Models.Common.FunctionModel)
  type: Method
  source:
    remote:
      path: src/platform/mix.library/Models/Common/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: AddFunction
    path: ../../mix.core/src/platform/mix.library/Models/Common/ExpressionModel.cs
    startLine: 15
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public ExpressionModel AddFunction(FunctionModel function)
    parameters:
    - id: function
      type: Mix.Lib.Models.Common.FunctionModel
    return:
      type: Mix.Lib.Models.Common.ExpressionModel
    content.vb: Public Function AddFunction(function As FunctionModel) As ExpressionModel
  overload: Mix.Lib.Models.Common.ExpressionModel.AddFunction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Lib.Models.Common.ExpressionModel.AddExpression(Mix.Lib.Models.Common.ExpressionModel)
  commentId: M:Mix.Lib.Models.Common.ExpressionModel.AddExpression(Mix.Lib.Models.Common.ExpressionModel)
  id: AddExpression(Mix.Lib.Models.Common.ExpressionModel)
  parent: Mix.Lib.Models.Common.ExpressionModel
  langs:
  - csharp
  - vb
  name: AddExpression(ExpressionModel)
  nameWithType: ExpressionModel.AddExpression(ExpressionModel)
  fullName: Mix.Lib.Models.Common.ExpressionModel.AddExpression(Mix.Lib.Models.Common.ExpressionModel)
  type: Method
  source:
    remote:
      path: src/platform/mix.library/Models/Common/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: AddExpression
    path: ../../mix.core/src/platform/mix.library/Models/Common/ExpressionModel.cs
    startLine: 21
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public ExpressionModel AddExpression(ExpressionModel expression)
    parameters:
    - id: expression
      type: Mix.Lib.Models.Common.ExpressionModel
    return:
      type: Mix.Lib.Models.Common.ExpressionModel
    content.vb: Public Function AddExpression(expression As ExpressionModel) As ExpressionModel
  overload: Mix.Lib.Models.Common.ExpressionModel.AddExpression*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Mix.Lib.Models.Common
  commentId: N:Mix.Lib.Models.Common
  name: Mix.Lib.Models.Common
  nameWithType: Mix.Lib.Models.Common
  fullName: Mix.Lib.Models.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Lib.Models.Common.ExpressionModel.ExpressionType*
  commentId: Overload:Mix.Lib.Models.Common.ExpressionModel.ExpressionType
  name: ExpressionType
  nameWithType: ExpressionModel.ExpressionType
  fullName: Mix.Lib.Models.Common.ExpressionModel.ExpressionType
- uid: MixLogicalOperatorKind
  isExternal: true
  name: MixLogicalOperatorKind
  nameWithType: MixLogicalOperatorKind
  fullName: MixLogicalOperatorKind
- uid: Mix.Lib.Models.Common.ExpressionModel.Functions*
  commentId: Overload:Mix.Lib.Models.Common.ExpressionModel.Functions
  name: Functions
  nameWithType: ExpressionModel.Functions
  fullName: Mix.Lib.Models.Common.ExpressionModel.Functions
- uid: List{Mix.Lib.Models.Common.FunctionModel}
  commentId: '!:List{Mix.Lib.Models.Common.FunctionModel}'
  definition: List`1
  name: List<FunctionModel>
  nameWithType: List<FunctionModel>
  fullName: List<Mix.Lib.Models.Common.FunctionModel>
  nameWithType.vb: List(Of FunctionModel)
  fullName.vb: List(Of Mix.Lib.Models.Common.FunctionModel)
  name.vb: List(Of FunctionModel)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Lib.Models.Common.FunctionModel
    name: FunctionModel
    nameWithType: FunctionModel
    fullName: Mix.Lib.Models.Common.FunctionModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Lib.Models.Common.FunctionModel
    name: FunctionModel
    nameWithType: FunctionModel
    fullName: Mix.Lib.Models.Common.FunctionModel
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Lib.Models.Common.ExpressionModel.Expressions*
  commentId: Overload:Mix.Lib.Models.Common.ExpressionModel.Expressions
  name: Expressions
  nameWithType: ExpressionModel.Expressions
  fullName: Mix.Lib.Models.Common.ExpressionModel.Expressions
- uid: List{Mix.Lib.Models.Common.ExpressionModel}
  commentId: '!:List{Mix.Lib.Models.Common.ExpressionModel}'
  definition: List`1
  name: List<ExpressionModel>
  nameWithType: List<ExpressionModel>
  fullName: List<Mix.Lib.Models.Common.ExpressionModel>
  nameWithType.vb: List(Of ExpressionModel)
  fullName.vb: List(Of Mix.Lib.Models.Common.ExpressionModel)
  name.vb: List(Of ExpressionModel)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Lib.Models.Common.ExpressionModel
    name: ExpressionModel
    nameWithType: ExpressionModel
    fullName: Mix.Lib.Models.Common.ExpressionModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Lib.Models.Common.ExpressionModel
    name: ExpressionModel
    nameWithType: ExpressionModel
    fullName: Mix.Lib.Models.Common.ExpressionModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Lib.Models.Common.ExpressionModel.Create*
  commentId: Overload:Mix.Lib.Models.Common.ExpressionModel.Create
  name: Create
  nameWithType: ExpressionModel.Create
  fullName: Mix.Lib.Models.Common.ExpressionModel.Create
- uid: Mix.Lib.Models.Common.ExpressionModel
  commentId: T:Mix.Lib.Models.Common.ExpressionModel
  parent: Mix.Lib.Models.Common
  name: ExpressionModel
  nameWithType: ExpressionModel
  fullName: Mix.Lib.Models.Common.ExpressionModel
- uid: Mix.Lib.Models.Common.ExpressionModel.AddFunction*
  commentId: Overload:Mix.Lib.Models.Common.ExpressionModel.AddFunction
  name: AddFunction
  nameWithType: ExpressionModel.AddFunction
  fullName: Mix.Lib.Models.Common.ExpressionModel.AddFunction
- uid: Mix.Lib.Models.Common.FunctionModel
  commentId: T:Mix.Lib.Models.Common.FunctionModel
  parent: Mix.Lib.Models.Common
  name: FunctionModel
  nameWithType: FunctionModel
  fullName: Mix.Lib.Models.Common.FunctionModel
- uid: Mix.Lib.Models.Common.ExpressionModel.AddExpression*
  commentId: Overload:Mix.Lib.Models.Common.ExpressionModel.AddExpression
  name: AddExpression
  nameWithType: ExpressionModel.AddExpression
  fullName: Mix.Lib.Models.Common.ExpressionModel.AddExpression
