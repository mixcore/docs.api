### YamlMime:ManagedReference
items:
- uid: Mix.Heart.Repository.Repository`4
  commentId: T:Mix.Heart.Repository.Repository`4
  id: Repository`4
  parent: Mix.Heart.Repository
  children:
  - Mix.Heart.Repository.Repository`4.#ctor(`0)
  - Mix.Heart.Repository.Repository`4.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  - Mix.Heart.Repository.Repository`4.CreateAsync(`1)
  - Mix.Heart.Repository.Repository`4.DeleteAsync(`1)
  - Mix.Heart.Repository.Repository`4.DeleteAsync(`2)
  - Mix.Heart.Repository.Repository`4.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.Repository`4.DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.Repository`4.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
  - Mix.Heart.Repository.Repository`4.SaveAsync(`1)
  - Mix.Heart.Repository.Repository`4.UpdateAsync(`1)
  langs:
  - csharp
  - vb
  name: Repository<TDbContext, TEntity, TPrimaryKey, TView>
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>
  type: Class
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: Repository
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 14
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: 'public class Repository<TDbContext, TEntity, TPrimaryKey, TView> : ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>, IRepositoryBase<TDbContext>, IDisposable where TDbContext : DbContext where TEntity : class, IEntity<TPrimaryKey> where TPrimaryKey : IComparable where TView : ViewModelBase<TDbContext, TEntity, TPrimaryKey, TView>'
    typeParameters:
    - id: TDbContext
    - id: TEntity
    - id: TPrimaryKey
    - id: TView
    content.vb: >-
      Public Class Repository(Of TDbContext As DbContext, TEntity As {Class, IEntity(Of TPrimaryKey)}, TPrimaryKey As IComparable, TView As ViewModelBase(Of TDbContext, TEntity, TPrimaryKey, TView))
          Inherits ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
          Implements IRepositoryBase(Of TDbContext), IDisposable
  inheritance:
  - System.Object
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  implements:
  - Mix.Heart.Repository.IRepositoryBase{{TDbContext}}
  - System.IDisposable
  inheritedMembers:
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.CacheService
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.CacheFilename
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.SelectedMembers
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.KeyMembers
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.Table
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetListQuery(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},Mix.Heart.Models.PagingModel)
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetEntityByIdAsync({TPrimaryKey})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.SetSelectedMembers(System.String[])
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.CheckIsExistsAsync({TEntity})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetSingleAsync({TPrimaryKey})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetListAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetAllAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},Mix.Heart.Models.PagingModel)
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.BuildViewModel({TEntity})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.ToListViewModelAsync(System.Linq.IQueryable{{TEntity}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.ToPagingViewModelAsync(System.Linq.IQueryable{{TEntity}},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetEntities(System.Linq.IQueryable{{TEntity}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.ParseEntitiesAsync(System.Collections.Generic.List{{TEntity}})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetSingleViewAsync({TEntity})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetViewModel({TEntity})
  - Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetLambda(System.String,System.Boolean)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.UowInfo
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Context
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.BeginUow
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CloseUowAsync
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CompleteUowAsync
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleExceptionAsync(System.Exception)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleException(System.Exception,System.String,System.String,System.Int32)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Dispose
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView)
  name.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView)
- uid: Mix.Heart.Repository.Repository`4.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.Repository`4.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  id: '#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)'
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: Repository(UnitOfWorkInfo)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.Repository(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.Repository(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  type: Constructor
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: .ctor
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 21
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public Repository(UnitOfWorkInfo uowInfo)
    parameters:
    - id: uowInfo
      type: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    content.vb: Public Sub New(uowInfo As UnitOfWorkInfo)
  overload: Mix.Heart.Repository.Repository`4.#ctor*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).Repository(UnitOfWorkInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).Repository(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
- uid: Mix.Heart.Repository.Repository`4.#ctor(`0)
  commentId: M:Mix.Heart.Repository.Repository`4.#ctor(`0)
  id: '#ctor(`0)'
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: Repository(TDbContext)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.Repository(TDbContext)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.Repository(TDbContext)
  type: Constructor
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: .ctor
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 22
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public Repository(TDbContext dbContext)
    parameters:
    - id: dbContext
      type: '{TDbContext}'
    content.vb: Public Sub New(dbContext As TDbContext)
  overload: Mix.Heart.Repository.Repository`4.#ctor*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).Repository(TDbContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).Repository(TDbContext)
- uid: Mix.Heart.Repository.Repository`4.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
  commentId: M:Mix.Heart.Repository.Repository`4.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
  id: MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: MaxAsync(Expression<Func<TEntity, Int32>>)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.MaxAsync(Expression<Func<TEntity, Int32>>)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.MaxAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: MaxAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 26
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<int> MaxAsync(Expression<Func<TEntity, int>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Int32}}
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Overridable Function MaxAsync(predicate As Expression(Of Func(Of TEntity, Integer))) As Task(Of Integer)
  overload: Mix.Heart.Repository.Repository`4.MaxAsync*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).MaxAsync(Expression(Of Func(Of TEntity, Int32)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).MaxAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Int32)))
  name.vb: MaxAsync(Expression(Of Func(Of TEntity, Int32)))
- uid: Mix.Heart.Repository.Repository`4.CreateAsync(`1)
  commentId: M:Mix.Heart.Repository.Repository`4.CreateAsync(`1)
  id: CreateAsync(`1)
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: CreateAsync(TEntity)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.CreateAsync(TEntity)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.CreateAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: CreateAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 31
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task CreateAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function CreateAsync(entity As TEntity) As Task
  overload: Mix.Heart.Repository.Repository`4.CreateAsync*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).CreateAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).CreateAsync(TEntity)
- uid: Mix.Heart.Repository.Repository`4.UpdateAsync(`1)
  commentId: M:Mix.Heart.Repository.Repository`4.UpdateAsync(`1)
  id: UpdateAsync(`1)
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: UpdateAsync(TEntity)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.UpdateAsync(TEntity)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.UpdateAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: UpdateAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 50
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task UpdateAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function UpdateAsync(entity As TEntity) As Task
  overload: Mix.Heart.Repository.Repository`4.UpdateAsync*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).UpdateAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).UpdateAsync(TEntity)
- uid: Mix.Heart.Repository.Repository`4.SaveAsync(`1)
  commentId: M:Mix.Heart.Repository.Repository`4.SaveAsync(`1)
  id: SaveAsync(`1)
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: SaveAsync(TEntity)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.SaveAsync(TEntity)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.SaveAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: SaveAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 77
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task SaveAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SaveAsync(entity As TEntity) As Task
  overload: Mix.Heart.Repository.Repository`4.SaveAsync*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).SaveAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).SaveAsync(TEntity)
- uid: Mix.Heart.Repository.Repository`4.DeleteAsync(`2)
  commentId: M:Mix.Heart.Repository.Repository`4.DeleteAsync(`2)
  id: DeleteAsync(`2)
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: DeleteAsync(TPrimaryKey)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteAsync(TPrimaryKey)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: DeleteAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 100
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task DeleteAsync(TPrimaryKey id)
    parameters:
    - id: id
      type: '{TPrimaryKey}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteAsync(id As TPrimaryKey) As Task
  overload: Mix.Heart.Repository.Repository`4.DeleteAsync*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteAsync(TPrimaryKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteAsync(TPrimaryKey)
- uid: Mix.Heart.Repository.Repository`4.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.Repository`4.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: DeleteAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: DeleteAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 117
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task DeleteAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task
  overload: Mix.Heart.Repository.Repository`4.DeleteAsync*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.Repository`4.DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.Repository`4.DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: DeleteManyAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteManyAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteManyAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: DeleteManyAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 144
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task DeleteManyAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteManyAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task
  overload: Mix.Heart.Repository.Repository`4.DeleteManyAsync*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteManyAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteManyAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteManyAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.Repository`4.DeleteAsync(`1)
  commentId: M:Mix.Heart.Repository.Repository`4.DeleteAsync(`1)
  id: DeleteAsync(`1)
  parent: Mix.Heart.Repository.Repository`4
  langs:
  - csharp
  - vb
  name: DeleteAsync(TEntity)
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteAsync(TEntity)
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/Repository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: DeleteAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/Repository.cs
    startLine: 164
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task DeleteAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteAsync(entity As TEntity) As Task
  overload: Mix.Heart.Repository.Repository`4.DeleteAsync*
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteAsync(TEntity)
references:
- uid: Mix.Heart.Repository
  commentId: N:Mix.Heart.Repository
  name: Mix.Heart.Repository
  nameWithType: Mix.Heart.Repository
  fullName: Mix.Heart.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  commentId: T:Mix.Heart.Repository.RepositoryBase{`0}
  parent: Mix.Heart.Repository
  definition: Mix.Heart.Repository.RepositoryBase`1
  name: RepositoryBase<TDbContext>
  nameWithType: RepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>
  nameWithType.vb: RepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext)
  name.vb: RepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  commentId: T:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}
  parent: Mix.Heart.Repository
  definition: Mix.Heart.Repository.ViewQueryRepository`4
  name: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
  name.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4
    name: ViewQueryRepository
    nameWithType: ViewQueryRepository
    fullName: Mix.Heart.Repository.ViewQueryRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4
    name: ViewQueryRepository
    nameWithType: ViewQueryRepository
    fullName: Mix.Heart.Repository.ViewQueryRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.IRepositoryBase{{TDbContext}}
  commentId: T:Mix.Heart.Repository.IRepositoryBase{`0}
  parent: Mix.Heart.Repository
  definition: Mix.Heart.Repository.IRepositoryBase`1
  name: IRepositoryBase<TDbContext>
  nameWithType: IRepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.IRepositoryBase<TDbContext>
  nameWithType.vb: IRepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.IRepositoryBase(Of TDbContext)
  name.vb: IRepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.CacheService
  commentId: P:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.CacheService
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.CacheService
  name: CacheService
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheService
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheService
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheService
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheService
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.CacheFilename
  commentId: P:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.CacheFilename
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename
  name: CacheFilename
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheFilename
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheFilename
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheFilename
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheFilename
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.SelectedMembers
  commentId: P:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.SelectedMembers
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers
  name: SelectedMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SelectedMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SelectedMembers
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SelectedMembers
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SelectedMembers
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.KeyMembers
  commentId: P:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.KeyMembers
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers
  name: KeyMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.KeyMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.KeyMembers
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).KeyMembers
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).KeyMembers
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.Table
  commentId: P:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.Table
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.Table
  name: Table
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.Table
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.Table
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).Table
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).Table
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetListQuery(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetListQuery(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListQuery
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListQuery
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  name: GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingQuery
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingQuery
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetEntityByIdAsync({TPrimaryKey})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetEntityByIdAsync(`2)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
  name: GetEntityByIdAsync(TPrimaryKey)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync(TPrimaryKey)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync(TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync(TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
    name: GetEntityByIdAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
    name: GetEntityByIdAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.SetSelectedMembers(System.String[])
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.SetSelectedMembers(System.String[])
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
  name: SetSelectedMembers(String[])
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers(String[])
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers(System.String[])
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers(String())
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers(System.String())
  name.vb: SetSelectedMembers(String())
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
    name: SetSelectedMembers
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
    name: SetSelectedMembers
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.CheckIsExistsAsync({TEntity})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.CheckIsExistsAsync(`1)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
  name: CheckIsExistsAsync(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(TEntity)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(TEntity)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
    name: CheckIsExistsAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
    name: CheckIsExistsAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: CheckIsExistsAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: CheckIsExistsAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: CheckIsExistsAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: CheckIsExistsAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetSingleAsync({TPrimaryKey})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetSingleAsync(`2)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
  name: GetSingleAsync(TPrimaryKey)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(TPrimaryKey)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
    name: GetSingleAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
    name: GetSingleAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingleAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingleAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirstAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirstAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetListAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetListAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetListAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetAllAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetAllAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetAllAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetAllAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetAllAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  name: GetPagingAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.BuildViewModel({TEntity})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.BuildViewModel(`1)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
  name: BuildViewModel(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel(TEntity)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel(TEntity)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
    name: BuildViewModel
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
    name: BuildViewModel
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.ToListViewModelAsync(System.Linq.IQueryable{{TEntity}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.ToListViewModelAsync(System.Linq.IQueryable{`1})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
  name: ToListViewModelAsync(IQueryable<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync(IQueryable<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync(System.Linq.IQueryable<TEntity>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync(IQueryable(Of TEntity))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync(System.Linq.IQueryable(Of TEntity))
  name.vb: ToListViewModelAsync(IQueryable(Of TEntity))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
    name: ToListViewModelAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
    name: ToListViewModelAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.ToPagingViewModelAsync(System.Linq.IQueryable{{TEntity}},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  name: ToPagingViewModelAsync(IQueryable<TEntity>, PagingModel, MixCacheService)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync(IQueryable<TEntity>, PagingModel, MixCacheService)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync(System.Linq.IQueryable<TEntity>, Mix.Heart.Models.PagingModel, Mix.Heart.Services.MixCacheService)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync(IQueryable(Of TEntity), PagingModel, MixCacheService)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync(System.Linq.IQueryable(Of TEntity), Mix.Heart.Models.PagingModel, Mix.Heart.Services.MixCacheService)
  name.vb: ToPagingViewModelAsync(IQueryable(Of TEntity), PagingModel, MixCacheService)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
    name: ToPagingViewModelAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Services.MixCacheService
    name: MixCacheService
    nameWithType: MixCacheService
    fullName: Mix.Heart.Services.MixCacheService
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
    name: ToPagingViewModelAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Services.MixCacheService
    name: MixCacheService
    nameWithType: MixCacheService
    fullName: Mix.Heart.Services.MixCacheService
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetEntities(System.Linq.IQueryable{{TEntity}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetEntities(System.Linq.IQueryable{`1})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
  name: GetEntities(IQueryable<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities(IQueryable<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities(System.Linq.IQueryable<TEntity>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities(IQueryable(Of TEntity))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities(System.Linq.IQueryable(Of TEntity))
  name.vb: GetEntities(IQueryable(Of TEntity))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
    name: GetEntities
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
    name: GetEntities
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.ParseEntitiesAsync(System.Collections.Generic.List{{TEntity}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  name: ParseEntitiesAsync(List<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync(List<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync(System.Collections.Generic.List<TEntity>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync(List(Of TEntity))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync(System.Collections.Generic.List(Of TEntity))
  name.vb: ParseEntitiesAsync(List(Of TEntity))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
    name: ParseEntitiesAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
    name: ParseEntitiesAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetSingleViewAsync({TEntity})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetSingleViewAsync(`1)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
  name: GetSingleViewAsync(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync(TEntity)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync(TEntity)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
    name: GetSingleViewAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
    name: GetSingleViewAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetViewModel({TEntity})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetViewModel(`1)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
  name: GetViewModel(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel(TEntity)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel(TEntity)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
    name: GetViewModel
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
    name: GetViewModel
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}.GetLambda(System.String,System.Boolean)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository{`0,`1,`2,`3}.GetLambda(System.String,System.Boolean)
  parent: Mix.Heart.Repository.ViewQueryRepository{{TDbContext},{TEntity},{TPrimaryKey},{TView}}
  definition: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
  name: GetLambda(String, Boolean)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda(String, Boolean)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda(System.String, System.Boolean)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda(String, Boolean)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda(System.String, System.Boolean)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.UowInfo
  commentId: P:Mix.Heart.Repository.RepositoryBase{`0}.UowInfo
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.UowInfo
  name: UowInfo
  nameWithType: RepositoryBase<TDbContext>.UowInfo
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.UowInfo
  nameWithType.vb: RepositoryBase(Of TDbContext).UowInfo
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).UowInfo
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Context
  commentId: P:Mix.Heart.Repository.RepositoryBase{`0}.Context
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.Context
  name: Context
  nameWithType: RepositoryBase<TDbContext>.Context
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Context
  nameWithType.vb: RepositoryBase(Of TDbContext).Context
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Context
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  name: SetUowInfo(UnitOfWorkInfo)
  nameWithType: RepositoryBase<TDbContext>.SetUowInfo(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  nameWithType.vb: RepositoryBase(Of TDbContext).SetUowInfo(UnitOfWorkInfo)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase<TDbContext>.SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase(Of TDbContext).SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.BeginUow
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.BeginUow
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.BeginUow
  name: BeginUow()
  nameWithType: RepositoryBase<TDbContext>.BeginUow()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow()
  nameWithType.vb: RepositoryBase(Of TDbContext).BeginUow()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase<TDbContext>.BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase(Of TDbContext).BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CloseUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.CloseUowAsync
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  name: CloseUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CloseUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CloseUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase<TDbContext>.CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CompleteUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.CompleteUowAsync
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  name: CompleteUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CompleteUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleExceptionAsync(System.Exception)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.HandleExceptionAsync(System.Exception)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  name: HandleExceptionAsync(Exception)
  nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync(Exception)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync(System.Exception)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleExceptionAsync(Exception)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync(System.Exception)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase(Of TDbContext).HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleException(System.Exception,System.String,System.String,System.Int32)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.HandleException(System.Exception,System.String,System.String,System.Int32)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  name: HandleException(Exception, String, String, Int32)
  nameWithType: RepositoryBase<TDbContext>.HandleException(Exception, String, String, Int32)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException(System.Exception, System.String, System.String, System.Int32)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleException(Exception, String, String, Int32)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException(System.Exception, System.String, System.String, System.Int32)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase<TDbContext>.HandleException
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase(Of TDbContext).HandleException
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Dispose
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.Dispose
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.Dispose
  name: Dispose()
  nameWithType: RepositoryBase<TDbContext>.Dispose()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose()
  nameWithType.vb: RepositoryBase(Of TDbContext).Dispose()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase<TDbContext>.Dispose
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase(Of TDbContext).Dispose
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Heart.Repository.RepositoryBase`1
  commentId: T:Mix.Heart.Repository.RepositoryBase`1
  name: RepositoryBase<TDbContext>
  nameWithType: RepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>
  nameWithType.vb: RepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext)
  name.vb: RepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4
  commentId: T:Mix.Heart.Repository.ViewQueryRepository`4
  name: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
  name.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4
    name: ViewQueryRepository
    nameWithType: ViewQueryRepository
    fullName: Mix.Heart.Repository.ViewQueryRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4
    name: ViewQueryRepository
    nameWithType: ViewQueryRepository
    fullName: Mix.Heart.Repository.ViewQueryRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.IRepositoryBase`1
  commentId: T:Mix.Heart.Repository.IRepositoryBase`1
  name: IRepositoryBase<TDbContext>
  nameWithType: IRepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.IRepositoryBase<TDbContext>
  nameWithType.vb: IRepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.IRepositoryBase(Of TDbContext)
  name.vb: IRepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CacheService
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.CacheService
  name: CacheService
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheService
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheService
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheService
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheService
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename
  name: CacheFilename
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheFilename
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheFilename
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheFilename
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheFilename
- uid: Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers
  name: SelectedMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SelectedMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SelectedMembers
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SelectedMembers
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SelectedMembers
- uid: Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers
  name: KeyMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.KeyMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.KeyMembers
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).KeyMembers
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).KeyMembers
- uid: Mix.Heart.Repository.ViewQueryRepository`4.Table
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.Table
  name: Table
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.Table
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.Table
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).Table
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).Table
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetListQuery(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListQuery
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListQuery
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  isExternal: true
  name: GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingQuery
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingQuery
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
  name: GetEntityByIdAsync(TPrimaryKey)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync(TPrimaryKey)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync(TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync(TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
    name: GetEntityByIdAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
    name: GetEntityByIdAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
  isExternal: true
  name: SetSelectedMembers(String[])
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers(String[])
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers(System.String[])
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers(String())
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers(System.String())
  name.vb: SetSelectedMembers(String())
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
    name: SetSelectedMembers
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
    name: SetSelectedMembers
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
  name: CheckIsExistsAsync(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(TEntity)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(TEntity)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
    name: CheckIsExistsAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
    name: CheckIsExistsAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: CheckIsExistsAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: CheckIsExistsAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: CheckIsExistsAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: CheckIsExistsAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
  name: GetSingleAsync(TPrimaryKey)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(TPrimaryKey)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
    name: GetSingleAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
    name: GetSingleAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingleAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingleAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirstAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirstAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetListAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetListAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetAllAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetAllAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetAllAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetAllAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  isExternal: true
  name: GetPagingAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
  name: BuildViewModel(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel(TEntity)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel(TEntity)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
    name: BuildViewModel
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
    name: BuildViewModel
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
  isExternal: true
  name: ToListViewModelAsync(IQueryable<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync(IQueryable<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync(System.Linq.IQueryable<TEntity>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync(IQueryable(Of TEntity))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync(System.Linq.IQueryable(Of TEntity))
  name.vb: ToListViewModelAsync(IQueryable(Of TEntity))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
    name: ToListViewModelAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
    name: ToListViewModelAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  isExternal: true
  name: ToPagingViewModelAsync(IQueryable<TEntity>, PagingModel, MixCacheService)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync(IQueryable<TEntity>, PagingModel, MixCacheService)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync(System.Linq.IQueryable<TEntity>, Mix.Heart.Models.PagingModel, Mix.Heart.Services.MixCacheService)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync(IQueryable(Of TEntity), PagingModel, MixCacheService)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync(System.Linq.IQueryable(Of TEntity), Mix.Heart.Models.PagingModel, Mix.Heart.Services.MixCacheService)
  name.vb: ToPagingViewModelAsync(IQueryable(Of TEntity), PagingModel, MixCacheService)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
    name: ToPagingViewModelAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Services.MixCacheService
    name: MixCacheService
    nameWithType: MixCacheService
    fullName: Mix.Heart.Services.MixCacheService
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
    name: ToPagingViewModelAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Services.MixCacheService
    name: MixCacheService
    nameWithType: MixCacheService
    fullName: Mix.Heart.Services.MixCacheService
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
  isExternal: true
  name: GetEntities(IQueryable<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities(IQueryable<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities(System.Linq.IQueryable<TEntity>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities(IQueryable(Of TEntity))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities(System.Linq.IQueryable(Of TEntity))
  name.vb: GetEntities(IQueryable(Of TEntity))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
    name: GetEntities
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
    name: GetEntities
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  isExternal: true
  name: ParseEntitiesAsync(List<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync(List<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync(System.Collections.Generic.List<TEntity>)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync(List(Of TEntity))
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync(System.Collections.Generic.List(Of TEntity))
  name.vb: ParseEntitiesAsync(List(Of TEntity))
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
    name: ParseEntitiesAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
    name: ParseEntitiesAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
  name: GetSingleViewAsync(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync(TEntity)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync(TEntity)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
    name: GetSingleViewAsync
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
    name: GetSingleViewAsync
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
  name: GetViewModel(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel(TEntity)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel(TEntity)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
    name: GetViewModel
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
    name: GetViewModel
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
  isExternal: true
  name: GetLambda(String, Boolean)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda(String, Boolean)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda(System.String, System.Boolean)
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda(String, Boolean)
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda(System.String, System.Boolean)
  spec.csharp:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda
    fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda
    fullName: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.UowInfo
  commentId: P:Mix.Heart.Repository.RepositoryBase`1.UowInfo
  name: UowInfo
  nameWithType: RepositoryBase<TDbContext>.UowInfo
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.UowInfo
  nameWithType.vb: RepositoryBase(Of TDbContext).UowInfo
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).UowInfo
- uid: Mix.Heart.Repository.RepositoryBase`1.Context
  commentId: P:Mix.Heart.Repository.RepositoryBase`1.Context
  name: Context
  nameWithType: RepositoryBase<TDbContext>.Context
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Context
  nameWithType.vb: RepositoryBase(Of TDbContext).Context
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Context
- uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  name: SetUowInfo(UnitOfWorkInfo)
  nameWithType: RepositoryBase<TDbContext>.SetUowInfo(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  nameWithType.vb: RepositoryBase(Of TDbContext).SetUowInfo(UnitOfWorkInfo)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase<TDbContext>.SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase(Of TDbContext).SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.BeginUow
  name: BeginUow()
  nameWithType: RepositoryBase<TDbContext>.BeginUow()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow()
  nameWithType.vb: RepositoryBase(Of TDbContext).BeginUow()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase<TDbContext>.BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase(Of TDbContext).BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  name: CloseUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CloseUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CloseUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase<TDbContext>.CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  name: CompleteUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CompleteUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  isExternal: true
  name: HandleExceptionAsync(Exception)
  nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync(Exception)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync(System.Exception)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleExceptionAsync(Exception)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync(System.Exception)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase(Of TDbContext).HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  isExternal: true
  name: HandleException(Exception, String, String, Int32)
  nameWithType: RepositoryBase<TDbContext>.HandleException(Exception, String, String, Int32)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException(System.Exception, System.String, System.String, System.Int32)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleException(Exception, String, String, Int32)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException(System.Exception, System.String, System.String, System.Int32)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase<TDbContext>.HandleException
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase(Of TDbContext).HandleException
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.Dispose
  name: Dispose()
  nameWithType: RepositoryBase<TDbContext>.Dispose()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose()
  nameWithType.vb: RepositoryBase(Of TDbContext).Dispose()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase<TDbContext>.Dispose
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase(Of TDbContext).Dispose
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.Repository`4.#ctor*
  commentId: Overload:Mix.Heart.Repository.Repository`4.#ctor
  name: Repository
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.Repository
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.Repository
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).Repository
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).Repository
- uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  commentId: T:Mix.Heart.UnitOfWork.UnitOfWorkInfo
  parent: Mix.Heart.UnitOfWork
  name: UnitOfWorkInfo
  nameWithType: UnitOfWorkInfo
  fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
- uid: Mix.Heart.UnitOfWork
  commentId: N:Mix.Heart.UnitOfWork
  name: Mix.Heart.UnitOfWork
  nameWithType: Mix.Heart.UnitOfWork
  fullName: Mix.Heart.UnitOfWork
- uid: '{TDbContext}'
  commentId: '!:TDbContext'
  definition: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Mix.Heart.Repository.Repository`4.MaxAsync*
  commentId: Overload:Mix.Heart.Repository.Repository`4.MaxAsync
  name: MaxAsync
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.MaxAsync
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.MaxAsync
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).MaxAsync
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).MaxAsync
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Int32}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,System.Int32}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Int32>>
  nameWithType: Expression<Func<TEntity, Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Int32>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Int32))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Int32))
  name.vb: Expression(Of Func(Of TEntity, Int32))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mix.Heart.Repository.Repository`4.CreateAsync*
  commentId: Overload:Mix.Heart.Repository.Repository`4.CreateAsync
  name: CreateAsync
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.CreateAsync
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.CreateAsync
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).CreateAsync
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).CreateAsync
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Mix.Heart.Repository.Repository`4.UpdateAsync*
  commentId: Overload:Mix.Heart.Repository.Repository`4.UpdateAsync
  name: UpdateAsync
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.UpdateAsync
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.UpdateAsync
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).UpdateAsync
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).UpdateAsync
- uid: Mix.Heart.Repository.Repository`4.SaveAsync*
  commentId: Overload:Mix.Heart.Repository.Repository`4.SaveAsync
  name: SaveAsync
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.SaveAsync
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.SaveAsync
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).SaveAsync
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).SaveAsync
- uid: Mix.Heart.Repository.Repository`4.DeleteAsync*
  commentId: Overload:Mix.Heart.Repository.Repository`4.DeleteAsync
  name: DeleteAsync
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteAsync
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteAsync
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteAsync
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteAsync
- uid: '{TPrimaryKey}'
  commentId: '!:TPrimaryKey'
  definition: TPrimaryKey
  name: TPrimaryKey
  nameWithType: TPrimaryKey
  fullName: TPrimaryKey
- uid: TPrimaryKey
  name: TPrimaryKey
  nameWithType: TPrimaryKey
  fullName: TPrimaryKey
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.Repository`4.DeleteManyAsync*
  commentId: Overload:Mix.Heart.Repository.Repository`4.DeleteManyAsync
  name: DeleteManyAsync
  nameWithType: Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteManyAsync
  fullName: Mix.Heart.Repository.Repository<TDbContext, TEntity, TPrimaryKey, TView>.DeleteManyAsync
  nameWithType.vb: Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteManyAsync
  fullName.vb: Mix.Heart.Repository.Repository(Of TDbContext, TEntity, TPrimaryKey, TView).DeleteManyAsync
