### YamlMime:ManagedReference
items:
- uid: Mix.XUnittest.Domain.Orderers.PriorityOrderer
  commentId: T:Mix.XUnittest.Domain.Orderers.PriorityOrderer
  id: PriorityOrderer
  parent: Mix.XUnittest.Domain.Orderers
  children:
  - Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases``1(IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: PriorityOrderer
  nameWithType: PriorityOrderer
  fullName: Mix.XUnittest.Domain.Orderers.PriorityOrderer
  type: Class
  source:
    remote:
      path: src/test/mix.xunittest/Domain/Orderers/PriorityOrderer.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: PriorityOrderer
    path: ../../mix.core/src/test/mix.xunittest/Domain/Orderers/PriorityOrderer.cs
    startLine: 5
  assemblies:
  - mix.xunittest
  namespace: Mix.XUnittest.Domain.Orderers
  syntax:
    content: 'public class PriorityOrderer : ITestCaseOrderer'
    content.vb: >-
      Public Class PriorityOrderer
          Implements ITestCaseOrderer
  inheritance:
  - System.Object
  implements:
  - Xunit.Sdk.ITestCaseOrderer
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases``1(IEnumerable{``0})
  commentId: M:Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases``1(IEnumerable{``0})
  id: OrderTestCases``1(IEnumerable{``0})
  parent: Mix.XUnittest.Domain.Orderers.PriorityOrderer
  langs:
  - csharp
  - vb
  name: OrderTestCases<TTestCase>(IEnumerable<TTestCase>)
  nameWithType: PriorityOrderer.OrderTestCases<TTestCase>(IEnumerable<TTestCase>)
  fullName: Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases<TTestCase>(IEnumerable<TTestCase>)
  type: Method
  source:
    remote:
      path: src/test/mix.xunittest/Domain/Orderers/PriorityOrderer.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: OrderTestCases
    path: ../../mix.core/src/test/mix.xunittest/Domain/Orderers/PriorityOrderer.cs
    startLine: 7
  assemblies:
  - mix.xunittest
  namespace: Mix.XUnittest.Domain.Orderers
  syntax:
    content: >-
      public IEnumerable<TTestCase> OrderTestCases<TTestCase>(IEnumerable<TTestCase> testCases)
          where TTestCase : ITestCase
    parameters:
    - id: testCases
      type: IEnumerable{{TTestCase}}
    typeParameters:
    - id: TTestCase
    return:
      type: IEnumerable{{TTestCase}}
    content.vb: Public Function OrderTestCases(Of TTestCase As ITestCase)(testCases As IEnumerable(Of TTestCase)) As IEnumerable(Of TTestCase)
  overload: Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases*
  nameWithType.vb: PriorityOrderer.OrderTestCases(Of TTestCase)(IEnumerable(Of TTestCase))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases(Of TTestCase)(IEnumerable(Of TTestCase))
  name.vb: OrderTestCases(Of TTestCase)(IEnumerable(Of TTestCase))
references:
- uid: Mix.XUnittest.Domain.Orderers
  commentId: N:Mix.XUnittest.Domain.Orderers
  name: Mix.XUnittest.Domain.Orderers
  nameWithType: Mix.XUnittest.Domain.Orderers
  fullName: Mix.XUnittest.Domain.Orderers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Xunit.Sdk.ITestCaseOrderer
  commentId: T:Xunit.Sdk.ITestCaseOrderer
  parent: Xunit.Sdk
  isExternal: true
  name: ITestCaseOrderer
  nameWithType: ITestCaseOrderer
  fullName: Xunit.Sdk.ITestCaseOrderer
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.Sdk
  commentId: N:Xunit.Sdk
  isExternal: true
  name: Xunit.Sdk
  nameWithType: Xunit.Sdk
  fullName: Xunit.Sdk
- uid: Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases*
  commentId: Overload:Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases
  name: OrderTestCases
  nameWithType: PriorityOrderer.OrderTestCases
  fullName: Mix.XUnittest.Domain.Orderers.PriorityOrderer.OrderTestCases
- uid: IEnumerable{{TTestCase}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<TTestCase>
  nameWithType: IEnumerable<TTestCase>
  fullName: IEnumerable<TTestCase>
  nameWithType.vb: IEnumerable(Of TTestCase)
  fullName.vb: IEnumerable(Of TTestCase)
  name.vb: IEnumerable(Of TTestCase)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TTestCase
    nameWithType: TTestCase
    fullName: TTestCase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTestCase
    nameWithType: TTestCase
    fullName: TTestCase
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
