### YamlMime:ManagedReference
items:
- uid: Mix.Tenancy.Domain.Services.InitCmsService
  commentId: T:Mix.Tenancy.Domain.Services.InitCmsService
  id: InitCmsService
  parent: Mix.Tenancy.Domain.Services
  children:
  - Mix.Tenancy.Domain.Services.InitCmsService.#ctor(IHttpContextAccessor,Mix.Lib.Services.TenantUserManager,Mix.Lib.Services.MixIdentityService,Mix.Database.Services.DatabaseService,Microsoft.AspNetCore.Identity.RoleManager{Mix.Database.Entities.Account.MixRole},IConfiguration,MixCmsContext,Mix.Lib.Services.MixDataService)
  - Mix.Tenancy.Domain.Services.InitCmsService.InitAccountAsync(Mix.Identity.Models.AccountViewModels.RegisterViewModel)
  - Mix.Tenancy.Domain.Services.InitCmsService.InitDbContext(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  - Mix.Tenancy.Domain.Services.InitCmsService.InitTenantAsync(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  - Mix.Tenancy.Domain.Services.InitCmsService.tenantId
  langs:
  - csharp
  - vb
  name: InitCmsService
  nameWithType: InitCmsService
  fullName: Mix.Tenancy.Domain.Services.InitCmsService
  type: Class
  source:
    remote:
      path: src/modules/mix.tenancy/Domain/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitCmsService
    path: ../../mix.core/src/modules/mix.tenancy/Domain/Services/InitCmsService.cs
    startLine: 7
  assemblies:
  - mix.tenancy
  namespace: Mix.Tenancy.Domain.Services
  syntax:
    content: public class InitCmsService
    content.vb: Public Class InitCmsService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Tenancy.Domain.Services.InitCmsService.InitAccountAsync(Mix.Identity.Models.AccountViewModels.RegisterViewModel)
  commentId: M:Mix.Tenancy.Domain.Services.InitCmsService.InitAccountAsync(Mix.Identity.Models.AccountViewModels.RegisterViewModel)
  id: InitAccountAsync(Mix.Identity.Models.AccountViewModels.RegisterViewModel)
  parent: Mix.Tenancy.Domain.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitAccountAsync(RegisterViewModel)
  nameWithType: InitCmsService.InitAccountAsync(RegisterViewModel)
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.InitAccountAsync(Mix.Identity.Models.AccountViewModels.RegisterViewModel)
  type: Method
  source:
    remote:
      path: src/modules/mix.tenancy/Domain/Services/InitCmsService.Account.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitAccountAsync
    path: ../../mix.core/src/modules/mix.tenancy/Domain/Services/InitCmsService.Account.cs
    startLine: 11
  assemblies:
  - mix.tenancy
  namespace: Mix.Tenancy.Domain.Services
  syntax:
    content: public Task<AccessTokenViewModel> InitAccountAsync(RegisterViewModel model)
    parameters:
    - id: model
      type: Mix.Identity.Models.AccountViewModels.RegisterViewModel
    return:
      type: Task{Mix.Lib.Models.AccessTokenViewModel}
    content.vb: Public Function InitAccountAsync(model As RegisterViewModel) As Task(Of AccessTokenViewModel)
  overload: Mix.Tenancy.Domain.Services.InitCmsService.InitAccountAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Tenancy.Domain.Services.InitCmsService.InitDbContext(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  commentId: M:Mix.Tenancy.Domain.Services.InitCmsService.InitDbContext(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  id: InitDbContext(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  parent: Mix.Tenancy.Domain.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitDbContext(InitCmsDto)
  nameWithType: InitCmsService.InitDbContext(InitCmsDto)
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.InitDbContext(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  type: Method
  source:
    remote:
      path: src/modules/mix.tenancy/Domain/Services/InitCmsService.Site.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitDbContext
    path: ../../mix.core/src/modules/mix.tenancy/Domain/Services/InitCmsService.Site.cs
    startLine: 8
  assemblies:
  - mix.tenancy
  namespace: Mix.Tenancy.Domain.Services
  syntax:
    content: public Task InitDbContext(InitCmsDto model)
    parameters:
    - id: model
      type: Mix.Tenancy.Domain.Dtos.InitCmsDto
    return:
      type: Task
    content.vb: Public Function InitDbContext(model As InitCmsDto) As Task
  overload: Mix.Tenancy.Domain.Services.InitCmsService.InitDbContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Tenancy.Domain.Services.InitCmsService.InitTenantAsync(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  commentId: M:Mix.Tenancy.Domain.Services.InitCmsService.InitTenantAsync(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  id: InitTenantAsync(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  parent: Mix.Tenancy.Domain.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitTenantAsync(InitCmsDto)
  nameWithType: InitCmsService.InitTenantAsync(InitCmsDto)
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.InitTenantAsync(Mix.Tenancy.Domain.Dtos.InitCmsDto)
  type: Method
  source:
    remote:
      path: src/modules/mix.tenancy/Domain/Services/InitCmsService.Site.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitTenantAsync
    path: ../../mix.core/src/modules/mix.tenancy/Domain/Services/InitCmsService.Site.cs
    startLine: 18
  assemblies:
  - mix.tenancy
  namespace: Mix.Tenancy.Domain.Services
  syntax:
    content: public Task InitTenantAsync(InitCmsDto model)
    parameters:
    - id: model
      type: Mix.Tenancy.Domain.Dtos.InitCmsDto
    return:
      type: Task
    content.vb: Public Function InitTenantAsync(model As InitCmsDto) As Task
  overload: Mix.Tenancy.Domain.Services.InitCmsService.InitTenantAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Tenancy.Domain.Services.InitCmsService.tenantId
  commentId: F:Mix.Tenancy.Domain.Services.InitCmsService.tenantId
  id: tenantId
  parent: Mix.Tenancy.Domain.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: tenantId
  nameWithType: InitCmsService.tenantId
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.tenantId
  type: Field
  source:
    remote:
      path: src/modules/mix.tenancy/Domain/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: tenantId
    path: ../../mix.core/src/modules/mix.tenancy/Domain/Services/InitCmsService.cs
    startLine: 17
  assemblies:
  - mix.tenancy
  namespace: Mix.Tenancy.Domain.Services
  syntax:
    content: public readonly int tenantId
    return:
      type: System.Int32
    content.vb: Public ReadOnly tenantId As Integer
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Tenancy.Domain.Services.InitCmsService.#ctor(IHttpContextAccessor,Mix.Lib.Services.TenantUserManager,Mix.Lib.Services.MixIdentityService,Mix.Database.Services.DatabaseService,Microsoft.AspNetCore.Identity.RoleManager{Mix.Database.Entities.Account.MixRole},IConfiguration,MixCmsContext,Mix.Lib.Services.MixDataService)
  commentId: M:Mix.Tenancy.Domain.Services.InitCmsService.#ctor(IHttpContextAccessor,Mix.Lib.Services.TenantUserManager,Mix.Lib.Services.MixIdentityService,Mix.Database.Services.DatabaseService,Microsoft.AspNetCore.Identity.RoleManager{Mix.Database.Entities.Account.MixRole},IConfiguration,MixCmsContext,Mix.Lib.Services.MixDataService)
  id: '#ctor(IHttpContextAccessor,Mix.Lib.Services.TenantUserManager,Mix.Lib.Services.MixIdentityService,Mix.Database.Services.DatabaseService,Microsoft.AspNetCore.Identity.RoleManager{Mix.Database.Entities.Account.MixRole},IConfiguration,MixCmsContext,Mix.Lib.Services.MixDataService)'
  parent: Mix.Tenancy.Domain.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitCmsService(IHttpContextAccessor, TenantUserManager, MixIdentityService, DatabaseService, RoleManager<MixRole>, IConfiguration, MixCmsContext, MixDataService)
  nameWithType: InitCmsService.InitCmsService(IHttpContextAccessor, TenantUserManager, MixIdentityService, DatabaseService, RoleManager<MixRole>, IConfiguration, MixCmsContext, MixDataService)
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.InitCmsService(IHttpContextAccessor, Mix.Lib.Services.TenantUserManager, Mix.Lib.Services.MixIdentityService, Mix.Database.Services.DatabaseService, Microsoft.AspNetCore.Identity.RoleManager<Mix.Database.Entities.Account.MixRole>, IConfiguration, MixCmsContext, Mix.Lib.Services.MixDataService)
  type: Constructor
  source:
    remote:
      path: src/modules/mix.tenancy/Domain/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/modules/mix.tenancy/Domain/Services/InitCmsService.cs
    startLine: 18
  assemblies:
  - mix.tenancy
  namespace: Mix.Tenancy.Domain.Services
  syntax:
    content: public InitCmsService(IHttpContextAccessor httpContextAccessor, TenantUserManager userManager, MixIdentityService identityService, DatabaseService databaseService, RoleManager<MixRole> roleManager, IConfiguration configuration, MixCmsContext context, MixDataService mixDataService)
    parameters:
    - id: httpContextAccessor
      type: IHttpContextAccessor
    - id: userManager
      type: Mix.Lib.Services.TenantUserManager
    - id: identityService
      type: Mix.Lib.Services.MixIdentityService
    - id: databaseService
      type: Mix.Database.Services.DatabaseService
    - id: roleManager
      type: Microsoft.AspNetCore.Identity.RoleManager{Mix.Database.Entities.Account.MixRole}
    - id: configuration
      type: IConfiguration
    - id: context
      type: MixCmsContext
    - id: mixDataService
      type: Mix.Lib.Services.MixDataService
    content.vb: Public Sub New(httpContextAccessor As IHttpContextAccessor, userManager As TenantUserManager, identityService As MixIdentityService, databaseService As DatabaseService, roleManager As RoleManager(Of MixRole), configuration As IConfiguration, context As MixCmsContext, mixDataService As MixDataService)
  overload: Mix.Tenancy.Domain.Services.InitCmsService.#ctor*
  nameWithType.vb: InitCmsService.InitCmsService(IHttpContextAccessor, TenantUserManager, MixIdentityService, DatabaseService, RoleManager(Of MixRole), IConfiguration, MixCmsContext, MixDataService)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Tenancy.Domain.Services.InitCmsService.InitCmsService(IHttpContextAccessor, Mix.Lib.Services.TenantUserManager, Mix.Lib.Services.MixIdentityService, Mix.Database.Services.DatabaseService, Microsoft.AspNetCore.Identity.RoleManager(Of Mix.Database.Entities.Account.MixRole), IConfiguration, MixCmsContext, Mix.Lib.Services.MixDataService)
  name.vb: InitCmsService(IHttpContextAccessor, TenantUserManager, MixIdentityService, DatabaseService, RoleManager(Of MixRole), IConfiguration, MixCmsContext, MixDataService)
references:
- uid: Mix.Tenancy.Domain.Services
  commentId: N:Mix.Tenancy.Domain.Services
  name: Mix.Tenancy.Domain.Services
  nameWithType: Mix.Tenancy.Domain.Services
  fullName: Mix.Tenancy.Domain.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Tenancy.Domain.Services.InitCmsService.InitAccountAsync*
  commentId: Overload:Mix.Tenancy.Domain.Services.InitCmsService.InitAccountAsync
  name: InitAccountAsync
  nameWithType: InitCmsService.InitAccountAsync
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.InitAccountAsync
- uid: Mix.Identity.Models.AccountViewModels.RegisterViewModel
  commentId: T:Mix.Identity.Models.AccountViewModels.RegisterViewModel
  parent: Mix.Identity.Models.AccountViewModels
  name: RegisterViewModel
  nameWithType: RegisterViewModel
  fullName: Mix.Identity.Models.AccountViewModels.RegisterViewModel
- uid: Task{Mix.Lib.Models.AccessTokenViewModel}
  commentId: '!:Task{Mix.Lib.Models.AccessTokenViewModel}'
  definition: Task`1
  name: Task<AccessTokenViewModel>
  nameWithType: Task<AccessTokenViewModel>
  fullName: Task<Mix.Lib.Models.AccessTokenViewModel>
  nameWithType.vb: Task(Of AccessTokenViewModel)
  fullName.vb: Task(Of Mix.Lib.Models.AccessTokenViewModel)
  name.vb: Task(Of AccessTokenViewModel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Lib.Models.AccessTokenViewModel
    name: AccessTokenViewModel
    nameWithType: AccessTokenViewModel
    fullName: Mix.Lib.Models.AccessTokenViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Lib.Models.AccessTokenViewModel
    name: AccessTokenViewModel
    nameWithType: AccessTokenViewModel
    fullName: Mix.Lib.Models.AccessTokenViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Identity.Models.AccountViewModels
  commentId: N:Mix.Identity.Models.AccountViewModels
  name: Mix.Identity.Models.AccountViewModels
  nameWithType: Mix.Identity.Models.AccountViewModels
  fullName: Mix.Identity.Models.AccountViewModels
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Tenancy.Domain.Services.InitCmsService.InitDbContext*
  commentId: Overload:Mix.Tenancy.Domain.Services.InitCmsService.InitDbContext
  name: InitDbContext
  nameWithType: InitCmsService.InitDbContext
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.InitDbContext
- uid: Mix.Tenancy.Domain.Dtos.InitCmsDto
  commentId: T:Mix.Tenancy.Domain.Dtos.InitCmsDto
  parent: Mix.Tenancy.Domain.Dtos
  name: InitCmsDto
  nameWithType: InitCmsDto
  fullName: Mix.Tenancy.Domain.Dtos.InitCmsDto
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Mix.Tenancy.Domain.Dtos
  commentId: N:Mix.Tenancy.Domain.Dtos
  name: Mix.Tenancy.Domain.Dtos
  nameWithType: Mix.Tenancy.Domain.Dtos
  fullName: Mix.Tenancy.Domain.Dtos
- uid: Mix.Tenancy.Domain.Services.InitCmsService.InitTenantAsync*
  commentId: Overload:Mix.Tenancy.Domain.Services.InitCmsService.InitTenantAsync
  name: InitTenantAsync
  nameWithType: InitCmsService.InitTenantAsync
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.InitTenantAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Mix.Tenancy.Domain.Services.InitCmsService.#ctor*
  commentId: Overload:Mix.Tenancy.Domain.Services.InitCmsService.#ctor
  name: InitCmsService
  nameWithType: InitCmsService.InitCmsService
  fullName: Mix.Tenancy.Domain.Services.InitCmsService.InitCmsService
- uid: IHttpContextAccessor
  isExternal: true
  name: IHttpContextAccessor
  nameWithType: IHttpContextAccessor
  fullName: IHttpContextAccessor
- uid: Mix.Lib.Services.TenantUserManager
  commentId: T:Mix.Lib.Services.TenantUserManager
  parent: Mix.Lib.Services
  name: TenantUserManager
  nameWithType: TenantUserManager
  fullName: Mix.Lib.Services.TenantUserManager
- uid: Mix.Lib.Services.MixIdentityService
  commentId: T:Mix.Lib.Services.MixIdentityService
  parent: Mix.Lib.Services
  name: MixIdentityService
  nameWithType: MixIdentityService
  fullName: Mix.Lib.Services.MixIdentityService
- uid: Mix.Database.Services.DatabaseService
  commentId: T:Mix.Database.Services.DatabaseService
  parent: Mix.Database.Services
  name: DatabaseService
  nameWithType: DatabaseService
  fullName: Mix.Database.Services.DatabaseService
- uid: Microsoft.AspNetCore.Identity.RoleManager{Mix.Database.Entities.Account.MixRole}
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager{Mix.Database.Entities.Account.MixRole}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.RoleManager`1
  name: RoleManager<MixRole>
  nameWithType: RoleManager<MixRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Mix.Database.Entities.Account.MixRole>
  nameWithType.vb: RoleManager(Of MixRole)
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Mix.Database.Entities.Account.MixRole)
  name.vb: RoleManager(Of MixRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Database.Entities.Account.MixRole
    name: MixRole
    nameWithType: MixRole
    fullName: Mix.Database.Entities.Account.MixRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Database.Entities.Account.MixRole
    name: MixRole
    nameWithType: MixRole
    fullName: Mix.Database.Entities.Account.MixRole
  - name: )
    nameWithType: )
    fullName: )
- uid: IConfiguration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: IConfiguration
- uid: MixCmsContext
  isExternal: true
  name: MixCmsContext
  nameWithType: MixCmsContext
  fullName: MixCmsContext
- uid: Mix.Lib.Services.MixDataService
  commentId: T:Mix.Lib.Services.MixDataService
  parent: Mix.Lib.Services
  name: MixDataService
  nameWithType: MixDataService
  fullName: Mix.Lib.Services.MixDataService
- uid: Mix.Lib.Services
  commentId: N:Mix.Lib.Services
  name: Mix.Lib.Services
  nameWithType: Mix.Lib.Services
  fullName: Mix.Lib.Services
- uid: Mix.Database.Services
  commentId: N:Mix.Database.Services
  name: Mix.Database.Services
  nameWithType: Mix.Database.Services
  fullName: Mix.Database.Services
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: true
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: true
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
