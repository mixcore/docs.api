### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  id: InitCmsViewModel
  parent: Mix.Cms.Lib.ViewModels.MixInit
  children:
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.#ctor
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.ConnectionString
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Culture
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseName
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePassword
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePort
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseProvider
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseServer
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseUser
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.IsUseLocal
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Lang
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.LocalDbConnectionString
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SiteName
  - Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SqliteDbConnectionString
  langs:
  - csharp
  - vb
  name: InitCmsViewModel
  nameWithType: InitCmsViewModel
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  type: Class
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitCmsViewModel
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 5
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: public class InitCmsViewModel
    content.vb: Public Class InitCmsViewModel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.ConnectionString
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.ConnectionString
  id: ConnectionString
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: InitCmsViewModel.ConnectionString
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.ConnectionString
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ConnectionString
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 9
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("connectionString")]

      public string ConnectionString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("connectionString")>

      Public ReadOnly Property ConnectionString As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.ConnectionString*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: connectionString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseServer
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseServer
  id: DatabaseServer
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: DatabaseServer
  nameWithType: InitCmsViewModel.DatabaseServer
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseServer
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DatabaseServer
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 37
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("databaseServer")]

      public string DatabaseServer { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("databaseServer")>

      Public Property DatabaseServer As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseServer*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: databaseServer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePort
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePort
  id: DatabasePort
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: DatabasePort
  nameWithType: InitCmsViewModel.DatabasePort
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePort
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DatabasePort
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 40
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("databasePort")]

      public string DatabasePort { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("databasePort")>

      Public Property DatabasePort As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePort*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: databasePort
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseName
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseName
  id: DatabaseName
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: DatabaseName
  nameWithType: InitCmsViewModel.DatabaseName
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseName
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DatabaseName
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 43
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("databaseName")]

      public string DatabaseName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("databaseName")>

      Public Property DatabaseName As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseName*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: databaseName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseUser
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseUser
  id: DatabaseUser
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: DatabaseUser
  nameWithType: InitCmsViewModel.DatabaseUser
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseUser
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DatabaseUser
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 46
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("databaseUser")]

      public string DatabaseUser { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("databaseUser")>

      Public Property DatabaseUser As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseUser*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: databaseUser
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePassword
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePassword
  id: DatabasePassword
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: DatabasePassword
  nameWithType: InitCmsViewModel.DatabasePassword
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePassword
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DatabasePassword
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 49
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("databasePassword")]

      public string DatabasePassword { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("databasePassword")>

      Public Property DatabasePassword As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePassword*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: databasePassword
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.IsUseLocal
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.IsUseLocal
  id: IsUseLocal
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: IsUseLocal
  nameWithType: InitCmsViewModel.IsUseLocal
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.IsUseLocal
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IsUseLocal
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 52
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("isUseLocal")]

      public bool IsUseLocal { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonProperty("isUseLocal")>

      Public Property IsUseLocal As Boolean
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.IsUseLocal*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: isUseLocal
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.LocalDbConnectionString
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.LocalDbConnectionString
  id: LocalDbConnectionString
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: LocalDbConnectionString
  nameWithType: InitCmsViewModel.LocalDbConnectionString
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.LocalDbConnectionString
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: LocalDbConnectionString
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 55
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("localDbConnectionString")]

      public string LocalDbConnectionString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("localDbConnectionString")>

      Public Property LocalDbConnectionString As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.LocalDbConnectionString*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: localDbConnectionString
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SqliteDbConnectionString
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SqliteDbConnectionString
  id: SqliteDbConnectionString
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: SqliteDbConnectionString
  nameWithType: InitCmsViewModel.SqliteDbConnectionString
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SqliteDbConnectionString
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SqliteDbConnectionString
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 59
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("sqliteDbConnectionString")]

      public string SqliteDbConnectionString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("sqliteDbConnectionString")>

      Public Property SqliteDbConnectionString As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SqliteDbConnectionString*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: sqliteDbConnectionString
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Lang
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Lang
  id: Lang
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: Lang
  nameWithType: InitCmsViewModel.Lang
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Lang
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Lang
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 62
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("lang")]

      public string Lang { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("lang")>

      Public Property Lang As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Lang*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: lang
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseProvider
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseProvider
  id: DatabaseProvider
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: DatabaseProvider
  nameWithType: InitCmsViewModel.DatabaseProvider
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseProvider
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DatabaseProvider
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 65
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("databaseProvider")]

      public MixDatabaseProvider DatabaseProvider { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.Enums.MixDatabaseProvider
    content.vb: >-
      <JsonProperty("databaseProvider")>

      Public Property DatabaseProvider As MixDatabaseProvider
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseProvider*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: databaseProvider
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Culture
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Culture
  id: Culture
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: Culture
  nameWithType: InitCmsViewModel.Culture
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Culture
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Culture
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 68
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("culture")]

      public InitCulture Culture { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.ViewModels.InitCulture
    content.vb: >-
      <JsonProperty("culture")>

      Public Property Culture As InitCulture
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Culture*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: culture
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SiteName
  commentId: P:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SiteName
  id: SiteName
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: SiteName
  nameWithType: InitCmsViewModel.SiteName
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SiteName
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SiteName
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 71
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: >-
      [JsonProperty("siteName")]

      public string SiteName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("siteName")>

      Public Property SiteName As String
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SiteName*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: siteName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.#ctor
  commentId: M:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.#ctor
  id: '#ctor'
  parent: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel
  langs:
  - csharp
  - vb
  name: InitCmsViewModel()
  nameWithType: InitCmsViewModel.InitCmsViewModel()
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.InitCmsViewModel()
  type: Constructor
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/Init/InitCmsViewModel.cs
    startLine: 76
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixInit
  syntax:
    content: public InitCmsViewModel()
    content.vb: Public Sub New
  overload: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Mix.Cms.Lib.ViewModels.MixInit
  commentId: N:Mix.Cms.Lib.ViewModels.MixInit
  name: Mix.Cms.Lib.ViewModels.MixInit
  nameWithType: Mix.Cms.Lib.ViewModels.MixInit
  fullName: Mix.Cms.Lib.ViewModels.MixInit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.ConnectionString*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.ConnectionString
  name: ConnectionString
  nameWithType: InitCmsViewModel.ConnectionString
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.ConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseServer*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseServer
  name: DatabaseServer
  nameWithType: InitCmsViewModel.DatabaseServer
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseServer
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePort*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePort
  name: DatabasePort
  nameWithType: InitCmsViewModel.DatabasePort
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePort
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseName*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseName
  name: DatabaseName
  nameWithType: InitCmsViewModel.DatabaseName
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseName
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseUser*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseUser
  name: DatabaseUser
  nameWithType: InitCmsViewModel.DatabaseUser
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseUser
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePassword*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePassword
  name: DatabasePassword
  nameWithType: InitCmsViewModel.DatabasePassword
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabasePassword
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.IsUseLocal*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.IsUseLocal
  name: IsUseLocal
  nameWithType: InitCmsViewModel.IsUseLocal
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.IsUseLocal
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.LocalDbConnectionString*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.LocalDbConnectionString
  name: LocalDbConnectionString
  nameWithType: InitCmsViewModel.LocalDbConnectionString
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.LocalDbConnectionString
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SqliteDbConnectionString*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SqliteDbConnectionString
  name: SqliteDbConnectionString
  nameWithType: InitCmsViewModel.SqliteDbConnectionString
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SqliteDbConnectionString
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Lang*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Lang
  name: Lang
  nameWithType: InitCmsViewModel.Lang
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Lang
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseProvider*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseProvider
  name: DatabaseProvider
  nameWithType: InitCmsViewModel.DatabaseProvider
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.DatabaseProvider
- uid: Mix.Cms.Lib.Enums.MixDatabaseProvider
  commentId: T:Mix.Cms.Lib.Enums.MixDatabaseProvider
  parent: Mix.Cms.Lib.Enums
  name: MixDatabaseProvider
  nameWithType: MixDatabaseProvider
  fullName: Mix.Cms.Lib.Enums.MixDatabaseProvider
- uid: Mix.Cms.Lib.Enums
  commentId: N:Mix.Cms.Lib.Enums
  name: Mix.Cms.Lib.Enums
  nameWithType: Mix.Cms.Lib.Enums
  fullName: Mix.Cms.Lib.Enums
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Culture*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Culture
  name: Culture
  nameWithType: InitCmsViewModel.Culture
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.Culture
- uid: Mix.Cms.Lib.ViewModels.InitCulture
  commentId: T:Mix.Cms.Lib.ViewModels.InitCulture
  parent: Mix.Cms.Lib.ViewModels
  name: InitCulture
  nameWithType: InitCulture
  fullName: Mix.Cms.Lib.ViewModels.InitCulture
- uid: Mix.Cms.Lib.ViewModels
  commentId: N:Mix.Cms.Lib.ViewModels
  name: Mix.Cms.Lib.ViewModels
  nameWithType: Mix.Cms.Lib.ViewModels
  fullName: Mix.Cms.Lib.ViewModels
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SiteName*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SiteName
  name: SiteName
  nameWithType: InitCmsViewModel.SiteName
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.SiteName
- uid: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.#ctor*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.#ctor
  name: InitCmsViewModel
  nameWithType: InitCmsViewModel.InitCmsViewModel
  fullName: Mix.Cms.Lib.ViewModels.MixInit.InitCmsViewModel.InitCmsViewModel
