### YamlMime:ManagedReference
items:
- uid: Mix.Heart.Repository.ViewQueryRepository`4
  commentId: T:Mix.Heart.Repository.ViewQueryRepository`4
  id: ViewQueryRepository`4
  parent: Mix.Heart.Repository
  children:
  - Mix.Heart.Repository.ViewQueryRepository`4.#ctor(`0)
  - Mix.Heart.Repository.ViewQueryRepository`4.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  - Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
  - Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename
  - Mix.Heart.Repository.ViewQueryRepository`4.CacheService
  - Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
  - Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
  - Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
  - Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
  - Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  - Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  - Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
  - Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
  - Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
  - Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers
  - Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  - Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers
  - Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
  - Mix.Heart.Repository.ViewQueryRepository`4.Table
  - Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
  - Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  langs:
  - csharp
  - vb
  name: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>
  type: Class
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: ViewQueryRepository
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 19
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: 'public class ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView> : RepositoryBase<TDbContext>, IRepositoryBase<TDbContext>, IDisposable where TDbContext : DbContext where TEntity : class, IEntity<TPrimaryKey> where TPrimaryKey : IComparable where TView : ViewModelBase<TDbContext, TEntity, TPrimaryKey, TView>'
    typeParameters:
    - id: TDbContext
    - id: TEntity
    - id: TPrimaryKey
    - id: TView
    content.vb: >-
      Public Class ViewQueryRepository(Of TDbContext As DbContext, TEntity As {Class, IEntity(Of TPrimaryKey)}, TPrimaryKey As IComparable, TView As ViewModelBase(Of TDbContext, TEntity, TPrimaryKey, TView))
          Inherits RepositoryBase(Of TDbContext)
          Implements IRepositoryBase(Of TDbContext), IDisposable
  inheritance:
  - System.Object
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  derivedClasses:
  - Mix.Heart.Repository.Repository`4
  implements:
  - Mix.Heart.Repository.IRepositoryBase{{TDbContext}}
  - System.IDisposable
  inheritedMembers:
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.UowInfo
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Context
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.BeginUow
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CloseUowAsync
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CompleteUowAsync
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleExceptionAsync(System.Exception)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleException(System.Exception,System.String,System.String,System.Int32)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Dispose
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
  name.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.#ctor(`0)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.#ctor(`0)
  id: '#ctor(`0)'
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: ViewQueryRepository(TDbContext)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ViewQueryRepository(TDbContext)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ViewQueryRepository(TDbContext)
  type: Constructor
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: .ctor
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 26
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public ViewQueryRepository(TDbContext dbContext)
    parameters:
    - id: dbContext
      type: '{TDbContext}'
    content.vb: Public Sub New(dbContext As TDbContext)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.#ctor*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ViewQueryRepository(TDbContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ViewQueryRepository(TDbContext)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  id: '#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)'
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: ViewQueryRepository(UnitOfWorkInfo)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ViewQueryRepository(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ViewQueryRepository(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  type: Constructor
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: .ctor
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 32
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public ViewQueryRepository(UnitOfWorkInfo unitOfWorkInfo)
    parameters:
    - id: unitOfWorkInfo
      type: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    content.vb: Public Sub New(unitOfWorkInfo As UnitOfWorkInfo)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.#ctor*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ViewQueryRepository(UnitOfWorkInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ViewQueryRepository(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CacheService
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.CacheService
  id: CacheService
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: CacheService
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheService
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheService
  type: Property
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: CacheService
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 38
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected MixCacheService CacheService { get; set; }
    parameters: []
    return:
      type: Mix.Heart.Services.MixCacheService
    content.vb: Protected Property CacheService As MixCacheService
  overload: Mix.Heart.Repository.ViewQueryRepository`4.CacheService*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheService
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheService
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename
  id: CacheFilename
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: CacheFilename
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheFilename
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheFilename
  type: Property
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: CacheFilename
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 40
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public string CacheFilename { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property CacheFilename As String
  overload: Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheFilename
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheFilename
- uid: Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers
  id: SelectedMembers
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: SelectedMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SelectedMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SelectedMembers
  type: Property
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: SelectedMembers
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 42
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public string[] SelectedMembers { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property SelectedMembers As String()
  overload: Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SelectedMembers
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SelectedMembers
- uid: Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers
  id: KeyMembers
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: KeyMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.KeyMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.KeyMembers
  type: Property
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: KeyMembers
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 44
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected string[] KeyMembers { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Protected ReadOnly Property KeyMembers As String()
  overload: Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).KeyMembers
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).KeyMembers
- uid: Mix.Heart.Repository.ViewQueryRepository`4.Table
  commentId: P:Mix.Heart.Repository.ViewQueryRepository`4.Table
  id: Table
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: Table
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.Table
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.Table
  type: Property
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: Table
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 46
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected DbSet<TEntity> Table { get; }
    parameters: []
    return:
      type: DbSet{{TEntity}}
    content.vb: Protected ReadOnly Property Table As DbSet(Of TEntity)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.Table*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).Table
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).Table
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetListQuery(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetListQuery
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 50
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public IQueryable<TEntity> GetListQuery(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Linq.IQueryable{{TEntity}}
    content.vb: Public Function GetListQuery(predicate As Expression(Of Func(Of TEntity, Boolean))) As IQueryable(Of TEntity)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  id: GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetPagingQuery
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 55
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public IQueryable<TEntity> GetPagingQuery(Expression<Func<TEntity, bool>> predicate, PagingModel paging)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: paging
      type: Mix.Heart.Models.PagingModel
    return:
      type: System.Linq.IQueryable{{TEntity}}
    content.vb: Public Function GetPagingQuery(predicate As Expression(Of Func(Of TEntity, Boolean)), paging As PagingModel) As IQueryable(Of TEntity)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync(`2)
  id: GetEntityByIdAsync(`2)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetEntityByIdAsync(TPrimaryKey)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync(TPrimaryKey)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetEntityByIdAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 80
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<TEntity> GetEntityByIdAsync(TPrimaryKey id)
    parameters:
    - id: id
      type: '{TPrimaryKey}'
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Overridable Function GetEntityByIdAsync(id As TPrimaryKey) As Task(Of TEntity)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync(TPrimaryKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync(TPrimaryKey)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers(System.String[])
  id: SetSelectedMembers(System.String[])
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: SetSelectedMembers(String[])
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers(String[])
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers(System.String[])
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: SetSelectedMembers
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 87
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public void SetSelectedMembers(string[] selectMembers)
    parameters:
    - id: selectMembers
      type: System.String[]
    content.vb: Public Sub SetSelectedMembers(selectMembers As String())
  overload: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers(System.String())
  name.vb: SetSelectedMembers(String())
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(`1)
  id: CheckIsExistsAsync(`1)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: CheckIsExistsAsync(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: CheckIsExistsAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 104
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<bool> CheckIsExistsAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Overridable Function CheckIsExistsAsync(entity As TEntity) As Task(Of Boolean)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(TEntity)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: CheckIsExistsAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: CheckIsExistsAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: CheckIsExistsAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 109
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<bool> CheckIsExistsAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Overridable Function CheckIsExistsAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task(Of Boolean)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: CheckIsExistsAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(`2)
  id: GetSingleAsync(`2)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetSingleAsync(TPrimaryKey)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(TPrimaryKey)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetSingleAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 116
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<TView> GetSingleAsync(TPrimaryKey id)
    parameters:
    - id: id
      type: '{TPrimaryKey}'
    return:
      type: System.Threading.Tasks.Task{{TView}}
    content.vb: Public Overridable Function GetSingleAsync(id As TPrimaryKey) As Task(Of TView)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(TPrimaryKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(TPrimaryKey)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetSingleAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 136
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<TView> GetSingleAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task{{TView}}
    content.vb: Public Overridable Function GetSingleAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task(Of TView)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetFirstAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 149
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<TView> GetFirstAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task{{TView}}
    content.vb: Public Overridable Function GetFirstAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task(Of TView)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: GetListAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetListAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetListAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 161
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<List<TView>> GetListAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TView}}}
    content.vb: Public Overridable Function GetListAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task(Of List(Of TView))
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetListAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: GetAllAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetAllAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetAllAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 168
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<List<TView>> GetAllAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TView}}}
    content.vb: Public Overridable Function GetAllAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task(Of List(Of TView))
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetAllAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  id: GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetPagingAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetPagingAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 176
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<PagingResponseModel<TView>> GetPagingAsync(Expression<Func<TEntity, bool>> predicate, PagingModel paging)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: paging
      type: Mix.Heart.Models.PagingModel
    return:
      type: System.Threading.Tasks.Task{Mix.Heart.Models.PagingResponseModel{{TView}}}
    content.vb: Public Overridable Function GetPagingAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), paging As PagingModel) As Task(Of PagingResponseModel(Of TView))
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel(`1)
  id: BuildViewModel(`1)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: BuildViewModel(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: BuildViewModel
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 196
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected virtual Task<TView> BuildViewModel(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task{{TView}}
    content.vb: Protected Overridable Function BuildViewModel(entity As TEntity) As Task(Of TView)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel(TEntity)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel(TEntity)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync(System.Linq.IQueryable{`1})
  id: ToListViewModelAsync(System.Linq.IQueryable{`1})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: ToListViewModelAsync(IQueryable<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync(IQueryable<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: ToListViewModelAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 202
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public Task<List<TView>> ToListViewModelAsync(IQueryable<TEntity> source)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TView}}}
    content.vb: Public Function ToListViewModelAsync(source As IQueryable(Of TEntity)) As Task(Of List(Of TView))
  overload: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync(IQueryable(Of TEntity))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync(System.Linq.IQueryable(Of TEntity))
  name.vb: ToListViewModelAsync(IQueryable(Of TEntity))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  id: ToPagingViewModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: ToPagingViewModelAsync(IQueryable<TEntity>, PagingModel, MixCacheService)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync(IQueryable<TEntity>, PagingModel, MixCacheService)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync(System.Linq.IQueryable<TEntity>, Mix.Heart.Models.PagingModel, Mix.Heart.Services.MixCacheService)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: ToPagingViewModelAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 218
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected Task<PagingResponseModel<TView>> ToPagingViewModelAsync(IQueryable<TEntity> source, PagingModel pagingData, MixCacheService cacheService = null)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    - id: pagingData
      type: Mix.Heart.Models.PagingModel
    - id: cacheService
      type: Mix.Heart.Services.MixCacheService
    return:
      type: System.Threading.Tasks.Task{Mix.Heart.Models.PagingResponseModel{{TView}}}
    content.vb: Protected Function ToPagingViewModelAsync(source As IQueryable(Of TEntity), pagingData As PagingModel, cacheService As MixCacheService = Nothing) As Task(Of PagingResponseModel(Of TView))
  overload: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync(IQueryable(Of TEntity), PagingModel, MixCacheService)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync(System.Linq.IQueryable(Of TEntity), Mix.Heart.Models.PagingModel, Mix.Heart.Services.MixCacheService)
  name.vb: ToPagingViewModelAsync(IQueryable(Of TEntity), PagingModel, MixCacheService)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetEntities(System.Linq.IQueryable{`1})
  id: GetEntities(System.Linq.IQueryable{`1})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetEntities(IQueryable<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities(IQueryable<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetEntities
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 236
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected Task<List<TEntity>> GetEntities(IQueryable<TEntity> source)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TEntity}}}
    content.vb: Protected Function GetEntities(source As IQueryable(Of TEntity)) As Task(Of List(Of TEntity))
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities(IQueryable(Of TEntity))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities(System.Linq.IQueryable(Of TEntity))
  name.vb: GetEntities(IQueryable(Of TEntity))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  id: ParseEntitiesAsync(System.Collections.Generic.List{`1})
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: ParseEntitiesAsync(List<TEntity>)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync(List<TEntity>)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync(System.Collections.Generic.List<TEntity>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: ParseEntitiesAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 241
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected Task<List<TView>> ParseEntitiesAsync(List<TEntity> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.List{{TEntity}}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TView}}}
    content.vb: Protected Function ParseEntitiesAsync(entities As List(Of TEntity)) As Task(Of List(Of TView))
  overload: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync(List(Of TEntity))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync(System.Collections.Generic.List(Of TEntity))
  name.vb: ParseEntitiesAsync(List(Of TEntity))
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync(`1)
  id: GetSingleViewAsync(`1)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetSingleViewAsync(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetSingleViewAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 253
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected Task<TView> GetSingleViewAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task{{TView}}
    content.vb: Protected Function GetSingleViewAsync(entity As TEntity) As Task(Of TView)
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync(TEntity)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync(TEntity)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel(`1)
  id: GetViewModel(`1)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetViewModel(TEntity)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel(TEntity)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetViewModel
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 280
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected TView GetViewModel(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: '{TView}'
    content.vb: Protected Function GetViewModel(entity As TEntity) As TView
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel(TEntity)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel(TEntity)
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
  commentId: M:Mix.Heart.Repository.ViewQueryRepository`4.GetLambda(System.String,System.Boolean)
  id: GetLambda(System.String,System.Boolean)
  parent: Mix.Heart.Repository.ViewQueryRepository`4
  langs:
  - csharp
  - vb
  name: GetLambda(String, Boolean)
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda(String, Boolean)
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/ViewQueryRepository.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetLambda
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/ViewQueryRepository.cs
    startLine: 289
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected LambdaExpression GetLambda(string propName, bool isGetDefault = true)
    parameters:
    - id: propName
      type: System.String
    - id: isGetDefault
      type: System.Boolean
    return:
      type: System.Linq.Expressions.LambdaExpression
    content.vb: Protected Function GetLambda(propName As String, isGetDefault As Boolean = True) As LambdaExpression
  overload: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda*
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda(String, Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda(System.String, System.Boolean)
references:
- uid: Mix.Heart.Repository
  commentId: N:Mix.Heart.Repository
  name: Mix.Heart.Repository
  nameWithType: Mix.Heart.Repository
  fullName: Mix.Heart.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  commentId: T:Mix.Heart.Repository.RepositoryBase{`0}
  parent: Mix.Heart.Repository
  definition: Mix.Heart.Repository.RepositoryBase`1
  name: RepositoryBase<TDbContext>
  nameWithType: RepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>
  nameWithType.vb: RepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext)
  name.vb: RepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.IRepositoryBase{{TDbContext}}
  commentId: T:Mix.Heart.Repository.IRepositoryBase{`0}
  parent: Mix.Heart.Repository
  definition: Mix.Heart.Repository.IRepositoryBase`1
  name: IRepositoryBase<TDbContext>
  nameWithType: IRepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.IRepositoryBase<TDbContext>
  nameWithType.vb: IRepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.IRepositoryBase(Of TDbContext)
  name.vb: IRepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.UowInfo
  commentId: P:Mix.Heart.Repository.RepositoryBase{`0}.UowInfo
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.UowInfo
  name: UowInfo
  nameWithType: RepositoryBase<TDbContext>.UowInfo
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.UowInfo
  nameWithType.vb: RepositoryBase(Of TDbContext).UowInfo
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).UowInfo
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Context
  commentId: P:Mix.Heart.Repository.RepositoryBase{`0}.Context
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.Context
  name: Context
  nameWithType: RepositoryBase<TDbContext>.Context
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Context
  nameWithType.vb: RepositoryBase(Of TDbContext).Context
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Context
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  name: SetUowInfo(UnitOfWorkInfo)
  nameWithType: RepositoryBase<TDbContext>.SetUowInfo(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  nameWithType.vb: RepositoryBase(Of TDbContext).SetUowInfo(UnitOfWorkInfo)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase<TDbContext>.SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase(Of TDbContext).SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.BeginUow
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.BeginUow
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.BeginUow
  name: BeginUow()
  nameWithType: RepositoryBase<TDbContext>.BeginUow()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow()
  nameWithType.vb: RepositoryBase(Of TDbContext).BeginUow()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase<TDbContext>.BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase(Of TDbContext).BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CloseUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.CloseUowAsync
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  name: CloseUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CloseUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CloseUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase<TDbContext>.CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CompleteUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.CompleteUowAsync
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  name: CompleteUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CompleteUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleExceptionAsync(System.Exception)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.HandleExceptionAsync(System.Exception)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  name: HandleExceptionAsync(Exception)
  nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync(Exception)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync(System.Exception)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleExceptionAsync(Exception)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync(System.Exception)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase(Of TDbContext).HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleException(System.Exception,System.String,System.String,System.Int32)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.HandleException(System.Exception,System.String,System.String,System.Int32)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  name: HandleException(Exception, String, String, Int32)
  nameWithType: RepositoryBase<TDbContext>.HandleException(Exception, String, String, Int32)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException(System.Exception, System.String, System.String, System.Int32)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleException(Exception, String, String, Int32)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException(System.Exception, System.String, System.String, System.Int32)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase<TDbContext>.HandleException
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase(Of TDbContext).HandleException
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Dispose
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.Dispose
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.Dispose
  name: Dispose()
  nameWithType: RepositoryBase<TDbContext>.Dispose()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose()
  nameWithType.vb: RepositoryBase(Of TDbContext).Dispose()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase<TDbContext>.Dispose
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase(Of TDbContext).Dispose
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Heart.Repository.RepositoryBase`1
  commentId: T:Mix.Heart.Repository.RepositoryBase`1
  name: RepositoryBase<TDbContext>
  nameWithType: RepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>
  nameWithType.vb: RepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext)
  name.vb: RepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.IRepositoryBase`1
  commentId: T:Mix.Heart.Repository.IRepositoryBase`1
  name: IRepositoryBase<TDbContext>
  nameWithType: IRepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.IRepositoryBase<TDbContext>
  nameWithType.vb: IRepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.IRepositoryBase(Of TDbContext)
  name.vb: IRepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.UowInfo
  commentId: P:Mix.Heart.Repository.RepositoryBase`1.UowInfo
  name: UowInfo
  nameWithType: RepositoryBase<TDbContext>.UowInfo
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.UowInfo
  nameWithType.vb: RepositoryBase(Of TDbContext).UowInfo
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).UowInfo
- uid: Mix.Heart.Repository.RepositoryBase`1.Context
  commentId: P:Mix.Heart.Repository.RepositoryBase`1.Context
  name: Context
  nameWithType: RepositoryBase<TDbContext>.Context
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Context
  nameWithType.vb: RepositoryBase(Of TDbContext).Context
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Context
- uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  name: SetUowInfo(UnitOfWorkInfo)
  nameWithType: RepositoryBase<TDbContext>.SetUowInfo(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  nameWithType.vb: RepositoryBase(Of TDbContext).SetUowInfo(UnitOfWorkInfo)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase<TDbContext>.SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase(Of TDbContext).SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.BeginUow
  name: BeginUow()
  nameWithType: RepositoryBase<TDbContext>.BeginUow()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow()
  nameWithType.vb: RepositoryBase(Of TDbContext).BeginUow()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase<TDbContext>.BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase(Of TDbContext).BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  name: CloseUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CloseUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CloseUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase<TDbContext>.CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  name: CompleteUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CompleteUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  isExternal: true
  name: HandleExceptionAsync(Exception)
  nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync(Exception)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync(System.Exception)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleExceptionAsync(Exception)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync(System.Exception)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase(Of TDbContext).HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  isExternal: true
  name: HandleException(Exception, String, String, Int32)
  nameWithType: RepositoryBase<TDbContext>.HandleException(Exception, String, String, Int32)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException(System.Exception, System.String, System.String, System.Int32)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleException(Exception, String, String, Int32)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException(System.Exception, System.String, System.String, System.Int32)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase<TDbContext>.HandleException
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase(Of TDbContext).HandleException
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.Dispose
  name: Dispose()
  nameWithType: RepositoryBase<TDbContext>.Dispose()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose()
  nameWithType.vb: RepositoryBase(Of TDbContext).Dispose()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase<TDbContext>.Dispose
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase(Of TDbContext).Dispose
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.#ctor*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.#ctor
  name: ViewQueryRepository
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ViewQueryRepository
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ViewQueryRepository
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ViewQueryRepository
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ViewQueryRepository
- uid: '{TDbContext}'
  commentId: '!:TDbContext'
  definition: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  commentId: T:Mix.Heart.UnitOfWork.UnitOfWorkInfo
  parent: Mix.Heart.UnitOfWork
  name: UnitOfWorkInfo
  nameWithType: UnitOfWorkInfo
  fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
- uid: Mix.Heart.UnitOfWork
  commentId: N:Mix.Heart.UnitOfWork
  name: Mix.Heart.UnitOfWork
  nameWithType: Mix.Heart.UnitOfWork
  fullName: Mix.Heart.UnitOfWork
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CacheService*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.CacheService
  name: CacheService
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheService
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheService
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheService
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheService
- uid: Mix.Heart.Services.MixCacheService
  commentId: T:Mix.Heart.Services.MixCacheService
  parent: Mix.Heart.Services
  name: MixCacheService
  nameWithType: MixCacheService
  fullName: Mix.Heart.Services.MixCacheService
- uid: Mix.Heart.Services
  commentId: N:Mix.Heart.Services
  name: Mix.Heart.Services
  nameWithType: Mix.Heart.Services
  fullName: Mix.Heart.Services
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.CacheFilename
  name: CacheFilename
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheFilename
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CacheFilename
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheFilename
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CacheFilename
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.SelectedMembers
  name: SelectedMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SelectedMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SelectedMembers
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SelectedMembers
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SelectedMembers
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.KeyMembers
  name: KeyMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.KeyMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.KeyMembers
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).KeyMembers
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).KeyMembers
- uid: Mix.Heart.Repository.ViewQueryRepository`4.Table*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.Table
  name: Table
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.Table
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.Table
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).Table
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).Table
- uid: DbSet{{TEntity}}
  commentId: '!:DbSet{`1}'
  definition: DbSet`1
  name: DbSet<TEntity>
  nameWithType: DbSet<TEntity>
  fullName: DbSet<TEntity>
  nameWithType.vb: DbSet(Of TEntity)
  fullName.vb: DbSet(Of TEntity)
  name.vb: DbSet(Of TEntity)
  spec.csharp:
  - uid: DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: DbSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: DbSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: DbSet`1
  isExternal: true
  name: DbSet<>
  nameWithType: DbSet<>
  fullName: DbSet<>
  nameWithType.vb: DbSet(Of )
  fullName.vb: DbSet(Of )
  name.vb: DbSet(Of )
  spec.csharp:
  - uid: DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: DbSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: DbSet`1
    name: DbSet
    nameWithType: DbSet
    fullName: DbSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetListQuery
  name: GetListQuery
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListQuery
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListQuery
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{{TEntity}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: System.Linq.IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullName.vb: System.Linq.IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetPagingQuery
  name: GetPagingQuery
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingQuery
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingQuery
- uid: Mix.Heart.Models.PagingModel
  commentId: T:Mix.Heart.Models.PagingModel
  parent: Mix.Heart.Models
  name: PagingModel
  nameWithType: PagingModel
  fullName: Mix.Heart.Models.PagingModel
- uid: Mix.Heart.Models
  commentId: N:Mix.Heart.Models
  name: Mix.Heart.Models
  nameWithType: Mix.Heart.Models
  fullName: Mix.Heart.Models
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetEntityByIdAsync
  name: GetEntityByIdAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntityByIdAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntityByIdAsync
- uid: '{TPrimaryKey}'
  commentId: '!:TPrimaryKey'
  definition: TPrimaryKey
  name: TPrimaryKey
  nameWithType: TPrimaryKey
  fullName: TPrimaryKey
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TPrimaryKey
  name: TPrimaryKey
  nameWithType: TPrimaryKey
  fullName: TPrimaryKey
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.SetSelectedMembers
  name: SetSelectedMembers
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.SetSelectedMembers
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).SetSelectedMembers
- uid: Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.CheckIsExistsAsync
  name: CheckIsExistsAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.CheckIsExistsAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).CheckIsExistsAsync
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetSingleAsync
  name: GetSingleAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleAsync
- uid: System.Threading.Tasks.Task{{TView}}
  commentId: T:System.Threading.Tasks.Task{`3}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TView>
  nameWithType: Task<TView>
  fullName: System.Threading.Tasks.Task<TView>
  nameWithType.vb: Task(Of TView)
  fullName.vb: System.Threading.Tasks.Task(Of TView)
  name.vb: Task(Of TView)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetFirstAsync
  name: GetFirstAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetFirstAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetFirstAsync
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetListAsync
  name: GetListAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetListAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetListAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TView}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{`3}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TView>>
  nameWithType: Task<List<TView>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TView>>
  nameWithType.vb: Task(Of List(Of TView))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TView))
  name.vb: Task(Of List(Of TView))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetAllAsync
  name: GetAllAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetAllAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetAllAsync
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetPagingAsync
  name: GetPagingAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetPagingAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetPagingAsync
- uid: System.Threading.Tasks.Task{Mix.Heart.Models.PagingResponseModel{{TView}}}
  commentId: T:System.Threading.Tasks.Task{Mix.Heart.Models.PagingResponseModel{`3}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PagingResponseModel<TView>>
  nameWithType: Task<PagingResponseModel<TView>>
  fullName: System.Threading.Tasks.Task<Mix.Heart.Models.PagingResponseModel<TView>>
  nameWithType.vb: Task(Of PagingResponseModel(Of TView))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Heart.Models.PagingResponseModel(Of TView))
  name.vb: Task(Of PagingResponseModel(Of TView))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Heart.Models.PagingResponseModel`1
    name: PagingResponseModel
    nameWithType: PagingResponseModel
    fullName: Mix.Heart.Models.PagingResponseModel
  - name: <
    nameWithType: <
    fullName: <
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Heart.Models.PagingResponseModel`1
    name: PagingResponseModel
    nameWithType: PagingResponseModel
    fullName: Mix.Heart.Models.PagingResponseModel
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.BuildViewModel
  name: BuildViewModel
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.BuildViewModel
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).BuildViewModel
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.ToListViewModelAsync
  name: ToListViewModelAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToListViewModelAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToListViewModelAsync
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.ToPagingViewModelAsync
  name: ToPagingViewModelAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ToPagingViewModelAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ToPagingViewModelAsync
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetEntities*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetEntities
  name: GetEntities
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetEntities
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetEntities
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{`1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TEntity>>
  nameWithType: Task<List<TEntity>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TEntity>>
  nameWithType.vb: Task(Of List(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TEntity))
  name.vb: Task(Of List(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.ParseEntitiesAsync
  name: ParseEntitiesAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.ParseEntitiesAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).ParseEntitiesAsync
- uid: System.Collections.Generic.List{{TEntity}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TEntity>
  nameWithType: List<TEntity>
  fullName: System.Collections.Generic.List<TEntity>
  nameWithType.vb: List(Of TEntity)
  fullName.vb: System.Collections.Generic.List(Of TEntity)
  name.vb: List(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetSingleViewAsync
  name: GetSingleViewAsync
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetSingleViewAsync
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetSingleViewAsync
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetViewModel
  name: GetViewModel
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetViewModel
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetViewModel
- uid: '{TView}'
  commentId: '!:TView'
  definition: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: Mix.Heart.Repository.ViewQueryRepository`4.GetLambda*
  commentId: Overload:Mix.Heart.Repository.ViewQueryRepository`4.GetLambda
  name: GetLambda
  nameWithType: ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda
  fullName: Mix.Heart.Repository.ViewQueryRepository<TDbContext, TEntity, TPrimaryKey, TView>.GetLambda
  nameWithType.vb: ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda
  fullName.vb: Mix.Heart.Repository.ViewQueryRepository(Of TDbContext, TEntity, TPrimaryKey, TView).GetLambda
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
