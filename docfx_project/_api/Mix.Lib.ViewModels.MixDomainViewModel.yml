### YamlMime:ManagedReference
items:
- uid: Mix.Lib.ViewModels.MixDomainViewModel
  commentId: T:Mix.Lib.ViewModels.MixDomainViewModel
  id: MixDomainViewModel
  parent: Mix.Lib.ViewModels
  children:
  - Mix.Lib.ViewModels.MixDomainViewModel.#ctor
  - Mix.Lib.ViewModels.MixDomainViewModel.#ctor(MixDomain,UnitOfWorkInfo)
  - Mix.Lib.ViewModels.MixDomainViewModel.#ctor(UnitOfWorkInfo)
  - Mix.Lib.ViewModels.MixDomainViewModel.Host
  - Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues(System.String,System.Nullable{System.Int32})
  langs:
  - csharp
  - vb
  name: MixDomainViewModel
  nameWithType: MixDomainViewModel
  fullName: Mix.Lib.ViewModels.MixDomainViewModel
  type: Class
  source:
    remote:
      path: src/platform/mix.library/ViewModels/MixDomainViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: MixDomainViewModel
    path: ../../mix.core/src/platform/mix.library/ViewModels/MixDomainViewModel.cs
    startLine: 5
  assemblies:
  - mix.library
  namespace: Mix.Lib.ViewModels
  syntax:
    content: 'public class MixDomainViewModel : TenantDataViewModelBase<MixCmsContext, MixDomain, int, MixDomainViewModel>'
    content.vb: >-
      Public Class MixDomainViewModel
          Inherits TenantDataViewModelBase(Of MixCmsContext, MixDomain, Integer, MixDomainViewModel)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Lib.ViewModels.MixDomainViewModel.#ctor
  commentId: M:Mix.Lib.ViewModels.MixDomainViewModel.#ctor
  id: '#ctor'
  parent: Mix.Lib.ViewModels.MixDomainViewModel
  langs:
  - csharp
  - vb
  name: MixDomainViewModel()
  nameWithType: MixDomainViewModel.MixDomainViewModel()
  fullName: Mix.Lib.ViewModels.MixDomainViewModel.MixDomainViewModel()
  type: Constructor
  source:
    remote:
      path: src/platform/mix.library/ViewModels/MixDomainViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.library/ViewModels/MixDomainViewModel.cs
    startLine: 10
  assemblies:
  - mix.library
  namespace: Mix.Lib.ViewModels
  syntax:
    content: public MixDomainViewModel()
    content.vb: Public Sub New
  overload: Mix.Lib.ViewModels.MixDomainViewModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Lib.ViewModels.MixDomainViewModel.#ctor(UnitOfWorkInfo)
  commentId: M:Mix.Lib.ViewModels.MixDomainViewModel.#ctor(UnitOfWorkInfo)
  id: '#ctor(UnitOfWorkInfo)'
  parent: Mix.Lib.ViewModels.MixDomainViewModel
  langs:
  - csharp
  - vb
  name: MixDomainViewModel(UnitOfWorkInfo)
  nameWithType: MixDomainViewModel.MixDomainViewModel(UnitOfWorkInfo)
  fullName: Mix.Lib.ViewModels.MixDomainViewModel.MixDomainViewModel(UnitOfWorkInfo)
  type: Constructor
  source:
    remote:
      path: src/platform/mix.library/ViewModels/MixDomainViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.library/ViewModels/MixDomainViewModel.cs
    startLine: 14
  assemblies:
  - mix.library
  namespace: Mix.Lib.ViewModels
  syntax:
    content: public MixDomainViewModel(UnitOfWorkInfo unitOfWorkInfo)
    parameters:
    - id: unitOfWorkInfo
      type: UnitOfWorkInfo
    content.vb: Public Sub New(unitOfWorkInfo As UnitOfWorkInfo)
  overload: Mix.Lib.ViewModels.MixDomainViewModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Lib.ViewModels.MixDomainViewModel.#ctor(MixDomain,UnitOfWorkInfo)
  commentId: M:Mix.Lib.ViewModels.MixDomainViewModel.#ctor(MixDomain,UnitOfWorkInfo)
  id: '#ctor(MixDomain,UnitOfWorkInfo)'
  parent: Mix.Lib.ViewModels.MixDomainViewModel
  langs:
  - csharp
  - vb
  name: MixDomainViewModel(MixDomain, UnitOfWorkInfo)
  nameWithType: MixDomainViewModel.MixDomainViewModel(MixDomain, UnitOfWorkInfo)
  fullName: Mix.Lib.ViewModels.MixDomainViewModel.MixDomainViewModel(MixDomain, UnitOfWorkInfo)
  type: Constructor
  source:
    remote:
      path: src/platform/mix.library/ViewModels/MixDomainViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.library/ViewModels/MixDomainViewModel.cs
    startLine: 18
  assemblies:
  - mix.library
  namespace: Mix.Lib.ViewModels
  syntax:
    content: public MixDomainViewModel(MixDomain entity, UnitOfWorkInfo uowInfo = null)
    parameters:
    - id: entity
      type: MixDomain
    - id: uowInfo
      type: UnitOfWorkInfo
    content.vb: Public Sub New(entity As MixDomain, uowInfo As UnitOfWorkInfo = Nothing)
  overload: Mix.Lib.ViewModels.MixDomainViewModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Lib.ViewModels.MixDomainViewModel.Host
  commentId: P:Mix.Lib.ViewModels.MixDomainViewModel.Host
  id: Host
  parent: Mix.Lib.ViewModels.MixDomainViewModel
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: MixDomainViewModel.Host
  fullName: Mix.Lib.ViewModels.MixDomainViewModel.Host
  type: Property
  source:
    remote:
      path: src/platform/mix.library/ViewModels/MixDomainViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Host
    path: ../../mix.core/src/platform/mix.library/ViewModels/MixDomainViewModel.cs
    startLine: 23
  assemblies:
  - mix.library
  namespace: Mix.Lib.ViewModels
  syntax:
    content: >-
      [Required]

      public string Host { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      Public Property Host As String
  overload: Mix.Lib.ViewModels.MixDomainViewModel.Host*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues(System.String,System.Nullable{System.Int32})
  commentId: M:Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues(System.String,System.Nullable{System.Int32})
  id: InitDefaultValues(System.String,System.Nullable{System.Int32})
  parent: Mix.Lib.ViewModels.MixDomainViewModel
  langs:
  - csharp
  - vb
  name: InitDefaultValues(String, Nullable<Int32>)
  nameWithType: MixDomainViewModel.InitDefaultValues(String, Nullable<Int32>)
  fullName: Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues(System.String, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/platform/mix.library/ViewModels/MixDomainViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitDefaultValues
    path: ../../mix.core/src/platform/mix.library/ViewModels/MixDomainViewModel.cs
    startLine: 25
  assemblies:
  - mix.library
  namespace: Mix.Lib.ViewModels
  syntax:
    content: public override void InitDefaultValues(string language = null, int? DomainId = default(int? ))
    parameters:
    - id: language
      type: System.String
    - id: DomainId
      type: System.Nullable{System.Int32}
    content.vb: Public Overrides Sub InitDefaultValues(language As String = Nothing, DomainId As Integer? = Nothing)
  overload: Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues*
  nameWithType.vb: MixDomainViewModel.InitDefaultValues(String, Nullable(Of Int32))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues(System.String, System.Nullable(Of System.Int32))
  name.vb: InitDefaultValues(String, Nullable(Of Int32))
references:
- uid: Mix.Lib.ViewModels
  commentId: N:Mix.Lib.ViewModels
  name: Mix.Lib.ViewModels
  nameWithType: Mix.Lib.ViewModels
  fullName: Mix.Lib.ViewModels
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Lib.ViewModels.MixDomainViewModel.#ctor*
  commentId: Overload:Mix.Lib.ViewModels.MixDomainViewModel.#ctor
  name: MixDomainViewModel
  nameWithType: MixDomainViewModel.MixDomainViewModel
  fullName: Mix.Lib.ViewModels.MixDomainViewModel.MixDomainViewModel
- uid: UnitOfWorkInfo
  isExternal: true
  name: UnitOfWorkInfo
  nameWithType: UnitOfWorkInfo
  fullName: UnitOfWorkInfo
- uid: MixDomain
  commentId: '!:MixDomain'
  isExternal: true
  name: MixDomain
  nameWithType: MixDomain
  fullName: MixDomain
- uid: Mix.Lib.ViewModels.MixDomainViewModel.Host*
  commentId: Overload:Mix.Lib.ViewModels.MixDomainViewModel.Host
  name: Host
  nameWithType: MixDomainViewModel.Host
  fullName: Mix.Lib.ViewModels.MixDomainViewModel.Host
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues*
  commentId: Overload:Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues
  name: InitDefaultValues
  nameWithType: MixDomainViewModel.InitDefaultValues
  fullName: Mix.Lib.ViewModels.MixDomainViewModel.InitDefaultValues
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
