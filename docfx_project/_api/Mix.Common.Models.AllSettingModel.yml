### YamlMime:ManagedReference
items:
- uid: Mix.Common.Models.AllSettingModel
  commentId: T:Mix.Common.Models.AllSettingModel
  id: AllSettingModel
  parent: Mix.Common.Models
  children:
  - Mix.Common.Models.AllSettingModel.GlobalSettings
  - Mix.Common.Models.AllSettingModel.MixConfigurations
  - Mix.Common.Models.AllSettingModel.Translator
  langs:
  - csharp
  - vb
  name: AllSettingModel
  nameWithType: AllSettingModel
  fullName: Mix.Common.Models.AllSettingModel
  type: Class
  source:
    remote:
      path: src/modules/mix.common/Domain/Models/AllSettingModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: AllSettingModel
    path: ../../mix.core/src/modules/mix.common/Domain/Models/AllSettingModel.cs
    startLine: 4
  assemblies:
  - mix.common
  namespace: Mix.Common.Models
  syntax:
    content: public class AllSettingModel
    content.vb: Public Class AllSettingModel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Common.Models.AllSettingModel.GlobalSettings
  commentId: P:Mix.Common.Models.AllSettingModel.GlobalSettings
  id: GlobalSettings
  parent: Mix.Common.Models.AllSettingModel
  langs:
  - csharp
  - vb
  name: GlobalSettings
  nameWithType: AllSettingModel.GlobalSettings
  fullName: Mix.Common.Models.AllSettingModel.GlobalSettings
  type: Property
  source:
    remote:
      path: src/modules/mix.common/Domain/Models/AllSettingModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GlobalSettings
    path: ../../mix.core/src/modules/mix.common/Domain/Models/AllSettingModel.cs
    startLine: 6
  assemblies:
  - mix.common
  namespace: Mix.Common.Models
  syntax:
    content: public GlobalSettings GlobalSettings { get; set; }
    parameters: []
    return:
      type: Mix.Common.Models.GlobalSettings
    content.vb: Public Property GlobalSettings As GlobalSettings
  overload: Mix.Common.Models.AllSettingModel.GlobalSettings*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Common.Models.AllSettingModel.MixConfigurations
  commentId: P:Mix.Common.Models.AllSettingModel.MixConfigurations
  id: MixConfigurations
  parent: Mix.Common.Models.AllSettingModel
  langs:
  - csharp
  - vb
  name: MixConfigurations
  nameWithType: AllSettingModel.MixConfigurations
  fullName: Mix.Common.Models.AllSettingModel.MixConfigurations
  type: Property
  source:
    remote:
      path: src/modules/mix.common/Domain/Models/AllSettingModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: MixConfigurations
    path: ../../mix.core/src/modules/mix.common/Domain/Models/AllSettingModel.cs
    startLine: 7
  assemblies:
  - mix.common
  namespace: Mix.Common.Models
  syntax:
    content: public List<MixConfigurationContentViewModel> MixConfigurations { get; set; }
    parameters: []
    return:
      type: List{Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel}
    content.vb: Public Property MixConfigurations As List(Of MixConfigurationContentViewModel)
  overload: Mix.Common.Models.AllSettingModel.MixConfigurations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Common.Models.AllSettingModel.Translator
  commentId: P:Mix.Common.Models.AllSettingModel.Translator
  id: Translator
  parent: Mix.Common.Models.AllSettingModel
  langs:
  - csharp
  - vb
  name: Translator
  nameWithType: AllSettingModel.Translator
  fullName: Mix.Common.Models.AllSettingModel.Translator
  type: Property
  source:
    remote:
      path: src/modules/mix.common/Domain/Models/AllSettingModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Translator
    path: ../../mix.core/src/modules/mix.common/Domain/Models/AllSettingModel.cs
    startLine: 8
  assemblies:
  - mix.common
  namespace: Mix.Common.Models
  syntax:
    content: public List<MixLanguageContent> Translator { get; set; }
    parameters: []
    return:
      type: List{MixLanguageContent}
    content.vb: Public Property Translator As List(Of MixLanguageContent)
  overload: Mix.Common.Models.AllSettingModel.Translator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Mix.Common.Models
  commentId: N:Mix.Common.Models
  name: Mix.Common.Models
  nameWithType: Mix.Common.Models
  fullName: Mix.Common.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Common.Models.AllSettingModel.GlobalSettings*
  commentId: Overload:Mix.Common.Models.AllSettingModel.GlobalSettings
  name: GlobalSettings
  nameWithType: AllSettingModel.GlobalSettings
  fullName: Mix.Common.Models.AllSettingModel.GlobalSettings
- uid: Mix.Common.Models.GlobalSettings
  commentId: T:Mix.Common.Models.GlobalSettings
  parent: Mix.Common.Models
  name: GlobalSettings
  nameWithType: GlobalSettings
  fullName: Mix.Common.Models.GlobalSettings
- uid: Mix.Common.Models.AllSettingModel.MixConfigurations*
  commentId: Overload:Mix.Common.Models.AllSettingModel.MixConfigurations
  name: MixConfigurations
  nameWithType: AllSettingModel.MixConfigurations
  fullName: Mix.Common.Models.AllSettingModel.MixConfigurations
- uid: List{Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel}
  commentId: '!:List{Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel}'
  definition: List`1
  name: List<MixConfigurationContentViewModel>
  nameWithType: List<MixConfigurationContentViewModel>
  fullName: List<Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel>
  nameWithType.vb: List(Of MixConfigurationContentViewModel)
  fullName.vb: List(Of Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel)
  name.vb: List(Of MixConfigurationContentViewModel)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel
    name: MixConfigurationContentViewModel
    nameWithType: MixConfigurationContentViewModel
    fullName: Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel
    name: MixConfigurationContentViewModel
    nameWithType: MixConfigurationContentViewModel
    fullName: Mix.Common.Domain.ViewModels.MixConfigurationContentViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Common.Models.AllSettingModel.Translator*
  commentId: Overload:Mix.Common.Models.AllSettingModel.Translator
  name: Translator
  nameWithType: AllSettingModel.Translator
  fullName: Mix.Common.Models.AllSettingModel.Translator
- uid: List{MixLanguageContent}
  commentId: '!:List{MixLanguageContent}'
  definition: List`1
  name: List<MixLanguageContent>
  nameWithType: List<MixLanguageContent>
  fullName: List<MixLanguageContent>
  nameWithType.vb: List(Of MixLanguageContent)
  fullName.vb: List(Of MixLanguageContent)
  name.vb: List(Of MixLanguageContent)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MixLanguageContent
    name: MixLanguageContent
    nameWithType: MixLanguageContent
    fullName: MixLanguageContent
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MixLanguageContent
    name: MixLanguageContent
    nameWithType: MixLanguageContent
    fullName: MixLanguageContent
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
