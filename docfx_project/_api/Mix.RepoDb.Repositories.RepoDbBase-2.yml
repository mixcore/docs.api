### YamlMime:ManagedReference
items:
- uid: Mix.RepoDb.Repositories.RepoDbBase`2
  commentId: T:Mix.RepoDb.Repositories.RepoDbBase`2
  id: RepoDbBase`2
  parent: Mix.RepoDb.Repositories
  children:
  - Mix.RepoDb.Repositories.RepoDbBase`2.#ctor
  - Mix.RepoDb.Repositories.RepoDbBase`2.#ctor(Microsoft.Extensions.Options.IOptions{Mix.RepoDb.Models.AppSetting},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace)
  - Mix.RepoDb.Repositories.RepoDbBase`2.Cache
  - Mix.RepoDb.Repositories.RepoDbBase`2.CreateConnection
  - Mix.RepoDb.Repositories.RepoDbBase`2.Delete(System.Int32)
  - Mix.RepoDb.Repositories.RepoDbBase`2.DeleteAsync(System.Int32)
  - Mix.RepoDb.Repositories.RepoDbBase`2.Get(System.Int32)
  - Mix.RepoDb.Repositories.RepoDbBase`2.GetAll(System.String)
  - Mix.RepoDb.Repositories.RepoDbBase`2.GetAllAsync(System.String)
  - Mix.RepoDb.Repositories.RepoDbBase`2.GetAsync(System.Int32)
  - Mix.RepoDb.Repositories.RepoDbBase`2.Insert(`1,System.Data.IDbTransaction)
  - Mix.RepoDb.Repositories.RepoDbBase`2.InsertAsync(`1)
  - Mix.RepoDb.Repositories.RepoDbBase`2.Merge(`1,System.Data.IDbTransaction)
  - Mix.RepoDb.Repositories.RepoDbBase`2.MergeAsync(`1)
  - Mix.RepoDb.Repositories.RepoDbBase`2.Trace
  - Mix.RepoDb.Repositories.RepoDbBase`2.Update(`1,System.Data.IDbTransaction)
  - Mix.RepoDb.Repositories.RepoDbBase`2.UpdateAsync(`1)
  langs:
  - csharp
  - vb
  name: RepoDbBase<TDbConnection, TEntity>
  nameWithType: RepoDbBase<TDbConnection, TEntity>
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>
  type: Class
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: RepoDbBase
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 10
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: 'public class RepoDbBase<TDbConnection, TEntity> : IRepoDb<TDbConnection, TEntity> where TDbConnection : DbConnection where TEntity : class'
    typeParameters:
    - id: TDbConnection
    - id: TEntity
    content.vb: >-
      Public Class RepoDbBase(Of TDbConnection As DbConnection, TEntity As Class)
          Implements IRepoDb(Of TDbConnection, TEntity)
  inheritance:
  - System.Object
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity)
  name.vb: RepoDbBase(Of TDbConnection, TEntity)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.#ctor(Microsoft.Extensions.Options.IOptions{Mix.RepoDb.Models.AppSetting},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.#ctor(Microsoft.Extensions.Options.IOptions{Mix.RepoDb.Models.AppSetting},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace)
  id: '#ctor(Microsoft.Extensions.Options.IOptions{Mix.RepoDb.Models.AppSetting},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace)'
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: RepoDbBase(IOptions<AppSetting>, ICache, ITrace)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.RepoDbBase(IOptions<AppSetting>, ICache, ITrace)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.RepoDbBase(Microsoft.Extensions.Options.IOptions<Mix.RepoDb.Models.AppSetting>, RepoDb.Interfaces.ICache, RepoDb.Interfaces.ITrace)
  type: Constructor
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 16
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public RepoDbBase(IOptions<AppSetting> settings, ICache cache, ITrace trace)
    parameters:
    - id: settings
      type: Microsoft.Extensions.Options.IOptions{Mix.RepoDb.Models.AppSetting}
    - id: cache
      type: RepoDb.Interfaces.ICache
    - id: trace
      type: RepoDb.Interfaces.ITrace
    content.vb: Public Sub New(settings As IOptions(Of AppSetting), cache As ICache, trace As ITrace)
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.#ctor*
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).RepoDbBase(IOptions(Of AppSetting), ICache, ITrace)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).RepoDbBase(Microsoft.Extensions.Options.IOptions(Of Mix.RepoDb.Models.AppSetting), RepoDb.Interfaces.ICache, RepoDb.Interfaces.ITrace)
  name.vb: RepoDbBase(IOptions(Of AppSetting), ICache, ITrace)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.#ctor
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.#ctor
  id: '#ctor'
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: RepoDbBase()
  nameWithType: RepoDbBase<TDbConnection, TEntity>.RepoDbBase()
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.RepoDbBase()
  type: Constructor
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 24
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public RepoDbBase()
    content.vb: Public Sub New
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.#ctor*
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).RepoDbBase()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).RepoDbBase()
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Trace
  commentId: P:Mix.RepoDb.Repositories.RepoDbBase`2.Trace
  id: Trace
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: Trace
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Trace
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Trace
  type: Property
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Trace
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 30
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public ITrace Trace { get; }
    parameters: []
    return:
      type: RepoDb.Interfaces.ITrace
    content.vb: Public ReadOnly Property Trace As ITrace
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.Trace*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Trace
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Trace
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Trace
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Cache
  commentId: P:Mix.RepoDb.Repositories.RepoDbBase`2.Cache
  id: Cache
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: Cache
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Cache
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Cache
  type: Property
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Cache
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 32
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public ICache Cache { get; }
    parameters: []
    return:
      type: RepoDb.Interfaces.ICache
    content.vb: Public ReadOnly Property Cache As ICache
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.Cache*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Cache
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Cache
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Cache
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.CreateConnection
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.CreateConnection
  id: CreateConnection
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: CreateConnection()
  nameWithType: RepoDbBase<TDbConnection, TEntity>.CreateConnection()
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.CreateConnection()
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: CreateConnection
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 36
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public TDbConnection CreateConnection()
    return:
      type: '{TDbConnection}'
    content.vb: Public Function CreateConnection As TDbConnection
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.CreateConnection*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.CreateConnection
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).CreateConnection()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).CreateConnection()
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.GetAll(System.String)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.GetAll(System.String)
  id: GetAll(System.String)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: GetAll(String)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.GetAll(String)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.GetAll(System.String)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetAll
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 47
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public IEnumerable<TEntity> GetAll(string cacheKey = null)
    parameters:
    - id: cacheKey
      type: System.String
    return:
      type: IEnumerable{{TEntity}}
    content.vb: Public Function GetAll(cacheKey As String = Nothing) As IEnumerable(Of TEntity)
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.GetAll*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.GetAll(System.String)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).GetAll(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).GetAll(System.String)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Get(System.Int32)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.Get(System.Int32)
  id: Get(System.Int32)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: Get(Int32)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Get(Int32)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Get(System.Int32)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Get
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 61
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public TEntity Get(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: '{TEntity}'
    content.vb: Public Function Get(id As Integer) As TEntity
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.Get*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Get(System.Int32)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Get(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Get(System.Int32)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Delete(System.Int32)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.Delete(System.Int32)
  id: Delete(System.Int32)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: Delete(Int32)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Delete(Int32)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Delete(System.Int32)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Delete
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 73
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public int Delete(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.Int32
    content.vb: Public Function Delete(id As Integer) As Integer
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.Delete*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Delete(System.Int32)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Delete(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Delete(System.Int32)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Merge(`1,System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.Merge(`1,System.Data.IDbTransaction)
  id: Merge(`1,System.Data.IDbTransaction)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: Merge(TEntity, IDbTransaction)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Merge(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Merge(TEntity, System.Data.IDbTransaction)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Merge
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 85
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public int Merge(TEntity entity, IDbTransaction transaction = null)
    parameters:
    - id: entity
      type: '{TEntity}'
    - id: transaction
      type: System.Data.IDbTransaction
    return:
      type: System.Int32
    content.vb: Public Function Merge(entity As TEntity, transaction As IDbTransaction = Nothing) As Integer
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.Merge*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Merge({TEntity},System.Data.IDbTransaction)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Merge(TEntity, IDbTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Merge(TEntity, System.Data.IDbTransaction)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Insert(`1,System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.Insert(`1,System.Data.IDbTransaction)
  id: Insert(`1,System.Data.IDbTransaction)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: Insert(TEntity, IDbTransaction)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Insert(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Insert(TEntity, System.Data.IDbTransaction)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Insert
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 98
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public object Insert(TEntity entity, IDbTransaction transaction = null)
    parameters:
    - id: entity
      type: '{TEntity}'
    - id: transaction
      type: System.Data.IDbTransaction
    return:
      type: System.Object
    content.vb: Public Function Insert(entity As TEntity, transaction As IDbTransaction = Nothing) As Object
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.Insert*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Insert({TEntity},System.Data.IDbTransaction)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Insert(TEntity, IDbTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Insert(TEntity, System.Data.IDbTransaction)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Update(`1,System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.Update(`1,System.Data.IDbTransaction)
  id: Update(`1,System.Data.IDbTransaction)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: Update(TEntity, IDbTransaction)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Update(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Update(TEntity, System.Data.IDbTransaction)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Update
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 111
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public int Update(TEntity entity, IDbTransaction transaction = null)
    parameters:
    - id: entity
      type: '{TEntity}'
    - id: transaction
      type: System.Data.IDbTransaction
    return:
      type: System.Int32
    content.vb: Public Function Update(entity As TEntity, transaction As IDbTransaction = Nothing) As Integer
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.Update*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Update({TEntity},System.Data.IDbTransaction)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Update(TEntity, IDbTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Update(TEntity, System.Data.IDbTransaction)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.GetAllAsync(System.String)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.GetAllAsync(System.String)
  id: GetAllAsync(System.String)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: GetAllAsync(String)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.GetAllAsync(String)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.GetAllAsync(System.String)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetAllAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 125
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<IEnumerable<TEntity>> GetAllAsync(string cacheKey = null)
    parameters:
    - id: cacheKey
      type: System.String
    return:
      type: Task{IEnumerable{{TEntity}}}
    content.vb: Public Function GetAllAsync(cacheKey As String = Nothing) As Task(Of IEnumerable(Of TEntity))
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.GetAllAsync*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.GetAllAsync(System.String)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).GetAllAsync(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).GetAllAsync(System.String)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.GetAsync(System.Int32)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.GetAsync(System.Int32)
  id: GetAsync(System.Int32)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: GetAsync(Int32)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.GetAsync(Int32)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.GetAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 139
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<TEntity> GetAsync(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: Task{{TEntity}}
    content.vb: Public Function GetAsync(id As Integer) As Task(Of TEntity)
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.GetAsync*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.GetAsync(System.Int32)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).GetAsync(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).GetAsync(System.Int32)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.DeleteAsync(System.Int32)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.DeleteAsync(System.Int32)
  id: DeleteAsync(System.Int32)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(Int32)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.DeleteAsync(Int32)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.DeleteAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DeleteAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 151
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<int> DeleteAsync(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: Task{System.Int32}
    content.vb: Public Function DeleteAsync(id As Integer) As Task(Of Integer)
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.DeleteAsync*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.DeleteAsync(System.Int32)
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).DeleteAsync(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).DeleteAsync(System.Int32)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.MergeAsync(`1)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.MergeAsync(`1)
  id: MergeAsync(`1)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: MergeAsync(TEntity)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.MergeAsync(TEntity)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.MergeAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: MergeAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 163
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<object> MergeAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: Task{System.Object}
    content.vb: Public Function MergeAsync(entity As TEntity) As Task(Of Object)
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.MergeAsync*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.MergeAsync({TEntity})
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).MergeAsync(TEntity)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).MergeAsync(TEntity)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.InsertAsync(`1)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.InsertAsync(`1)
  id: InsertAsync(`1)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: InsertAsync(TEntity)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.InsertAsync(TEntity)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.InsertAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InsertAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 175
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<object> InsertAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: Task{System.Object}
    content.vb: Public Function InsertAsync(entity As TEntity) As Task(Of Object)
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.InsertAsync*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.InsertAsync({TEntity})
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).InsertAsync(TEntity)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).InsertAsync(TEntity)
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.UpdateAsync(`1)
  commentId: M:Mix.RepoDb.Repositories.RepoDbBase`2.UpdateAsync(`1)
  id: UpdateAsync(`1)
  parent: Mix.RepoDb.Repositories.RepoDbBase`2
  langs:
  - csharp
  - vb
  name: UpdateAsync(TEntity)
  nameWithType: RepoDbBase<TDbConnection, TEntity>.UpdateAsync(TEntity)
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.UpdateAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/RepoDbBase.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: UpdateAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/RepoDbBase.cs
    startLine: 187
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<int> UpdateAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: Task{System.Int32}
    content.vb: Public Function UpdateAsync(entity As TEntity) As Task(Of Integer)
  overload: Mix.RepoDb.Repositories.RepoDbBase`2.UpdateAsync*
  implements:
  - Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.UpdateAsync({TEntity})
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).UpdateAsync(TEntity)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).UpdateAsync(TEntity)
references:
- uid: Mix.RepoDb.Repositories
  commentId: N:Mix.RepoDb.Repositories
  name: Mix.RepoDb.Repositories
  nameWithType: Mix.RepoDb.Repositories
  fullName: Mix.RepoDb.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  commentId: T:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}
  parent: Mix.RepoDb.Interfaces
  definition: Mix.RepoDb.Interfaces.IRepoDb`2
  name: IRepoDb<TDbConnection, TEntity>
  nameWithType: IRepoDb<TDbConnection, TEntity>
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity)
  name.vb: IRepoDb(Of TDbConnection, TEntity)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2
    name: IRepoDb
    nameWithType: IRepoDb
    fullName: Mix.RepoDb.Interfaces.IRepoDb
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbConnection
    nameWithType: TDbConnection
    fullName: TDbConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2
    name: IRepoDb
    nameWithType: IRepoDb
    fullName: Mix.RepoDb.Interfaces.IRepoDb
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbConnection
    nameWithType: TDbConnection
    fullName: TDbConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.RepoDb.Interfaces.IRepoDb`2
  commentId: T:Mix.RepoDb.Interfaces.IRepoDb`2
  name: IRepoDb<TDbConnection, TEntity>
  nameWithType: IRepoDb<TDbConnection, TEntity>
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity)
  name.vb: IRepoDb(Of TDbConnection, TEntity)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2
    name: IRepoDb
    nameWithType: IRepoDb
    fullName: Mix.RepoDb.Interfaces.IRepoDb
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbConnection
    nameWithType: TDbConnection
    fullName: TDbConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2
    name: IRepoDb
    nameWithType: IRepoDb
    fullName: Mix.RepoDb.Interfaces.IRepoDb
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbConnection
    nameWithType: TDbConnection
    fullName: TDbConnection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces
  commentId: N:Mix.RepoDb.Interfaces
  name: Mix.RepoDb.Interfaces
  nameWithType: Mix.RepoDb.Interfaces
  fullName: Mix.RepoDb.Interfaces
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.#ctor*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.#ctor
  name: RepoDbBase
  nameWithType: RepoDbBase<TDbConnection, TEntity>.RepoDbBase
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.RepoDbBase
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).RepoDbBase
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).RepoDbBase
- uid: Microsoft.Extensions.Options.IOptions{Mix.RepoDb.Models.AppSetting}
  commentId: T:Microsoft.Extensions.Options.IOptions{Mix.RepoDb.Models.AppSetting}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  name: IOptions<AppSetting>
  nameWithType: IOptions<AppSetting>
  fullName: Microsoft.Extensions.Options.IOptions<Mix.RepoDb.Models.AppSetting>
  nameWithType.vb: IOptions(Of AppSetting)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of Mix.RepoDb.Models.AppSetting)
  name.vb: IOptions(Of AppSetting)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.RepoDb.Models.AppSetting
    name: AppSetting
    nameWithType: AppSetting
    fullName: Mix.RepoDb.Models.AppSetting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.RepoDb.Models.AppSetting
    name: AppSetting
    nameWithType: AppSetting
    fullName: Mix.RepoDb.Models.AppSetting
  - name: )
    nameWithType: )
    fullName: )
- uid: RepoDb.Interfaces.ICache
  commentId: T:RepoDb.Interfaces.ICache
  parent: RepoDb.Interfaces
  isExternal: true
  name: ICache
  nameWithType: ICache
  fullName: RepoDb.Interfaces.ICache
- uid: RepoDb.Interfaces.ITrace
  commentId: T:RepoDb.Interfaces.ITrace
  parent: RepoDb.Interfaces
  isExternal: true
  name: ITrace
  nameWithType: ITrace
  fullName: RepoDb.Interfaces.ITrace
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: true
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: RepoDb.Interfaces
  commentId: N:RepoDb.Interfaces
  isExternal: true
  name: RepoDb.Interfaces
  nameWithType: RepoDb.Interfaces
  fullName: RepoDb.Interfaces
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Trace*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.Trace
  name: Trace
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Trace
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Trace
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Trace
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Trace
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Trace
  commentId: P:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.Trace
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.Trace
  name: Trace
  nameWithType: IRepoDb<TDbConnection, TEntity>.Trace
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Trace
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Trace
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Trace
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.Trace
  commentId: P:Mix.RepoDb.Interfaces.IRepoDb`2.Trace
  name: Trace
  nameWithType: IRepoDb<TDbConnection, TEntity>.Trace
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Trace
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Trace
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Trace
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Cache*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.Cache
  name: Cache
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Cache
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Cache
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Cache
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Cache
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Cache
  commentId: P:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.Cache
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.Cache
  name: Cache
  nameWithType: IRepoDb<TDbConnection, TEntity>.Cache
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Cache
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Cache
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Cache
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.Cache
  commentId: P:Mix.RepoDb.Interfaces.IRepoDb`2.Cache
  name: Cache
  nameWithType: IRepoDb<TDbConnection, TEntity>.Cache
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Cache
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Cache
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Cache
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.CreateConnection*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.CreateConnection
  name: CreateConnection
  nameWithType: RepoDbBase<TDbConnection, TEntity>.CreateConnection
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.CreateConnection
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).CreateConnection
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).CreateConnection
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.CreateConnection
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.CreateConnection
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.CreateConnection
  name: CreateConnection()
  nameWithType: IRepoDb<TDbConnection, TEntity>.CreateConnection()
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.CreateConnection()
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).CreateConnection()
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).CreateConnection()
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.CreateConnection
    name: CreateConnection
    nameWithType: IRepoDb<TDbConnection, TEntity>.CreateConnection
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.CreateConnection
    name: CreateConnection
    nameWithType: IRepoDb(Of TDbConnection, TEntity).CreateConnection
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TDbConnection}'
  commentId: '!:TDbConnection'
  definition: TDbConnection
  name: TDbConnection
  nameWithType: TDbConnection
  fullName: TDbConnection
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.CreateConnection
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.CreateConnection
  name: CreateConnection()
  nameWithType: IRepoDb<TDbConnection, TEntity>.CreateConnection()
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.CreateConnection()
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).CreateConnection()
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).CreateConnection()
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.CreateConnection
    name: CreateConnection
    nameWithType: IRepoDb<TDbConnection, TEntity>.CreateConnection
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.CreateConnection
    name: CreateConnection
    nameWithType: IRepoDb(Of TDbConnection, TEntity).CreateConnection
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TDbConnection
  name: TDbConnection
  nameWithType: TDbConnection
  fullName: TDbConnection
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.GetAll*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.GetAll
  name: GetAll
  nameWithType: RepoDbBase<TDbConnection, TEntity>.GetAll
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.GetAll
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).GetAll
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).GetAll
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.GetAll(System.String)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.GetAll(System.String)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.GetAll(System.String)
  name: GetAll(String)
  nameWithType: IRepoDb<TDbConnection, TEntity>.GetAll(String)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAll(System.String)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).GetAll(String)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAll(System.String)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAll(System.String)
    name: GetAll
    nameWithType: IRepoDb<TDbConnection, TEntity>.GetAll
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAll(System.String)
    name: GetAll
    nameWithType: IRepoDb(Of TDbConnection, TEntity).GetAll
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IEnumerable{{TEntity}}
  commentId: '!:IEnumerable{`1}'
  definition: IEnumerable`1
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: IEnumerable<TEntity>
  nameWithType.vb: IEnumerable(Of TEntity)
  fullName.vb: IEnumerable(Of TEntity)
  name.vb: IEnumerable(Of TEntity)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAll(System.String)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.GetAll(System.String)
  isExternal: true
  name: GetAll(String)
  nameWithType: IRepoDb<TDbConnection, TEntity>.GetAll(String)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAll(System.String)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).GetAll(String)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAll(System.String)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAll(System.String)
    name: GetAll
    nameWithType: IRepoDb<TDbConnection, TEntity>.GetAll
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAll(System.String)
    name: GetAll
    nameWithType: IRepoDb(Of TDbConnection, TEntity).GetAll
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Get*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.Get
  name: Get
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Get
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Get
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Get
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Get
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Get(System.Int32)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.Get(System.Int32)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.Get(System.Int32)
  name: Get(Int32)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Get(Int32)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Get(System.Int32)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Get(Int32)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Get(System.Int32)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Get(System.Int32)
    name: Get
    nameWithType: IRepoDb<TDbConnection, TEntity>.Get
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Get(System.Int32)
    name: Get
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Get
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.Get(System.Int32)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.Get(System.Int32)
  isExternal: true
  name: Get(Int32)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Get(Int32)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Get(System.Int32)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Get(Int32)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Get(System.Int32)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Get(System.Int32)
    name: Get
    nameWithType: IRepoDb<TDbConnection, TEntity>.Get
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Get(System.Int32)
    name: Get
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Get
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Delete*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.Delete
  name: Delete
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Delete
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Delete
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Delete
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Delete
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Delete(System.Int32)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.Delete(System.Int32)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.Delete(System.Int32)
  name: Delete(Int32)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Delete(Int32)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Delete(System.Int32)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Delete(Int32)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Delete(System.Int32)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Delete(System.Int32)
    name: Delete
    nameWithType: IRepoDb<TDbConnection, TEntity>.Delete
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Delete(System.Int32)
    name: Delete
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Delete
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.Delete(System.Int32)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.Delete(System.Int32)
  isExternal: true
  name: Delete(Int32)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Delete(Int32)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Delete(System.Int32)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Delete(Int32)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Delete(System.Int32)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Delete(System.Int32)
    name: Delete
    nameWithType: IRepoDb<TDbConnection, TEntity>.Delete
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Delete(System.Int32)
    name: Delete
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Delete
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Merge*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.Merge
  name: Merge
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Merge
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Merge
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Merge
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Merge
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Merge({TEntity},System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.Merge(`1,System.Data.IDbTransaction)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.Merge(`1,System.Data.IDbTransaction)
  name: Merge(TEntity, IDbTransaction)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Merge(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Merge(TEntity, System.Data.IDbTransaction)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Merge(TEntity, IDbTransaction)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Merge(TEntity, System.Data.IDbTransaction)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Merge(`1,System.Data.IDbTransaction)
    name: Merge
    nameWithType: IRepoDb<TDbConnection, TEntity>.Merge
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Merge
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Merge(`1,System.Data.IDbTransaction)
    name: Merge
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Merge
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Merge
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDbTransaction
  commentId: T:System.Data.IDbTransaction
  parent: System.Data
  isExternal: true
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.Merge(`1,System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.Merge(`1,System.Data.IDbTransaction)
  isExternal: true
  name: Merge(TEntity, IDbTransaction)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Merge(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Merge(TEntity, System.Data.IDbTransaction)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Merge(TEntity, IDbTransaction)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Merge(TEntity, System.Data.IDbTransaction)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Merge(`1,System.Data.IDbTransaction)
    name: Merge
    nameWithType: IRepoDb<TDbConnection, TEntity>.Merge
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Merge
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Merge(`1,System.Data.IDbTransaction)
    name: Merge
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Merge
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Merge
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Insert*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.Insert
  name: Insert
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Insert
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Insert
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Insert
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Insert
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Insert({TEntity},System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.Insert(`1,System.Data.IDbTransaction)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.Insert(`1,System.Data.IDbTransaction)
  name: Insert(TEntity, IDbTransaction)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Insert(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Insert(TEntity, System.Data.IDbTransaction)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Insert(TEntity, IDbTransaction)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Insert(TEntity, System.Data.IDbTransaction)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Insert(`1,System.Data.IDbTransaction)
    name: Insert
    nameWithType: IRepoDb<TDbConnection, TEntity>.Insert
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Insert(`1,System.Data.IDbTransaction)
    name: Insert
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Insert
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.Insert(`1,System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.Insert(`1,System.Data.IDbTransaction)
  isExternal: true
  name: Insert(TEntity, IDbTransaction)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Insert(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Insert(TEntity, System.Data.IDbTransaction)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Insert(TEntity, IDbTransaction)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Insert(TEntity, System.Data.IDbTransaction)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Insert(`1,System.Data.IDbTransaction)
    name: Insert
    nameWithType: IRepoDb<TDbConnection, TEntity>.Insert
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Insert(`1,System.Data.IDbTransaction)
    name: Insert
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Insert
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.Update*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.Update
  name: Update
  nameWithType: RepoDbBase<TDbConnection, TEntity>.Update
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.Update
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).Update
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).Update
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.Update({TEntity},System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.Update(`1,System.Data.IDbTransaction)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.Update(`1,System.Data.IDbTransaction)
  name: Update(TEntity, IDbTransaction)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Update(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Update(TEntity, System.Data.IDbTransaction)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Update(TEntity, IDbTransaction)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Update(TEntity, System.Data.IDbTransaction)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Update(`1,System.Data.IDbTransaction)
    name: Update
    nameWithType: IRepoDb<TDbConnection, TEntity>.Update
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Update(`1,System.Data.IDbTransaction)
    name: Update
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Update
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.Update(`1,System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.Update(`1,System.Data.IDbTransaction)
  isExternal: true
  name: Update(TEntity, IDbTransaction)
  nameWithType: IRepoDb<TDbConnection, TEntity>.Update(TEntity, IDbTransaction)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Update(TEntity, System.Data.IDbTransaction)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).Update(TEntity, IDbTransaction)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Update(TEntity, System.Data.IDbTransaction)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Update(`1,System.Data.IDbTransaction)
    name: Update
    nameWithType: IRepoDb<TDbConnection, TEntity>.Update
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.Update(`1,System.Data.IDbTransaction)
    name: Update
    nameWithType: IRepoDb(Of TDbConnection, TEntity).Update
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.IDbTransaction
    name: IDbTransaction
    nameWithType: IDbTransaction
    fullName: System.Data.IDbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.GetAllAsync*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.GetAllAsync
  name: GetAllAsync
  nameWithType: RepoDbBase<TDbConnection, TEntity>.GetAllAsync
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.GetAllAsync
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).GetAllAsync
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).GetAllAsync
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.GetAllAsync(System.String)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.GetAllAsync(System.String)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.GetAllAsync(System.String)
  name: GetAllAsync(String)
  nameWithType: IRepoDb<TDbConnection, TEntity>.GetAllAsync(String)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAllAsync(System.String)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).GetAllAsync(String)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAllAsync(System.String)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAllAsync(System.String)
    name: GetAllAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.GetAllAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAllAsync(System.String)
    name: GetAllAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).GetAllAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{IEnumerable{{TEntity}}}
  commentId: '!:Task{IEnumerable{`1}}'
  definition: Task`1
  name: Task<IEnumerable<TEntity>>
  nameWithType: Task<IEnumerable<TEntity>>
  fullName: Task<IEnumerable<TEntity>>
  nameWithType.vb: Task(Of IEnumerable(Of TEntity))
  fullName.vb: Task(Of IEnumerable(Of TEntity))
  name.vb: Task(Of IEnumerable(Of TEntity))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAllAsync(System.String)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.GetAllAsync(System.String)
  isExternal: true
  name: GetAllAsync(String)
  nameWithType: IRepoDb<TDbConnection, TEntity>.GetAllAsync(String)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAllAsync(System.String)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).GetAllAsync(String)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAllAsync(System.String)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAllAsync(System.String)
    name: GetAllAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.GetAllAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAllAsync(System.String)
    name: GetAllAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).GetAllAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAllAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.GetAsync*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.GetAsync
  name: GetAsync
  nameWithType: RepoDbBase<TDbConnection, TEntity>.GetAsync
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.GetAsync
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).GetAsync
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).GetAsync
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.GetAsync(System.Int32)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.GetAsync(System.Int32)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.GetAsync(System.Int32)
  name: GetAsync(Int32)
  nameWithType: IRepoDb<TDbConnection, TEntity>.GetAsync(Int32)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAsync(System.Int32)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).GetAsync(Int32)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAsync(System.Int32)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.GetAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).GetAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{{TEntity}}
  commentId: '!:Task{`1}'
  definition: Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAsync(System.Int32)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.GetAsync(System.Int32)
  isExternal: true
  name: GetAsync(Int32)
  nameWithType: IRepoDb<TDbConnection, TEntity>.GetAsync(Int32)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAsync(System.Int32)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).GetAsync(Int32)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAsync(System.Int32)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.GetAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.GetAsync(System.Int32)
    name: GetAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).GetAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.DeleteAsync*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.DeleteAsync
  name: DeleteAsync
  nameWithType: RepoDbBase<TDbConnection, TEntity>.DeleteAsync
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.DeleteAsync
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).DeleteAsync
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).DeleteAsync
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.DeleteAsync(System.Int32)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.DeleteAsync(System.Int32)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.DeleteAsync(System.Int32)
  name: DeleteAsync(Int32)
  nameWithType: IRepoDb<TDbConnection, TEntity>.DeleteAsync(Int32)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.DeleteAsync(System.Int32)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).DeleteAsync(Int32)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).DeleteAsync(System.Int32)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.DeleteAsync(System.Int32)
    name: DeleteAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.DeleteAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.DeleteAsync(System.Int32)
    name: DeleteAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).DeleteAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{System.Int32}
  commentId: '!:Task{System.Int32}'
  definition: Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.DeleteAsync(System.Int32)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.DeleteAsync(System.Int32)
  isExternal: true
  name: DeleteAsync(Int32)
  nameWithType: IRepoDb<TDbConnection, TEntity>.DeleteAsync(Int32)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.DeleteAsync(System.Int32)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).DeleteAsync(Int32)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).DeleteAsync(System.Int32)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.DeleteAsync(System.Int32)
    name: DeleteAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.DeleteAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.DeleteAsync(System.Int32)
    name: DeleteAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).DeleteAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.MergeAsync*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.MergeAsync
  name: MergeAsync
  nameWithType: RepoDbBase<TDbConnection, TEntity>.MergeAsync
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.MergeAsync
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).MergeAsync
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).MergeAsync
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.MergeAsync({TEntity})
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.MergeAsync(`1)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.MergeAsync(`1)
  name: MergeAsync(TEntity)
  nameWithType: IRepoDb<TDbConnection, TEntity>.MergeAsync(TEntity)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.MergeAsync(TEntity)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).MergeAsync(TEntity)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).MergeAsync(TEntity)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.MergeAsync(`1)
    name: MergeAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.MergeAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.MergeAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.MergeAsync(`1)
    name: MergeAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).MergeAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).MergeAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{System.Object}
  commentId: '!:Task{System.Object}'
  definition: Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.MergeAsync(`1)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.MergeAsync(`1)
  name: MergeAsync(TEntity)
  nameWithType: IRepoDb<TDbConnection, TEntity>.MergeAsync(TEntity)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.MergeAsync(TEntity)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).MergeAsync(TEntity)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).MergeAsync(TEntity)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.MergeAsync(`1)
    name: MergeAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.MergeAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.MergeAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.MergeAsync(`1)
    name: MergeAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).MergeAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).MergeAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.InsertAsync*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.InsertAsync
  name: InsertAsync
  nameWithType: RepoDbBase<TDbConnection, TEntity>.InsertAsync
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.InsertAsync
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).InsertAsync
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).InsertAsync
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.InsertAsync({TEntity})
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.InsertAsync(`1)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.InsertAsync(`1)
  name: InsertAsync(TEntity)
  nameWithType: IRepoDb<TDbConnection, TEntity>.InsertAsync(TEntity)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.InsertAsync(TEntity)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).InsertAsync(TEntity)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).InsertAsync(TEntity)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.InsertAsync(`1)
    name: InsertAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.InsertAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.InsertAsync(`1)
    name: InsertAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).InsertAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.InsertAsync(`1)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.InsertAsync(`1)
  name: InsertAsync(TEntity)
  nameWithType: IRepoDb<TDbConnection, TEntity>.InsertAsync(TEntity)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.InsertAsync(TEntity)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).InsertAsync(TEntity)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).InsertAsync(TEntity)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.InsertAsync(`1)
    name: InsertAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.InsertAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.InsertAsync(`1)
    name: InsertAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).InsertAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).InsertAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.RepoDbBase`2.UpdateAsync*
  commentId: Overload:Mix.RepoDb.Repositories.RepoDbBase`2.UpdateAsync
  name: UpdateAsync
  nameWithType: RepoDbBase<TDbConnection, TEntity>.UpdateAsync
  fullName: Mix.RepoDb.Repositories.RepoDbBase<TDbConnection, TEntity>.UpdateAsync
  nameWithType.vb: RepoDbBase(Of TDbConnection, TEntity).UpdateAsync
  fullName.vb: Mix.RepoDb.Repositories.RepoDbBase(Of TDbConnection, TEntity).UpdateAsync
- uid: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}.UpdateAsync({TEntity})
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb{`0,`1}.UpdateAsync(`1)
  parent: Mix.RepoDb.Interfaces.IRepoDb{{TDbConnection},{TEntity}}
  definition: Mix.RepoDb.Interfaces.IRepoDb`2.UpdateAsync(`1)
  name: UpdateAsync(TEntity)
  nameWithType: IRepoDb<TDbConnection, TEntity>.UpdateAsync(TEntity)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.UpdateAsync(TEntity)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).UpdateAsync(TEntity)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).UpdateAsync(TEntity)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.UpdateAsync(`1)
    name: UpdateAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.UpdateAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.UpdateAsync(`1)
    name: UpdateAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).UpdateAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Interfaces.IRepoDb`2.UpdateAsync(`1)
  commentId: M:Mix.RepoDb.Interfaces.IRepoDb`2.UpdateAsync(`1)
  name: UpdateAsync(TEntity)
  nameWithType: IRepoDb<TDbConnection, TEntity>.UpdateAsync(TEntity)
  fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.UpdateAsync(TEntity)
  nameWithType.vb: IRepoDb(Of TDbConnection, TEntity).UpdateAsync(TEntity)
  fullName.vb: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).UpdateAsync(TEntity)
  spec.csharp:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.UpdateAsync(`1)
    name: UpdateAsync
    nameWithType: IRepoDb<TDbConnection, TEntity>.UpdateAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb<TDbConnection, TEntity>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.RepoDb.Interfaces.IRepoDb`2.UpdateAsync(`1)
    name: UpdateAsync
    nameWithType: IRepoDb(Of TDbConnection, TEntity).UpdateAsync
    fullName: Mix.RepoDb.Interfaces.IRepoDb(Of TDbConnection, TEntity).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
