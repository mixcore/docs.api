### YamlMime:ManagedReference
items:
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository
  commentId: T:Mix.RepoDb.Repositories.MixRepoDbRepository
  id: MixRepoDbRepository
  parent: Mix.RepoDb.Repositories
  children:
  - Mix.RepoDb.Repositories.MixRepoDbRepository.#ctor(RepoDb.Interfaces.ICache,Mix.Database.Services.DatabaseService,Mix.Heart.UnitOfWork.UnitOfWorkInfo{Mix.Database.Entities.Cms.MixCmsContext})
  - Mix.RepoDb.Repositories.MixRepoDbRepository.Cache
  - Mix.RepoDb.Repositories.MixRepoDbRepository.ConnectionString
  - Mix.RepoDb.Repositories.MixRepoDbRepository.CreateConnection
  - Mix.RepoDb.Repositories.MixRepoDbRepository.DatabaseProvider
  - Mix.RepoDb.Repositories.MixRepoDbRepository.DeleteAsync(System.Int32)
  - Mix.RepoDb.Repositories.MixRepoDbRepository.ExecuteCommand(System.String)
  - Mix.RepoDb.Repositories.MixRepoDbRepository.GetAllAsync
  - Mix.RepoDb.Repositories.MixRepoDbRepository.GetAsync(System.Int32)
  - Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync(IEnumerable{RepoDb.QueryField},Mix.Shared.Models.PagingRequestModel)
  - Mix.RepoDb.Repositories.MixRepoDbRepository.Init(System.String)
  - Mix.RepoDb.Repositories.MixRepoDbRepository.Init(System.String,Mix.Heart.Enums.MixDatabaseProvider,System.String)
  - Mix.RepoDb.Repositories.MixRepoDbRepository.InsertAsync(Newtonsoft.Json.Linq.JObject,System.Data.IDbTransaction)
  - Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync(List{System.Object},System.Data.IDbTransaction)
  - Mix.RepoDb.Repositories.MixRepoDbRepository.Trace
  - Mix.RepoDb.Repositories.MixRepoDbRepository.UpdateAsync(Newtonsoft.Json.Linq.JObject,System.Data.IDbTransaction)
  langs:
  - csharp
  - vb
  name: MixRepoDbRepository
  nameWithType: MixRepoDbRepository
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository
  type: Class
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: MixRepoDbRepository
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 20
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public class MixRepoDbRepository
    content.vb: Public Class MixRepoDbRepository
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.Trace
  commentId: P:Mix.RepoDb.Repositories.MixRepoDbRepository.Trace
  id: Trace
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: Trace
  nameWithType: MixRepoDbRepository.Trace
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.Trace
  type: Property
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Trace
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 24
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public ITrace Trace { get; }
    parameters: []
    return:
      type: RepoDb.Interfaces.ITrace
    content.vb: Public ReadOnly Property Trace As ITrace
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.Trace*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.Cache
  commentId: P:Mix.RepoDb.Repositories.MixRepoDbRepository.Cache
  id: Cache
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: Cache
  nameWithType: MixRepoDbRepository.Cache
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.Cache
  type: Property
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Cache
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 26
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public ICache Cache { get; }
    parameters: []
    return:
      type: RepoDb.Interfaces.ICache
    content.vb: Public ReadOnly Property Cache As ICache
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.Cache*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.ConnectionString
  commentId: P:Mix.RepoDb.Repositories.MixRepoDbRepository.ConnectionString
  id: ConnectionString
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: MixRepoDbRepository.ConnectionString
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.ConnectionString
  type: Property
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ConnectionString
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 29
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public string ConnectionString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ConnectionString As String
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.ConnectionString*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.DatabaseProvider
  commentId: P:Mix.RepoDb.Repositories.MixRepoDbRepository.DatabaseProvider
  id: DatabaseProvider
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: DatabaseProvider
  nameWithType: MixRepoDbRepository.DatabaseProvider
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.DatabaseProvider
  type: Property
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DatabaseProvider
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 30
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public MixDatabaseProvider DatabaseProvider { get; set; }
    parameters: []
    return:
      type: Mix.Heart.Enums.MixDatabaseProvider
    content.vb: Public Property DatabaseProvider As MixDatabaseProvider
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.DatabaseProvider*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.#ctor(RepoDb.Interfaces.ICache,Mix.Database.Services.DatabaseService,Mix.Heart.UnitOfWork.UnitOfWorkInfo{Mix.Database.Entities.Cms.MixCmsContext})
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.#ctor(RepoDb.Interfaces.ICache,Mix.Database.Services.DatabaseService,Mix.Heart.UnitOfWork.UnitOfWorkInfo{Mix.Database.Entities.Cms.MixCmsContext})
  id: '#ctor(RepoDb.Interfaces.ICache,Mix.Database.Services.DatabaseService,Mix.Heart.UnitOfWork.UnitOfWorkInfo{Mix.Database.Entities.Cms.MixCmsContext})'
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: MixRepoDbRepository(ICache, DatabaseService, UnitOfWorkInfo<MixCmsContext>)
  nameWithType: MixRepoDbRepository.MixRepoDbRepository(ICache, DatabaseService, UnitOfWorkInfo<MixCmsContext>)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.MixRepoDbRepository(RepoDb.Interfaces.ICache, Mix.Database.Services.DatabaseService, Mix.Heart.UnitOfWork.UnitOfWorkInfo<Mix.Database.Entities.Cms.MixCmsContext>)
  type: Constructor
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 36
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public MixRepoDbRepository(ICache cache, DatabaseService databaseService, UnitOfWorkInfo<MixCmsContext> uow)
    parameters:
    - id: cache
      type: RepoDb.Interfaces.ICache
    - id: databaseService
      type: Mix.Database.Services.DatabaseService
    - id: uow
      type: Mix.Heart.UnitOfWork.UnitOfWorkInfo{Mix.Database.Entities.Cms.MixCmsContext}
    content.vb: Public Sub New(cache As ICache, databaseService As DatabaseService, uow As UnitOfWorkInfo(Of MixCmsContext))
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.#ctor*
  nameWithType.vb: MixRepoDbRepository.MixRepoDbRepository(ICache, DatabaseService, UnitOfWorkInfo(Of MixCmsContext))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.MixRepoDbRepository.MixRepoDbRepository(RepoDb.Interfaces.ICache, Mix.Database.Services.DatabaseService, Mix.Heart.UnitOfWork.UnitOfWorkInfo(Of Mix.Database.Entities.Cms.MixCmsContext))
  name.vb: MixRepoDbRepository(ICache, DatabaseService, UnitOfWorkInfo(Of MixCmsContext))
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.Init(System.String)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.Init(System.String)
  id: Init(System.String)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: Init(String)
  nameWithType: MixRepoDbRepository.Init(String)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.Init(System.String)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Init
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 52
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public void Init(string tableName)
    parameters:
    - id: tableName
      type: System.String
    content.vb: Public Sub Init(tableName As String)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.Init*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.Init(System.String,Mix.Heart.Enums.MixDatabaseProvider,System.String)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.Init(System.String,Mix.Heart.Enums.MixDatabaseProvider,System.String)
  id: Init(System.String,Mix.Heart.Enums.MixDatabaseProvider,System.String)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: Init(String, MixDatabaseProvider, String)
  nameWithType: MixRepoDbRepository.Init(String, MixDatabaseProvider, String)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.Init(System.String, Mix.Heart.Enums.MixDatabaseProvider, System.String)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Init
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 59
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public void Init(string tableName, MixDatabaseProvider databaseProvider, string connectionString)
    parameters:
    - id: tableName
      type: System.String
    - id: databaseProvider
      type: Mix.Heart.Enums.MixDatabaseProvider
    - id: connectionString
      type: System.String
    content.vb: Public Sub Init(tableName As String, databaseProvider As MixDatabaseProvider, connectionString As String)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.Init*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.ExecuteCommand(System.String)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.ExecuteCommand(System.String)
  id: ExecuteCommand(System.String)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: ExecuteCommand(String)
  nameWithType: MixRepoDbRepository.ExecuteCommand(String)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.ExecuteCommand(System.String)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ExecuteCommand
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 68
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<int> ExecuteCommand(string commandSql)
    parameters:
    - id: commandSql
      type: System.String
    return:
      type: Task{System.Int32}
    content.vb: Public Function ExecuteCommand(commandSql As String) As Task(Of Integer)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.ExecuteCommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync(IEnumerable{RepoDb.QueryField},Mix.Shared.Models.PagingRequestModel)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync(IEnumerable{RepoDb.QueryField},Mix.Shared.Models.PagingRequestModel)
  id: GetPagingAsync(IEnumerable{RepoDb.QueryField},Mix.Shared.Models.PagingRequestModel)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: GetPagingAsync(IEnumerable<QueryField>, PagingRequestModel)
  nameWithType: MixRepoDbRepository.GetPagingAsync(IEnumerable<QueryField>, PagingRequestModel)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync(IEnumerable<RepoDb.QueryField>, Mix.Shared.Models.PagingRequestModel)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetPagingAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 76
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<PagingResponseModel<dynamic>> GetPagingAsync(IEnumerable<QueryField> queryFields, PagingRequestModel pagingRequest)
    parameters:
    - id: queryFields
      type: IEnumerable{RepoDb.QueryField}
    - id: pagingRequest
      type: Mix.Shared.Models.PagingRequestModel
    return:
      type: Task{Mix.Heart.Models.PagingResponseModel{System.Object}}
    content.vb: Public Function GetPagingAsync(queryFields As IEnumerable(Of QueryField), pagingRequest As PagingRequestModel) As Task(Of PagingResponseModel(Of Object))
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync*
  nameWithType.vb: MixRepoDbRepository.GetPagingAsync(IEnumerable(Of QueryField), PagingRequestModel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync(IEnumerable(Of RepoDb.QueryField), Mix.Shared.Models.PagingRequestModel)
  name.vb: GetPagingAsync(IEnumerable(Of QueryField), PagingRequestModel)
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAllAsync
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.GetAllAsync
  id: GetAllAsync
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: GetAllAsync()
  nameWithType: MixRepoDbRepository.GetAllAsync()
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAllAsync()
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetAllAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 101
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<List<dynamic>?> GetAllAsync()
    return:
      type: Task{System.Nullable{List{System.Object}}}
    content.vb: Public Function GetAllAsync As Task(Of List(Of Object)?)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAllAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAsync(System.Int32)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.GetAsync(System.Int32)
  id: GetAsync(System.Int32)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: GetAsync(Int32)
  nameWithType: MixRepoDbRepository.GetAsync(Int32)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 120
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<dynamic> GetAsync(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: Task{System.Object}
    content.vb: Public Function GetAsync(id As Integer) As Task(Of Object)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertAsync(Newtonsoft.Json.Linq.JObject,System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.InsertAsync(Newtonsoft.Json.Linq.JObject,System.Data.IDbTransaction)
  id: InsertAsync(Newtonsoft.Json.Linq.JObject,System.Data.IDbTransaction)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: InsertAsync(JObject, IDbTransaction)
  nameWithType: MixRepoDbRepository.InsertAsync(JObject, IDbTransaction)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertAsync(Newtonsoft.Json.Linq.JObject, System.Data.IDbTransaction)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InsertAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 135
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<object> InsertAsync(JObject entity, IDbTransaction transaction = null)
    parameters:
    - id: entity
      type: Newtonsoft.Json.Linq.JObject
    - id: transaction
      type: System.Data.IDbTransaction
    return:
      type: Task{System.Object}
    content.vb: Public Function InsertAsync(entity As JObject, transaction As IDbTransaction = Nothing) As Task(Of Object)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync(List{System.Object},System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync(List{System.Object},System.Data.IDbTransaction)
  id: InsertManyAsync(List{System.Object},System.Data.IDbTransaction)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: InsertManyAsync(List<Object>, IDbTransaction)
  nameWithType: MixRepoDbRepository.InsertManyAsync(List<Object>, IDbTransaction)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync(List<System.Object>, System.Data.IDbTransaction)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InsertManyAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 151
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<int?> InsertManyAsync(List<dynamic> entities, IDbTransaction transaction = null)
    parameters:
    - id: entities
      type: List{System.Object}
    - id: transaction
      type: System.Data.IDbTransaction
    return:
      type: Task{System.Nullable{System.Int32}}
    content.vb: Public Function InsertManyAsync(entities As List(Of Object), transaction As IDbTransaction = Nothing) As Task(Of Integer?)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync*
  nameWithType.vb: MixRepoDbRepository.InsertManyAsync(List(Of Object), IDbTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync(List(Of System.Object), System.Data.IDbTransaction)
  name.vb: InsertManyAsync(List(Of Object), IDbTransaction)
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.UpdateAsync(Newtonsoft.Json.Linq.JObject,System.Data.IDbTransaction)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.UpdateAsync(Newtonsoft.Json.Linq.JObject,System.Data.IDbTransaction)
  id: UpdateAsync(Newtonsoft.Json.Linq.JObject,System.Data.IDbTransaction)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: UpdateAsync(JObject, IDbTransaction)
  nameWithType: MixRepoDbRepository.UpdateAsync(JObject, IDbTransaction)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.UpdateAsync(Newtonsoft.Json.Linq.JObject, System.Data.IDbTransaction)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: UpdateAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 165
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<object> UpdateAsync(JObject entity, IDbTransaction transaction = null)
    parameters:
    - id: entity
      type: Newtonsoft.Json.Linq.JObject
    - id: transaction
      type: System.Data.IDbTransaction
    return:
      type: Task{System.Object}
    content.vb: Public Function UpdateAsync(entity As JObject, transaction As IDbTransaction = Nothing) As Task(Of Object)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.UpdateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.DeleteAsync(System.Int32)
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.DeleteAsync(System.Int32)
  id: DeleteAsync(System.Int32)
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: DeleteAsync(Int32)
  nameWithType: MixRepoDbRepository.DeleteAsync(Int32)
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.DeleteAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DeleteAsync
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 181
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public Task<int> DeleteAsync(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: Task{System.Int32}
    content.vb: Public Function DeleteAsync(id As Integer) As Task(Of Integer)
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.CreateConnection
  commentId: M:Mix.RepoDb.Repositories.MixRepoDbRepository.CreateConnection
  id: CreateConnection
  parent: Mix.RepoDb.Repositories.MixRepoDbRepository
  langs:
  - csharp
  - vb
  name: CreateConnection()
  nameWithType: MixRepoDbRepository.CreateConnection()
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.CreateConnection()
  type: Method
  source:
    remote:
      path: src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: CreateConnection
    path: ../../mix.core/src/platform/mix.repodb/Repositories/MixRepoDbRepository.cs
    startLine: 235
  assemblies:
  - mix.repodb
  namespace: Mix.RepoDb.Repositories
  syntax:
    content: public IDbConnection CreateConnection()
    return:
      type: System.Data.IDbConnection
    content.vb: Public Function CreateConnection As IDbConnection
  overload: Mix.RepoDb.Repositories.MixRepoDbRepository.CreateConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Mix.RepoDb.Repositories
  commentId: N:Mix.RepoDb.Repositories
  name: Mix.RepoDb.Repositories
  nameWithType: Mix.RepoDb.Repositories
  fullName: Mix.RepoDb.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.Trace*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.Trace
  name: Trace
  nameWithType: MixRepoDbRepository.Trace
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.Trace
- uid: RepoDb.Interfaces.ITrace
  commentId: T:RepoDb.Interfaces.ITrace
  parent: RepoDb.Interfaces
  isExternal: true
  name: ITrace
  nameWithType: ITrace
  fullName: RepoDb.Interfaces.ITrace
- uid: RepoDb.Interfaces
  commentId: N:RepoDb.Interfaces
  isExternal: true
  name: RepoDb.Interfaces
  nameWithType: RepoDb.Interfaces
  fullName: RepoDb.Interfaces
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.Cache*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.Cache
  name: Cache
  nameWithType: MixRepoDbRepository.Cache
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.Cache
- uid: RepoDb.Interfaces.ICache
  commentId: T:RepoDb.Interfaces.ICache
  parent: RepoDb.Interfaces
  isExternal: true
  name: ICache
  nameWithType: ICache
  fullName: RepoDb.Interfaces.ICache
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.ConnectionString*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.ConnectionString
  name: ConnectionString
  nameWithType: MixRepoDbRepository.ConnectionString
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.ConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.DatabaseProvider*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.DatabaseProvider
  name: DatabaseProvider
  nameWithType: MixRepoDbRepository.DatabaseProvider
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.DatabaseProvider
- uid: Mix.Heart.Enums.MixDatabaseProvider
  commentId: T:Mix.Heart.Enums.MixDatabaseProvider
  parent: Mix.Heart.Enums
  name: MixDatabaseProvider
  nameWithType: MixDatabaseProvider
  fullName: Mix.Heart.Enums.MixDatabaseProvider
- uid: Mix.Heart.Enums
  commentId: N:Mix.Heart.Enums
  name: Mix.Heart.Enums
  nameWithType: Mix.Heart.Enums
  fullName: Mix.Heart.Enums
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.#ctor*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.#ctor
  name: MixRepoDbRepository
  nameWithType: MixRepoDbRepository.MixRepoDbRepository
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.MixRepoDbRepository
- uid: Mix.Database.Services.DatabaseService
  commentId: T:Mix.Database.Services.DatabaseService
  parent: Mix.Database.Services
  name: DatabaseService
  nameWithType: DatabaseService
  fullName: Mix.Database.Services.DatabaseService
- uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo{Mix.Database.Entities.Cms.MixCmsContext}
  commentId: T:Mix.Heart.UnitOfWork.UnitOfWorkInfo{Mix.Database.Entities.Cms.MixCmsContext}
  parent: Mix.Heart.UnitOfWork
  definition: Mix.Heart.UnitOfWork.UnitOfWorkInfo`1
  name: UnitOfWorkInfo<MixCmsContext>
  nameWithType: UnitOfWorkInfo<MixCmsContext>
  fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo<Mix.Database.Entities.Cms.MixCmsContext>
  nameWithType.vb: UnitOfWorkInfo(Of MixCmsContext)
  fullName.vb: Mix.Heart.UnitOfWork.UnitOfWorkInfo(Of Mix.Database.Entities.Cms.MixCmsContext)
  name.vb: UnitOfWorkInfo(Of MixCmsContext)
  spec.csharp:
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo`1
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Database.Entities.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Database.Entities.Cms.MixCmsContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo`1
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Database.Entities.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Database.Entities.Cms.MixCmsContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Database.Services
  commentId: N:Mix.Database.Services
  name: Mix.Database.Services
  nameWithType: Mix.Database.Services
  fullName: Mix.Database.Services
- uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo`1
  commentId: T:Mix.Heart.UnitOfWork.UnitOfWorkInfo`1
  name: UnitOfWorkInfo<T>
  nameWithType: UnitOfWorkInfo<T>
  fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo<T>
  nameWithType.vb: UnitOfWorkInfo(Of T)
  fullName.vb: Mix.Heart.UnitOfWork.UnitOfWorkInfo(Of T)
  name.vb: UnitOfWorkInfo(Of T)
  spec.csharp:
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo`1
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo`1
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.UnitOfWork
  commentId: N:Mix.Heart.UnitOfWork
  name: Mix.Heart.UnitOfWork
  nameWithType: Mix.Heart.UnitOfWork
  fullName: Mix.Heart.UnitOfWork
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.Init*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.Init
  name: Init
  nameWithType: MixRepoDbRepository.Init
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.Init
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.ExecuteCommand*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.ExecuteCommand
  name: ExecuteCommand
  nameWithType: MixRepoDbRepository.ExecuteCommand
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.ExecuteCommand
- uid: Task{System.Int32}
  commentId: '!:Task{System.Int32}'
  definition: Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync
  name: GetPagingAsync
  nameWithType: MixRepoDbRepository.GetPagingAsync
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.GetPagingAsync
- uid: IEnumerable{RepoDb.QueryField}
  commentId: '!:IEnumerable{RepoDb.QueryField}'
  definition: IEnumerable`1
  name: IEnumerable<QueryField>
  nameWithType: IEnumerable<QueryField>
  fullName: IEnumerable<RepoDb.QueryField>
  nameWithType.vb: IEnumerable(Of QueryField)
  fullName.vb: IEnumerable(Of RepoDb.QueryField)
  name.vb: IEnumerable(Of QueryField)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: RepoDb.QueryField
    name: QueryField
    nameWithType: QueryField
    fullName: RepoDb.QueryField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: RepoDb.QueryField
    name: QueryField
    nameWithType: QueryField
    fullName: RepoDb.QueryField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Shared.Models.PagingRequestModel
  commentId: T:Mix.Shared.Models.PagingRequestModel
  parent: Mix.Shared.Models
  name: PagingRequestModel
  nameWithType: PagingRequestModel
  fullName: Mix.Shared.Models.PagingRequestModel
- uid: Task{Mix.Heart.Models.PagingResponseModel{System.Object}}
  commentId: '!:Task{Mix.Heart.Models.PagingResponseModel{System.Object}}'
  definition: Task`1
  name: Task<PagingResponseModel<Object>>
  nameWithType: Task<PagingResponseModel<Object>>
  fullName: Task<Mix.Heart.Models.PagingResponseModel<System.Object>>
  nameWithType.vb: Task(Of PagingResponseModel(Of ))
  fullName.vb: Task(Of Mix.Heart.Models.PagingResponseModel(Of ))
  name.vb: Task(Of PagingResponseModel(Of ))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Heart.Models.PagingResponseModel`1
    name: PagingResponseModel
    nameWithType: PagingResponseModel
    fullName: Mix.Heart.Models.PagingResponseModel
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Heart.Models.PagingResponseModel`1
    name: PagingResponseModel
    nameWithType: PagingResponseModel
    fullName: Mix.Heart.Models.PagingResponseModel
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Shared.Models
  commentId: N:Mix.Shared.Models
  name: Mix.Shared.Models
  nameWithType: Mix.Shared.Models
  fullName: Mix.Shared.Models
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAllAsync*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.GetAllAsync
  name: GetAllAsync
  nameWithType: MixRepoDbRepository.GetAllAsync
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAllAsync
- uid: Task{System.Nullable{List{System.Object}}}
  commentId: '!:Task{System.Nullable{List{System.Object}}}'
  definition: Task`1
  name: Task<Nullable<List<Object>>>
  nameWithType: Task<Nullable<List<Object>>>
  fullName: Task<System.Nullable<List<System.Object>>>
  nameWithType.vb: Task(Of Nullable(Of List(Of )))
  fullName.vb: Task(Of System.Nullable(Of List(Of )))
  name.vb: Task(Of Nullable(Of List(Of )))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAsync*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.GetAsync
  name: GetAsync
  nameWithType: MixRepoDbRepository.GetAsync
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.GetAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Task{System.Object}
  commentId: '!:Task{System.Object}'
  definition: Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertAsync*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.InsertAsync
  name: InsertAsync
  nameWithType: MixRepoDbRepository.InsertAsync
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertAsync
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: System.Data.IDbTransaction
  commentId: T:System.Data.IDbTransaction
  parent: System.Data
  isExternal: true
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync
  name: InsertManyAsync
  nameWithType: MixRepoDbRepository.InsertManyAsync
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.InsertManyAsync
- uid: List{System.Object}
  commentId: '!:List{System.Object}'
  definition: List`1
  name: List<Object>
  nameWithType: List<Object>
  fullName: List<System.Object>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{System.Nullable{System.Int32}}
  commentId: '!:Task{System.Nullable{System.Int32}}'
  definition: Task`1
  name: Task<Nullable<Int32>>
  nameWithType: Task<Nullable<Int32>>
  fullName: Task<System.Nullable<System.Int32>>
  nameWithType.vb: Task(Of Nullable(Of Int32))
  fullName.vb: Task(Of System.Nullable(Of System.Int32))
  name.vb: Task(Of Nullable(Of Int32))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.UpdateAsync*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.UpdateAsync
  name: UpdateAsync
  nameWithType: MixRepoDbRepository.UpdateAsync
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.UpdateAsync
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.DeleteAsync*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.DeleteAsync
  name: DeleteAsync
  nameWithType: MixRepoDbRepository.DeleteAsync
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.DeleteAsync
- uid: Mix.RepoDb.Repositories.MixRepoDbRepository.CreateConnection*
  commentId: Overload:Mix.RepoDb.Repositories.MixRepoDbRepository.CreateConnection
  name: CreateConnection
  nameWithType: MixRepoDbRepository.CreateConnection
  fullName: Mix.RepoDb.Repositories.MixRepoDbRepository.CreateConnection
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  parent: System.Data
  isExternal: true
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
