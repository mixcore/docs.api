### YamlMime:ManagedReference
items:
- uid: Mix.Heart.Extensions.ExpressionExtensions
  commentId: T:Mix.Heart.Extensions.ExpressionExtensions
  id: ExpressionExtensions
  parent: Mix.Heart.Extensions
  children:
  - Mix.Heart.Extensions.ExpressionExtensions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Mix.Heart.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  - Mix.Heart.Extensions.ExpressionExtensions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Mix.Heart.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Mix.Heart.Extensions.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - Mix.Heart.Extensions.ExpressionExtensions.OrNot``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  langs:
  - csharp
  - vb
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: Mix.Heart.Extensions.ExpressionExtensions
  type: Class
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: ExpressionExtensions
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 7
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static class ExpressionExtensions
    content.vb: Public Module ExpressionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Mix.Heart.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  commentId: M:Mix.Heart.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  id: Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  isExtensionMethod: true
  parent: Mix.Heart.Extensions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Compose<T>(Expression<T>, Expression<T>, Func<Expression, Expression, Expression>)
  nameWithType: ExpressionExtensions.Compose<T>(Expression<T>, Expression<T>, Func<Expression, Expression, Expression>)
  fullName: Mix.Heart.Extensions.ExpressionExtensions.Compose<T>(System.Linq.Expressions.Expression<T>, System.Linq.Expressions.Expression<T>, System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: Compose
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 9
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static Expression<T> Compose<T>(this Expression<T> firstExpr, Expression<T> secondExpr, Func<Expression, Expression, Expression> merge)
    parameters:
    - id: firstExpr
      type: System.Linq.Expressions.Expression{{T}}
    - id: secondExpr
      type: System.Linq.Expressions.Expression{{T}}
    - id: merge
      type: System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Compose(Of T)(firstExpr As Expression(Of T), secondExpr As Expression(Of T), merge As Func(Of Expression, Expression, Expression)) As Expression(Of T)
  overload: Mix.Heart.Extensions.ExpressionExtensions.Compose*
  nameWithType.vb: ExpressionExtensions.Compose(Of T)(Expression(Of T), Expression(Of T), Func(Of Expression, Expression, Expression))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Heart.Extensions.ExpressionExtensions.Compose(Of T)(System.Linq.Expressions.Expression(Of T), System.Linq.Expressions.Expression(Of T), System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression))
  name.vb: Compose(Of T)(Expression(Of T), Expression(Of T), Func(Of Expression, Expression, Expression))
- uid: Mix.Heart.Extensions.ExpressionExtensions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Mix.Heart.Extensions.ExpressionExtensions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Mix.Heart.Extensions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: AndAlso<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.AndAlso<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  fullName: Mix.Heart.Extensions.ExpressionExtensions.AndAlso<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: AndAlso
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 22
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static Expression<Func<T, bool>> AndAlso<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: second
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AndAlso(Of T)(first As Expression(Of Func(Of T, Boolean)), second As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Mix.Heart.Extensions.ExpressionExtensions.AndAlso*
  nameWithType.vb: ExpressionExtensions.AndAlso(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Heart.Extensions.ExpressionExtensions.AndAlso(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: AndAlso(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: AndAlsoNot``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Mix.Heart.Extensions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: AndAlsoNot<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.AndAlsoNot<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  fullName: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: AndAlsoNot
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 27
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static Expression<Func<T, bool>> AndAlsoNot<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: second
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AndAlsoNot(Of T)(first As Expression(Of Func(Of T, Boolean)), second As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot*
  nameWithType.vb: ExpressionExtensions.AndAlsoNot(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: AndAlsoNot(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: AndAlsoIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Mix.Heart.Extensions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: AndAlsoIf<T>(Expression<Func<T, Boolean>>, Boolean, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.AndAlsoIf<T>(Expression<Func<T, Boolean>>, Boolean, Expression<Func<T, Boolean>>)
  fullName: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: AndAlsoIf
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 32
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static Expression<Func<T, bool>> AndAlsoIf<T>(this Expression<Func<T, bool>> first, bool condition, Expression<Func<T, bool>> second)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: condition
      type: System.Boolean
    - id: second
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AndAlsoIf(Of T)(first As Expression(Of Func(Of T, Boolean)), condition As Boolean, second As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf*
  nameWithType.vb: ExpressionExtensions.AndAlsoIf(Of T)(Expression(Of Func(Of T, Boolean)), Boolean, Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Boolean, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: AndAlsoIf(Of T)(Expression(Of Func(Of T, Boolean)), Boolean, Expression(Of Func(Of T, Boolean)))
- uid: Mix.Heart.Extensions.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Mix.Heart.Extensions.ExpressionExtensions.OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: OrIf``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Mix.Heart.Extensions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OrIf<T>(Expression<Func<T, Boolean>>, Boolean, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.OrIf<T>(Expression<Func<T, Boolean>>, Boolean, Expression<Func<T, Boolean>>)
  fullName: Mix.Heart.Extensions.ExpressionExtensions.OrIf<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Boolean, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: OrIf
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 39
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static Expression<Func<T, bool>> OrIf<T>(this Expression<Func<T, bool>> first, bool condition, Expression<Func<T, bool>> second)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: condition
      type: System.Boolean
    - id: second
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrIf(Of T)(first As Expression(Of Func(Of T, Boolean)), condition As Boolean, second As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Mix.Heart.Extensions.ExpressionExtensions.OrIf*
  nameWithType.vb: ExpressionExtensions.OrIf(Of T)(Expression(Of Func(Of T, Boolean)), Boolean, Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Heart.Extensions.ExpressionExtensions.OrIf(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Boolean, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: OrIf(Of T)(Expression(Of Func(Of T, Boolean)), Boolean, Expression(Of Func(Of T, Boolean)))
- uid: Mix.Heart.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Mix.Heart.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Mix.Heart.Extensions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Or<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.Or<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  fullName: Mix.Heart.Extensions.ExpressionExtensions.Or<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: Or
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 46
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: second
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Or(Of T)(first As Expression(Of Func(Of T, Boolean)), second As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Mix.Heart.Extensions.ExpressionExtensions.Or*
  nameWithType.vb: ExpressionExtensions.Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Heart.Extensions.ExpressionExtensions.Or(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: Mix.Heart.Extensions.ExpressionExtensions.OrNot``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Mix.Heart.Extensions.ExpressionExtensions.OrNot``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: OrNot``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Mix.Heart.Extensions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OrNot<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.OrNot<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  fullName: Mix.Heart.Extensions.ExpressionExtensions.OrNot<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: OrNot
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 51
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static Expression<Func<T, bool>> OrNot<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second)
    parameters:
    - id: first
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    - id: second
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrNot(Of T)(first As Expression(Of Func(Of T, Boolean)), second As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Mix.Heart.Extensions.ExpressionExtensions.OrNot*
  nameWithType.vb: ExpressionExtensions.OrNot(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Heart.Extensions.ExpressionExtensions.OrNot(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: OrNot(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: Mix.Heart.Extensions.ExpressionExtensions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:Mix.Heart.Extensions.ExpressionExtensions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: Mix.Heart.Extensions.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Not<T>(Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.Not<T>(Expression<Func<T, Boolean>>)
  fullName: Mix.Heart.Extensions.ExpressionExtensions.Not<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Extensions/ExpressionExtensions.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: Not
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Extensions/ExpressionExtensions.cs
    startLine: 56
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Extensions
  syntax:
    content: public static Expression<Func<T, bool>> Not<T>(this Expression<Func<T, bool>> one)
    parameters:
    - id: one
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Not(Of T)(one As Expression(Of Func(Of T, Boolean))) As Expression(Of Func(Of T, Boolean))
  overload: Mix.Heart.Extensions.ExpressionExtensions.Not*
  nameWithType.vb: ExpressionExtensions.Not(Of T)(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mix.Heart.Extensions.ExpressionExtensions.Not(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Not(Of T)(Expression(Of Func(Of T, Boolean)))
references:
- uid: Mix.Heart.Extensions
  commentId: N:Mix.Heart.Extensions
  name: Mix.Heart.Extensions
  nameWithType: Mix.Heart.Extensions
  fullName: Mix.Heart.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Heart.Extensions.ExpressionExtensions.Compose*
  commentId: Overload:Mix.Heart.Extensions.ExpressionExtensions.Compose
  name: Compose
  nameWithType: ExpressionExtensions.Compose
  fullName: Mix.Heart.Extensions.ExpressionExtensions.Compose
- uid: System.Linq.Expressions.Expression{{T}}
  commentId: T:System.Linq.Expressions.Expression{``0}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<T>
  nameWithType: Expression<T>
  fullName: System.Linq.Expressions.Expression<T>
  nameWithType.vb: Expression(Of T)
  fullName.vb: System.Linq.Expressions.Expression(Of T)
  name.vb: Expression(Of T)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
  commentId: T:System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression}
  parent: System
  definition: System.Func`3
  name: Func<Expression, Expression, Expression>
  nameWithType: Func<Expression, Expression, Expression>
  fullName: System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>
  nameWithType.vb: Func(Of Expression, Expression, Expression)
  fullName.vb: System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  name.vb: Func(Of Expression, Expression, Expression)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Extensions.ExpressionExtensions.AndAlso*
  commentId: Overload:Mix.Heart.Extensions.ExpressionExtensions.AndAlso
  name: AndAlso
  nameWithType: ExpressionExtensions.AndAlso
  fullName: Mix.Heart.Extensions.ExpressionExtensions.AndAlso
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot*
  commentId: Overload:Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot
  name: AndAlsoNot
  nameWithType: ExpressionExtensions.AndAlsoNot
  fullName: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoNot
- uid: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf*
  commentId: Overload:Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf
  name: AndAlsoIf
  nameWithType: ExpressionExtensions.AndAlsoIf
  fullName: Mix.Heart.Extensions.ExpressionExtensions.AndAlsoIf
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mix.Heart.Extensions.ExpressionExtensions.OrIf*
  commentId: Overload:Mix.Heart.Extensions.ExpressionExtensions.OrIf
  name: OrIf
  nameWithType: ExpressionExtensions.OrIf
  fullName: Mix.Heart.Extensions.ExpressionExtensions.OrIf
- uid: Mix.Heart.Extensions.ExpressionExtensions.Or*
  commentId: Overload:Mix.Heart.Extensions.ExpressionExtensions.Or
  name: Or
  nameWithType: ExpressionExtensions.Or
  fullName: Mix.Heart.Extensions.ExpressionExtensions.Or
- uid: Mix.Heart.Extensions.ExpressionExtensions.OrNot*
  commentId: Overload:Mix.Heart.Extensions.ExpressionExtensions.OrNot
  name: OrNot
  nameWithType: ExpressionExtensions.OrNot
  fullName: Mix.Heart.Extensions.ExpressionExtensions.OrNot
- uid: Mix.Heart.Extensions.ExpressionExtensions.Not*
  commentId: Overload:Mix.Heart.Extensions.ExpressionExtensions.Not
  name: Not
  nameWithType: ExpressionExtensions.Not
  fullName: Mix.Heart.Extensions.ExpressionExtensions.Not
