### YamlMime:ManagedReference
items:
- uid: Mix.Shared.Services.HttpService
  commentId: T:Mix.Shared.Services.HttpService
  id: HttpService
  parent: Mix.Shared.Services
  children:
  - Mix.Shared.Services.HttpService.#ctor(IHttpClientFactory)
  - Mix.Shared.Services.HttpService.DeleteAsync(System.String,List{KeyValuePair{System.String,System.String}},System.String,List{KeyValuePair{System.String,System.String}})
  - Mix.Shared.Services.HttpService.DownloadAsync(System.String,System.String,System.String,System.String,IProgress{System.Int32},CancellationToken)
  - Mix.Shared.Services.HttpService.GetAsync``1(System.String,List{KeyValuePair{System.String,System.String}},System.String,List{KeyValuePair{System.String,System.String}})
  - Mix.Shared.Services.HttpService.PostAsync``2(System.String,``1,System.String,List{KeyValuePair{System.String,System.String}},System.String)
  langs:
  - csharp
  - vb
  name: HttpService
  nameWithType: HttpService
  fullName: Mix.Shared.Services.HttpService
  type: Class
  source:
    remote:
      path: src/platform/mix.shared/Services/HttpService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: HttpService
    path: ../../mix.core/src/platform/mix.shared/Services/HttpService.cs
    startLine: 9
  assemblies:
  - mix.shared
  namespace: Mix.Shared.Services
  syntax:
    content: public class HttpService
    content.vb: Public Class HttpService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Shared.Services.HttpService.#ctor(IHttpClientFactory)
  commentId: M:Mix.Shared.Services.HttpService.#ctor(IHttpClientFactory)
  id: '#ctor(IHttpClientFactory)'
  parent: Mix.Shared.Services.HttpService
  langs:
  - csharp
  - vb
  name: HttpService(IHttpClientFactory)
  nameWithType: HttpService.HttpService(IHttpClientFactory)
  fullName: Mix.Shared.Services.HttpService.HttpService(IHttpClientFactory)
  type: Constructor
  source:
    remote:
      path: src/platform/mix.shared/Services/HttpService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.shared/Services/HttpService.cs
    startLine: 13
  assemblies:
  - mix.shared
  namespace: Mix.Shared.Services
  syntax:
    content: public HttpService(IHttpClientFactory httpClientFactory)
    parameters:
    - id: httpClientFactory
      type: IHttpClientFactory
    content.vb: Public Sub New(httpClientFactory As IHttpClientFactory)
  overload: Mix.Shared.Services.HttpService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Shared.Services.HttpService.DownloadAsync(System.String,System.String,System.String,System.String,IProgress{System.Int32},CancellationToken)
  commentId: M:Mix.Shared.Services.HttpService.DownloadAsync(System.String,System.String,System.String,System.String,IProgress{System.Int32},CancellationToken)
  id: DownloadAsync(System.String,System.String,System.String,System.String,IProgress{System.Int32},CancellationToken)
  parent: Mix.Shared.Services.HttpService
  langs:
  - csharp
  - vb
  name: DownloadAsync(String, String, String, String, IProgress<Int32>, CancellationToken)
  nameWithType: HttpService.DownloadAsync(String, String, String, String, IProgress<Int32>, CancellationToken)
  fullName: Mix.Shared.Services.HttpService.DownloadAsync(System.String, System.String, System.String, System.String, IProgress<System.Int32>, CancellationToken)
  type: Method
  source:
    remote:
      path: src/platform/mix.shared/Services/HttpService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DownloadAsync
    path: ../../mix.core/src/platform/mix.shared/Services/HttpService.cs
    startLine: 23
  assemblies:
  - mix.shared
  namespace: Mix.Shared.Services
  syntax:
    content: public Task<string> DownloadAsync(string downloadUrl, string folder, string fileName, string extension, IProgress<int> progress, CancellationToken token)
    parameters:
    - id: downloadUrl
      type: System.String
    - id: folder
      type: System.String
    - id: fileName
      type: System.String
    - id: extension
      type: System.String
    - id: progress
      type: IProgress{System.Int32}
    - id: token
      type: CancellationToken
    return:
      type: Task{System.String}
    content.vb: Public Function DownloadAsync(downloadUrl As String, folder As String, fileName As String, extension As String, progress As IProgress(Of Integer), token As CancellationToken) As Task(Of String)
  overload: Mix.Shared.Services.HttpService.DownloadAsync*
  nameWithType.vb: HttpService.DownloadAsync(String, String, String, String, IProgress(Of Int32), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Shared.Services.HttpService.DownloadAsync(System.String, System.String, System.String, System.String, IProgress(Of System.Int32), CancellationToken)
  name.vb: DownloadAsync(String, String, String, String, IProgress(Of Int32), CancellationToken)
- uid: Mix.Shared.Services.HttpService.GetAsync``1(System.String,List{KeyValuePair{System.String,System.String}},System.String,List{KeyValuePair{System.String,System.String}})
  commentId: M:Mix.Shared.Services.HttpService.GetAsync``1(System.String,List{KeyValuePair{System.String,System.String}},System.String,List{KeyValuePair{System.String,System.String}})
  id: GetAsync``1(System.String,List{KeyValuePair{System.String,System.String}},System.String,List{KeyValuePair{System.String,System.String}})
  parent: Mix.Shared.Services.HttpService
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, List<KeyValuePair<String, String>>, String, List<KeyValuePair<String, String>>)
  nameWithType: HttpService.GetAsync<T>(String, List<KeyValuePair<String, String>>, String, List<KeyValuePair<String, String>>)
  fullName: Mix.Shared.Services.HttpService.GetAsync<T>(System.String, List<KeyValuePair<System.String, System.String>>, System.String, List<KeyValuePair<System.String, System.String>>)
  type: Method
  source:
    remote:
      path: src/platform/mix.shared/Services/HttpService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetAsync
    path: ../../mix.core/src/platform/mix.shared/Services/HttpService.cs
    startLine: 70
  assemblies:
  - mix.shared
  namespace: Mix.Shared.Services
  syntax:
    content: public Task<T> GetAsync<T>(string requestUrl, List<KeyValuePair<string, string>> queryParams = null, string bearerToken = null, List<KeyValuePair<string, string>> requestHeaders = null)
    parameters:
    - id: requestUrl
      type: System.String
    - id: queryParams
      type: List{KeyValuePair{System.String,System.String}}
    - id: bearerToken
      type: System.String
    - id: requestHeaders
      type: List{KeyValuePair{System.String,System.String}}
    typeParameters:
    - id: T
    return:
      type: Task{{T}}
    content.vb: Public Function GetAsync(Of T)(requestUrl As String, queryParams As List(Of KeyValuePair(Of String, String)) = Nothing, bearerToken As String = Nothing, requestHeaders As List(Of KeyValuePair(Of String, String)) = Nothing) As Task(Of T)
  overload: Mix.Shared.Services.HttpService.GetAsync*
  nameWithType.vb: HttpService.GetAsync(Of T)(String, List(Of KeyValuePair(Of String, String)), String, List(Of KeyValuePair(Of String, String)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Shared.Services.HttpService.GetAsync(Of T)(System.String, List(Of KeyValuePair(Of System.String, System.String)), System.String, List(Of KeyValuePair(Of System.String, System.String)))
  name.vb: GetAsync(Of T)(String, List(Of KeyValuePair(Of String, String)), String, List(Of KeyValuePair(Of String, String)))
- uid: Mix.Shared.Services.HttpService.DeleteAsync(System.String,List{KeyValuePair{System.String,System.String}},System.String,List{KeyValuePair{System.String,System.String}})
  commentId: M:Mix.Shared.Services.HttpService.DeleteAsync(System.String,List{KeyValuePair{System.String,System.String}},System.String,List{KeyValuePair{System.String,System.String}})
  id: DeleteAsync(System.String,List{KeyValuePair{System.String,System.String}},System.String,List{KeyValuePair{System.String,System.String}})
  parent: Mix.Shared.Services.HttpService
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, List<KeyValuePair<String, String>>, String, List<KeyValuePair<String, String>>)
  nameWithType: HttpService.DeleteAsync(String, List<KeyValuePair<String, String>>, String, List<KeyValuePair<String, String>>)
  fullName: Mix.Shared.Services.HttpService.DeleteAsync(System.String, List<KeyValuePair<System.String, System.String>>, System.String, List<KeyValuePair<System.String, System.String>>)
  type: Method
  source:
    remote:
      path: src/platform/mix.shared/Services/HttpService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DeleteAsync
    path: ../../mix.core/src/platform/mix.shared/Services/HttpService.cs
    startLine: 85
  assemblies:
  - mix.shared
  namespace: Mix.Shared.Services
  syntax:
    content: public Task DeleteAsync(string requestUrl, List<KeyValuePair<string, string>> queryParams = null, string bearerToken = null, List<KeyValuePair<string, string>> requestHeaders = null)
    parameters:
    - id: requestUrl
      type: System.String
    - id: queryParams
      type: List{KeyValuePair{System.String,System.String}}
    - id: bearerToken
      type: System.String
    - id: requestHeaders
      type: List{KeyValuePair{System.String,System.String}}
    return:
      type: Task
    content.vb: Public Function DeleteAsync(requestUrl As String, queryParams As List(Of KeyValuePair(Of String, String)) = Nothing, bearerToken As String = Nothing, requestHeaders As List(Of KeyValuePair(Of String, String)) = Nothing) As Task
  overload: Mix.Shared.Services.HttpService.DeleteAsync*
  nameWithType.vb: HttpService.DeleteAsync(String, List(Of KeyValuePair(Of String, String)), String, List(Of KeyValuePair(Of String, String)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Shared.Services.HttpService.DeleteAsync(System.String, List(Of KeyValuePair(Of System.String, System.String)), System.String, List(Of KeyValuePair(Of System.String, System.String)))
  name.vb: DeleteAsync(String, List(Of KeyValuePair(Of String, String)), String, List(Of KeyValuePair(Of String, String)))
- uid: Mix.Shared.Services.HttpService.PostAsync``2(System.String,``1,System.String,List{KeyValuePair{System.String,System.String}},System.String)
  commentId: M:Mix.Shared.Services.HttpService.PostAsync``2(System.String,``1,System.String,List{KeyValuePair{System.String,System.String}},System.String)
  id: PostAsync``2(System.String,``1,System.String,List{KeyValuePair{System.String,System.String}},System.String)
  parent: Mix.Shared.Services.HttpService
  langs:
  - csharp
  - vb
  name: PostAsync<T, T1>(String, T1, String, List<KeyValuePair<String, String>>, String)
  nameWithType: HttpService.PostAsync<T, T1>(String, T1, String, List<KeyValuePair<String, String>>, String)
  fullName: Mix.Shared.Services.HttpService.PostAsync<T, T1>(System.String, T1, System.String, List<KeyValuePair<System.String, System.String>>, System.String)
  type: Method
  source:
    remote:
      path: src/platform/mix.shared/Services/HttpService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: PostAsync
    path: ../../mix.core/src/platform/mix.shared/Services/HttpService.cs
    startLine: 100
  assemblies:
  - mix.shared
  namespace: Mix.Shared.Services
  syntax:
    content: public Task<T> PostAsync<T, T1>(string requestUrl, T1 body, string bearerToken = null, List<KeyValuePair<string, string>> requestHeaders = null, string contentType = "application/json")
    parameters:
    - id: requestUrl
      type: System.String
    - id: body
      type: '{T1}'
    - id: bearerToken
      type: System.String
    - id: requestHeaders
      type: List{KeyValuePair{System.String,System.String}}
    - id: contentType
      type: System.String
    typeParameters:
    - id: T
    - id: T1
    return:
      type: Task{{T}}
    content.vb: Public Function PostAsync(Of T, T1)(requestUrl As String, body As T1, bearerToken As String = Nothing, requestHeaders As List(Of KeyValuePair(Of String, String)) = Nothing, contentType As String = "application/json") As Task(Of T)
  overload: Mix.Shared.Services.HttpService.PostAsync*
  nameWithType.vb: HttpService.PostAsync(Of T, T1)(String, T1, String, List(Of KeyValuePair(Of String, String)), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Shared.Services.HttpService.PostAsync(Of T, T1)(System.String, T1, System.String, List(Of KeyValuePair(Of System.String, System.String)), System.String)
  name.vb: PostAsync(Of T, T1)(String, T1, String, List(Of KeyValuePair(Of String, String)), String)
references:
- uid: Mix.Shared.Services
  commentId: N:Mix.Shared.Services
  name: Mix.Shared.Services
  nameWithType: Mix.Shared.Services
  fullName: Mix.Shared.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Shared.Services.HttpService.#ctor*
  commentId: Overload:Mix.Shared.Services.HttpService.#ctor
  name: HttpService
  nameWithType: HttpService.HttpService
  fullName: Mix.Shared.Services.HttpService.HttpService
- uid: IHttpClientFactory
  commentId: '!:IHttpClientFactory'
  isExternal: true
  name: IHttpClientFactory
  nameWithType: IHttpClientFactory
  fullName: IHttpClientFactory
- uid: Mix.Shared.Services.HttpService.DownloadAsync*
  commentId: Overload:Mix.Shared.Services.HttpService.DownloadAsync
  name: DownloadAsync
  nameWithType: HttpService.DownloadAsync
  fullName: Mix.Shared.Services.HttpService.DownloadAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IProgress{System.Int32}
  commentId: '!:IProgress{System.Int32}'
  definition: IProgress`1
  name: IProgress<Int32>
  nameWithType: IProgress<Int32>
  fullName: IProgress<System.Int32>
  nameWithType.vb: IProgress(Of Int32)
  fullName.vb: IProgress(Of System.Int32)
  name.vb: IProgress(Of Int32)
  spec.csharp:
  - uid: IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CancellationToken
  commentId: '!:CancellationToken'
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IProgress`1
  isExternal: true
  name: IProgress<>
  nameWithType: IProgress<>
  fullName: IProgress<>
  nameWithType.vb: IProgress(Of )
  fullName.vb: IProgress(Of )
  name.vb: IProgress(Of )
  spec.csharp:
  - uid: IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Shared.Services.HttpService.GetAsync*
  commentId: Overload:Mix.Shared.Services.HttpService.GetAsync
  name: GetAsync
  nameWithType: HttpService.GetAsync
  fullName: Mix.Shared.Services.HttpService.GetAsync
- uid: List{KeyValuePair{System.String,System.String}}
  commentId: '!:List{KeyValuePair{System.String,System.String}}'
  definition: List`1
  name: List<KeyValuePair<String, String>>
  nameWithType: List<KeyValuePair<String, String>>
  fullName: List<KeyValuePair<System.String, System.String>>
  nameWithType.vb: List(Of KeyValuePair(Of String, String))
  fullName.vb: List(Of KeyValuePair(Of System.String, System.String))
  name.vb: List(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{{T}}
  commentId: '!:Task{``0}'
  definition: Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Shared.Services.HttpService.DeleteAsync*
  commentId: Overload:Mix.Shared.Services.HttpService.DeleteAsync
  name: DeleteAsync
  nameWithType: HttpService.DeleteAsync
  fullName: Mix.Shared.Services.HttpService.DeleteAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Mix.Shared.Services.HttpService.PostAsync*
  commentId: Overload:Mix.Shared.Services.HttpService.PostAsync
  name: PostAsync
  nameWithType: HttpService.PostAsync
  fullName: Mix.Shared.Services.HttpService.PostAsync
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T1
  commentId: '!:T1'
  name: T1
  nameWithType: T1
  fullName: T1
