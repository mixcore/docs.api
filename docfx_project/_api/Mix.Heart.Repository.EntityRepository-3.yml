### YamlMime:ManagedReference
items:
- uid: Mix.Heart.Repository.EntityRepository`3
  commentId: T:Mix.Heart.Repository.EntityRepository`3
  id: EntityRepository`3
  parent: Mix.Heart.Repository
  children:
  - Mix.Heart.Repository.EntityRepository`3.#ctor
  - Mix.Heart.Repository.EntityRepository`3.#ctor(`0)
  - Mix.Heart.Repository.EntityRepository`3.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  - Mix.Heart.Repository.EntityRepository`3.CreateAsync(`1)
  - Mix.Heart.Repository.EntityRepository`3.DeleteAsync(`1)
  - Mix.Heart.Repository.EntityRepository`3.DeleteAsync(`2)
  - Mix.Heart.Repository.EntityRepository`3.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.EntityRepository`3.DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - Mix.Heart.Repository.EntityRepository`3.GetEntities(System.Linq.IQueryable{`1})
  - Mix.Heart.Repository.EntityRepository`3.GetEntityByIdAsync(`2)
  - Mix.Heart.Repository.EntityRepository`3.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  - Mix.Heart.Repository.EntityRepository`3.GetSingleAsync(`2)
  - Mix.Heart.Repository.EntityRepository`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
  - Mix.Heart.Repository.EntityRepository`3.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  - Mix.Heart.Repository.EntityRepository`3.SaveAsync(`1)
  - Mix.Heart.Repository.EntityRepository`3.SaveFieldsAsync(`1,System.Collections.Generic.IEnumerable{Mix.Heart.Models.EntityPropertyModel})
  - Mix.Heart.Repository.EntityRepository`3.SetSelectedMembers(System.String[])
  - Mix.Heart.Repository.EntityRepository`3.ToPagingModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  - Mix.Heart.Repository.EntityRepository`3.UpdateAsync(`1)
  langs:
  - csharp
  - vb
  name: EntityRepository<TDbContext, TEntity, TPrimaryKey>
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>
  type: Class
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: EntityRepository
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 18
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: 'public class EntityRepository<TDbContext, TEntity, TPrimaryKey> : QueryRepository<TDbContext, TEntity, TPrimaryKey>, IRepositoryBase<TDbContext>, IDisposable where TDbContext : DbContext where TEntity : class, IEntity<TPrimaryKey> where TPrimaryKey : IComparable'
    typeParameters:
    - id: TDbContext
    - id: TEntity
    - id: TPrimaryKey
    content.vb: >-
      Public Class EntityRepository(Of TDbContext As DbContext, TEntity As {Class, IEntity(Of TPrimaryKey)}, TPrimaryKey As IComparable)
          Inherits QueryRepository(Of TDbContext, TEntity, TPrimaryKey)
          Implements IRepositoryBase(Of TDbContext), IDisposable
  inheritance:
  - System.Object
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  implements:
  - Mix.Heart.Repository.IRepositoryBase{{TDbContext}}
  - System.IDisposable
  inheritedMembers:
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.CacheService
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.CacheFilename
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.SelectedMembers
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.KeyMembers
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.Table
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetAllQuery
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetListQuery(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},Mix.Heart.Models.PagingModel)
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.CheckIsExists({TEntity})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.CheckIsExists(System.Func{{TEntity},System.Boolean})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},Mix.Heart.Models.PagingModel)
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetByIdAsync({TPrimaryKey})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.MaxAsync(System.Func{{TEntity},System.Int32})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetSingle(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetById({TPrimaryKey})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.Max(System.Func{{TEntity},System.Int32})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetFirst(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.ToPagingEntityAsync(System.Linq.IQueryable{{TEntity}},Mix.Heart.Models.PagingModel)
  - Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetLambda(System.String,System.Boolean)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.UowInfo
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Context
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.BeginUow
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CloseUowAsync
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CompleteUowAsync
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleExceptionAsync(System.Exception)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleException(System.Exception,System.String,System.String,System.Int32)
  - Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Dispose
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey)
  name.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey)
- uid: Mix.Heart.Repository.EntityRepository`3.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  id: '#ctor(Mix.Heart.UnitOfWork.UnitOfWorkInfo)'
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: EntityRepository(UnitOfWorkInfo)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.EntityRepository(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.EntityRepository(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  type: Constructor
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: .ctor
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 24
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public EntityRepository(UnitOfWorkInfo uowInfo)
    parameters:
    - id: uowInfo
      type: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    content.vb: Public Sub New(uowInfo As UnitOfWorkInfo)
  overload: Mix.Heart.Repository.EntityRepository`3.#ctor*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).EntityRepository(UnitOfWorkInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).EntityRepository(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
- uid: Mix.Heart.Repository.EntityRepository`3.#ctor(`0)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.#ctor(`0)
  id: '#ctor(`0)'
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: EntityRepository(TDbContext)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.EntityRepository(TDbContext)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.EntityRepository(TDbContext)
  type: Constructor
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: .ctor
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 25
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public EntityRepository(TDbContext dbContext)
    parameters:
    - id: dbContext
      type: '{TDbContext}'
    content.vb: Public Sub New(dbContext As TDbContext)
  overload: Mix.Heart.Repository.EntityRepository`3.#ctor*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).EntityRepository(TDbContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).EntityRepository(TDbContext)
- uid: Mix.Heart.Repository.EntityRepository`3.#ctor
  commentId: M:Mix.Heart.Repository.EntityRepository`3.#ctor
  id: '#ctor'
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: EntityRepository()
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.EntityRepository()
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.EntityRepository()
  type: Constructor
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: .ctor
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 27
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public EntityRepository()
    content.vb: Public Sub New
  overload: Mix.Heart.Repository.EntityRepository`3.#ctor*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).EntityRepository()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).EntityRepository()
- uid: Mix.Heart.Repository.EntityRepository`3.GetEntityByIdAsync(`2)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.GetEntityByIdAsync(`2)
  id: GetEntityByIdAsync(`2)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: GetEntityByIdAsync(TPrimaryKey)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetEntityByIdAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetEntityByIdAsync(TPrimaryKey)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: GetEntityByIdAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 33
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<TEntity> GetEntityByIdAsync(TPrimaryKey id)
    parameters:
    - id: id
      type: '{TPrimaryKey}'
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Overridable Function GetEntityByIdAsync(id As TPrimaryKey) As Task(Of TEntity)
  overload: Mix.Heart.Repository.EntityRepository`3.GetEntityByIdAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetEntityByIdAsync(TPrimaryKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetEntityByIdAsync(TPrimaryKey)
- uid: Mix.Heart.Repository.EntityRepository`3.GetSingleAsync(`2)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.GetSingleAsync(`2)
  id: GetSingleAsync(`2)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: GetSingleAsync(TPrimaryKey)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync(TPrimaryKey)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: GetSingleAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 51
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<TEntity> GetSingleAsync(TPrimaryKey id)
    parameters:
    - id: id
      type: '{TPrimaryKey}'
    return:
      type: System.Threading.Tasks.Task{{TEntity}}
    content.vb: Public Overridable Function GetSingleAsync(id As TPrimaryKey) As Task(Of TEntity)
  overload: Mix.Heart.Repository.EntityRepository`3.GetSingleAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync(TPrimaryKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync(TPrimaryKey)
- uid: Mix.Heart.Repository.EntityRepository`3.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  commentId: M:Mix.Heart.Repository.EntityRepository`3.ParseEntitiesAsync(System.Collections.Generic.List{`1})
  id: ParseEntitiesAsync(System.Collections.Generic.List{`1})
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: ParseEntitiesAsync(List<TEntity>)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.ParseEntitiesAsync(List<TEntity>)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.ParseEntitiesAsync(System.Collections.Generic.List<TEntity>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: ParseEntitiesAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 65
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected Task<List<TEntity>> ParseEntitiesAsync(List<TEntity> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.List{{TEntity}}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TEntity}}}
    content.vb: Protected Function ParseEntitiesAsync(entities As List(Of TEntity)) As Task(Of List(Of TEntity))
  overload: Mix.Heart.Repository.EntityRepository`3.ParseEntitiesAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).ParseEntitiesAsync(List(Of TEntity))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).ParseEntitiesAsync(System.Collections.Generic.List(Of TEntity))
  name.vb: ParseEntitiesAsync(List(Of TEntity))
- uid: Mix.Heart.Repository.EntityRepository`3.GetEntities(System.Linq.IQueryable{`1})
  commentId: M:Mix.Heart.Repository.EntityRepository`3.GetEntities(System.Linq.IQueryable{`1})
  id: GetEntities(System.Linq.IQueryable{`1})
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: GetEntities(IQueryable<TEntity>)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetEntities(IQueryable<TEntity>)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetEntities(System.Linq.IQueryable<TEntity>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: GetEntities
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 77
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected Task<List<TEntity>> GetEntities(IQueryable<TEntity> source)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TEntity}}}
    content.vb: Protected Function GetEntities(source As IQueryable(Of TEntity)) As Task(Of List(Of TEntity))
  overload: Mix.Heart.Repository.EntityRepository`3.GetEntities*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetEntities(IQueryable(Of TEntity))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetEntities(System.Linq.IQueryable(Of TEntity))
  name.vb: GetEntities(IQueryable(Of TEntity))
- uid: Mix.Heart.Repository.EntityRepository`3.ToPagingModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.ToPagingModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  id: ToPagingModelAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel,Mix.Heart.Services.MixCacheService)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: ToPagingModelAsync(IQueryable<TEntity>, PagingModel, MixCacheService)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingModelAsync(IQueryable<TEntity>, PagingModel, MixCacheService)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingModelAsync(System.Linq.IQueryable<TEntity>, Mix.Heart.Models.PagingModel, Mix.Heart.Services.MixCacheService)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: ToPagingModelAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 82
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: protected Task<PagingResponseModel<TEntity>> ToPagingModelAsync(IQueryable<TEntity> source, PagingModel pagingData, MixCacheService cacheService = null)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TEntity}}
    - id: pagingData
      type: Mix.Heart.Models.PagingModel
    - id: cacheService
      type: Mix.Heart.Services.MixCacheService
    return:
      type: System.Threading.Tasks.Task{Mix.Heart.Models.PagingResponseModel{{TEntity}}}
    content.vb: Protected Function ToPagingModelAsync(source As IQueryable(Of TEntity), pagingData As PagingModel, cacheService As MixCacheService = Nothing) As Task(Of PagingResponseModel(Of TEntity))
  overload: Mix.Heart.Repository.EntityRepository`3.ToPagingModelAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingModelAsync(IQueryable(Of TEntity), PagingModel, MixCacheService)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingModelAsync(System.Linq.IQueryable(Of TEntity), Mix.Heart.Models.PagingModel, Mix.Heart.Services.MixCacheService)
  name.vb: ToPagingModelAsync(IQueryable(Of TEntity), PagingModel, MixCacheService)
- uid: Mix.Heart.Repository.EntityRepository`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
  commentId: M:Mix.Heart.Repository.EntityRepository`3.MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
  id: MaxAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: MaxAsync(Expression<Func<TEntity, Int32>>)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync(Expression<Func<TEntity, Int32>>)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: MaxAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 100
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<int> MaxAsync(Expression<Func<TEntity, int>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Int32}}
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Overridable Function MaxAsync(predicate As Expression(Of Func(Of TEntity, Integer))) As Task(Of Integer)
  overload: Mix.Heart.Repository.EntityRepository`3.MaxAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync(Expression(Of Func(Of TEntity, Int32)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Int32)))
  name.vb: MaxAsync(Expression(Of Func(Of TEntity, Int32)))
- uid: Mix.Heart.Repository.EntityRepository`3.CreateAsync(`1)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.CreateAsync(`1)
  id: CreateAsync(`1)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: CreateAsync(TEntity)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.CreateAsync(TEntity)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.CreateAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: CreateAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 105
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task CreateAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function CreateAsync(entity As TEntity) As Task
  overload: Mix.Heart.Repository.EntityRepository`3.CreateAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).CreateAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).CreateAsync(TEntity)
- uid: Mix.Heart.Repository.EntityRepository`3.UpdateAsync(`1)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.UpdateAsync(`1)
  id: UpdateAsync(`1)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: UpdateAsync(TEntity)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.UpdateAsync(TEntity)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.UpdateAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: UpdateAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 124
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task UpdateAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function UpdateAsync(entity As TEntity) As Task
  overload: Mix.Heart.Repository.EntityRepository`3.UpdateAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).UpdateAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).UpdateAsync(TEntity)
- uid: Mix.Heart.Repository.EntityRepository`3.SaveAsync(`1)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.SaveAsync(`1)
  id: SaveAsync(`1)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: SaveAsync(TEntity)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.SaveAsync(TEntity)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.SaveAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: SaveAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 150
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task SaveAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function SaveAsync(entity As TEntity) As Task
  overload: Mix.Heart.Repository.EntityRepository`3.SaveAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SaveAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SaveAsync(TEntity)
- uid: Mix.Heart.Repository.EntityRepository`3.SaveFieldsAsync(`1,System.Collections.Generic.IEnumerable{Mix.Heart.Models.EntityPropertyModel})
  commentId: M:Mix.Heart.Repository.EntityRepository`3.SaveFieldsAsync(`1,System.Collections.Generic.IEnumerable{Mix.Heart.Models.EntityPropertyModel})
  id: SaveFieldsAsync(`1,System.Collections.Generic.IEnumerable{Mix.Heart.Models.EntityPropertyModel})
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: SaveFieldsAsync(TEntity, IEnumerable<EntityPropertyModel>)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.SaveFieldsAsync(TEntity, IEnumerable<EntityPropertyModel>)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.SaveFieldsAsync(TEntity, System.Collections.Generic.IEnumerable<Mix.Heart.Models.EntityPropertyModel>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: SaveFieldsAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 173
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public Task SaveFieldsAsync(TEntity entity, IEnumerable<EntityPropertyModel> properties)
    parameters:
    - id: entity
      type: '{TEntity}'
    - id: properties
      type: System.Collections.Generic.IEnumerable{Mix.Heart.Models.EntityPropertyModel}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SaveFieldsAsync(entity As TEntity, properties As IEnumerable(Of EntityPropertyModel)) As Task
  overload: Mix.Heart.Repository.EntityRepository`3.SaveFieldsAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SaveFieldsAsync(TEntity, IEnumerable(Of EntityPropertyModel))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SaveFieldsAsync(TEntity, System.Collections.Generic.IEnumerable(Of Mix.Heart.Models.EntityPropertyModel))
  name.vb: SaveFieldsAsync(TEntity, IEnumerable(Of EntityPropertyModel))
- uid: Mix.Heart.Repository.EntityRepository`3.DeleteAsync(`2)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.DeleteAsync(`2)
  id: DeleteAsync(`2)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: DeleteAsync(TPrimaryKey)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteAsync(TPrimaryKey)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: DeleteAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 204
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task DeleteAsync(TPrimaryKey id)
    parameters:
    - id: id
      type: '{TPrimaryKey}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteAsync(id As TPrimaryKey) As Task
  overload: Mix.Heart.Repository.EntityRepository`3.DeleteAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteAsync(TPrimaryKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteAsync(TPrimaryKey)
- uid: Mix.Heart.Repository.EntityRepository`3.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.EntityRepository`3.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: DeleteAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: DeleteAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: DeleteAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 230
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task DeleteAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task
  overload: Mix.Heart.Repository.EntityRepository`3.DeleteAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.EntityRepository`3.DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.EntityRepository`3.DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: DeleteManyAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: DeleteManyAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteManyAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteManyAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: DeleteManyAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 256
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task DeleteManyAsync(Expression<Func<TEntity, bool>> predicate)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteManyAsync(predicate As Expression(Of Func(Of TEntity, Boolean))) As Task
  overload: Mix.Heart.Repository.EntityRepository`3.DeleteManyAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteManyAsync(Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteManyAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: DeleteManyAsync(Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Heart.Repository.EntityRepository`3.DeleteAsync(`1)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.DeleteAsync(`1)
  id: DeleteAsync(`1)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: DeleteAsync(TEntity)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteAsync(TEntity)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteAsync(TEntity)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: DeleteAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 279
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task DeleteAsync(TEntity entity)
    parameters:
    - id: entity
      type: '{TEntity}'
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function DeleteAsync(entity As TEntity) As Task
  overload: Mix.Heart.Repository.EntityRepository`3.DeleteAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteAsync(TEntity)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteAsync(TEntity)
- uid: Mix.Heart.Repository.EntityRepository`3.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.EntityRepository`3.GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  id: GetPagingAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: GetPagingAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: GetPagingAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 308
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public virtual Task<PagingResponseModel<TEntity>> GetPagingAsync(Expression<Func<TEntity, bool>> predicate, PagingModel paging)
    parameters:
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
    - id: paging
      type: Mix.Heart.Models.PagingModel
    return:
      type: System.Threading.Tasks.Task{Mix.Heart.Models.PagingResponseModel{{TEntity}}}
    content.vb: Public Overridable Function GetPagingAsync(predicate As Expression(Of Func(Of TEntity, Boolean)), paging As PagingModel) As Task(Of PagingResponseModel(Of TEntity))
  overload: Mix.Heart.Repository.EntityRepository`3.GetPagingAsync*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
- uid: Mix.Heart.Repository.EntityRepository`3.SetSelectedMembers(System.String[])
  commentId: M:Mix.Heart.Repository.EntityRepository`3.SetSelectedMembers(System.String[])
  id: SetSelectedMembers(System.String[])
  parent: Mix.Heart.Repository.EntityRepository`3
  langs:
  - csharp
  - vb
  name: SetSelectedMembers(String[])
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.SetSelectedMembers(String[])
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.SetSelectedMembers(System.String[])
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Repository/EntityRepository.cs
      branch: f1bc78bfdfbe944f6c2070f069bbcc6ed9c06436
      repo: https://github.com/mixcore/mix.heart.git
    id: SetSelectedMembers
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Repository/EntityRepository.cs
    startLine: 320
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Repository
  syntax:
    content: public void SetSelectedMembers(string[] selectMembers)
    parameters:
    - id: selectMembers
      type: System.String[]
    content.vb: Public Sub SetSelectedMembers(selectMembers As String())
  overload: Mix.Heart.Repository.EntityRepository`3.SetSelectedMembers*
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SetSelectedMembers(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SetSelectedMembers(System.String())
  name.vb: SetSelectedMembers(String())
references:
- uid: Mix.Heart.Repository
  commentId: N:Mix.Heart.Repository
  name: Mix.Heart.Repository
  nameWithType: Mix.Heart.Repository
  fullName: Mix.Heart.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  commentId: T:Mix.Heart.Repository.RepositoryBase{`0}
  parent: Mix.Heart.Repository
  definition: Mix.Heart.Repository.RepositoryBase`1
  name: RepositoryBase<TDbContext>
  nameWithType: RepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>
  nameWithType.vb: RepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext)
  name.vb: RepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  commentId: T:Mix.Heart.Repository.QueryRepository{`0,`1,`2}
  parent: Mix.Heart.Repository
  definition: Mix.Heart.Repository.QueryRepository`3
  name: QueryRepository<TDbContext, TEntity, TPrimaryKey>
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey)
  name.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3
    name: QueryRepository
    nameWithType: QueryRepository
    fullName: Mix.Heart.Repository.QueryRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3
    name: QueryRepository
    nameWithType: QueryRepository
    fullName: Mix.Heart.Repository.QueryRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.IRepositoryBase{{TDbContext}}
  commentId: T:Mix.Heart.Repository.IRepositoryBase{`0}
  parent: Mix.Heart.Repository
  definition: Mix.Heart.Repository.IRepositoryBase`1
  name: IRepositoryBase<TDbContext>
  nameWithType: IRepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.IRepositoryBase<TDbContext>
  nameWithType.vb: IRepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.IRepositoryBase(Of TDbContext)
  name.vb: IRepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.CacheService
  commentId: P:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.CacheService
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.CacheService
  name: CacheService
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CacheService
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CacheService
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CacheService
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CacheService
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.CacheFilename
  commentId: P:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.CacheFilename
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.CacheFilename
  name: CacheFilename
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CacheFilename
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CacheFilename
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CacheFilename
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CacheFilename
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.SelectedMembers
  commentId: P:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.SelectedMembers
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.SelectedMembers
  name: SelectedMembers
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.SelectedMembers
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.SelectedMembers
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).SelectedMembers
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).SelectedMembers
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.KeyMembers
  commentId: P:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.KeyMembers
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.KeyMembers
  name: KeyMembers
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.KeyMembers
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.KeyMembers
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).KeyMembers
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).KeyMembers
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.Table
  commentId: P:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.Table
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.Table
  name: Table
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.Table
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.Table
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Table
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Table
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetAllQuery
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetAllQuery
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetAllQuery
  name: GetAllQuery()
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetAllQuery()
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetAllQuery()
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetAllQuery()
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetAllQuery()
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetAllQuery
    name: GetAllQuery
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetAllQuery
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetAllQuery
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetAllQuery
    name: GetAllQuery
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetAllQuery
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetAllQuery
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetListQuery(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetListQuery(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetListQuery(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetListQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetListQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListQuery
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetListQuery
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetListQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListQuery
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetListQuery
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetListQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  name: GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingQuery
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingQuery
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingQuery
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingQuery
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.CheckIsExists({TEntity})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.CheckIsExists(`1)
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(`1)
  name: CheckIsExists(TEntity)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists(TEntity)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists(TEntity)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists(TEntity)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(`1)
    name: CheckIsExists
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(`1)
    name: CheckIsExists
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.CheckIsExists(System.Func{{TEntity},System.Boolean})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.CheckIsExists(System.Func{`1,System.Boolean})
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(System.Func{`1,System.Boolean})
  name: CheckIsExists(Func<TEntity, Boolean>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists(Func<TEntity, Boolean>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists(System.Func<TEntity, System.Boolean>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists(Func(Of TEntity, Boolean))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists(System.Func(Of TEntity, System.Boolean))
  name.vb: CheckIsExists(Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(System.Func{`1,System.Boolean})
    name: CheckIsExists
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(System.Func{`1,System.Boolean})
    name: CheckIsExists
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  name: GetPagingEntitiesAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingEntitiesAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingEntitiesAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingEntitiesAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingEntitiesAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingEntitiesAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingEntitiesAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingEntitiesAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingEntitiesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingEntitiesAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingEntitiesAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingEntitiesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingleAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingleAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetByIdAsync({TPrimaryKey})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetByIdAsync(`2)
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetByIdAsync(`2)
  name: GetByIdAsync(TPrimaryKey)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetByIdAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetByIdAsync(TPrimaryKey)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetByIdAsync(TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetByIdAsync(TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetByIdAsync(`2)
    name: GetByIdAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetByIdAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetByIdAsync(`2)
    name: GetByIdAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetByIdAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.MaxAsync(System.Func{{TEntity},System.Int32})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.MaxAsync(System.Func{`1,System.Int32})
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.MaxAsync(System.Func{`1,System.Int32})
  name: MaxAsync(Func<TEntity, Int32>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync(Func<TEntity, Int32>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync(System.Func<TEntity, System.Int32>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync(Func(Of TEntity, Int32))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync(System.Func(Of TEntity, System.Int32))
  name.vb: MaxAsync(Func(Of TEntity, Int32))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.MaxAsync(System.Func{`1,System.Int32})
    name: MaxAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.MaxAsync(System.Func{`1,System.Int32})
    name: MaxAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirstAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirstAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirstAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirstAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirstAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirstAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetSingle(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetSingle(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingle(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingle(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingle(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingle(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetSingle(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingle
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingle
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingle
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingle
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetById({TPrimaryKey})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetById(`2)
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetById(`2)
  name: GetById(TPrimaryKey)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetById(TPrimaryKey)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetById(TPrimaryKey)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetById(TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetById(TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetById(`2)
    name: GetById
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetById
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetById
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetById(`2)
    name: GetById
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetById
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetById
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.Max(System.Func{{TEntity},System.Int32})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.Max(System.Func{`1,System.Int32})
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.Max(System.Func{`1,System.Int32})
  name: Max(Func<TEntity, Int32>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.Max(Func<TEntity, Int32>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.Max(System.Func<TEntity, System.Int32>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Max(Func(Of TEntity, Int32))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Max(System.Func(Of TEntity, System.Int32))
  name.vb: Max(Func(Of TEntity, Int32))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.Max(System.Func{`1,System.Int32})
    name: Max
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.Max
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.Max
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.Max(System.Func{`1,System.Int32})
    name: Max
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Max
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Max
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetFirst(System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: GetFirst(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirst(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirst(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirst(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirst
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirst
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirst
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirst
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.ToPagingEntityAsync(System.Linq.IQueryable{{TEntity}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.ToPagingEntityAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel)
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.ToPagingEntityAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel)
  name: ToPagingEntityAsync(IQueryable<TEntity>, PagingModel)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingEntityAsync(IQueryable<TEntity>, PagingModel)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingEntityAsync(System.Linq.IQueryable<TEntity>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingEntityAsync(IQueryable(Of TEntity), PagingModel)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingEntityAsync(System.Linq.IQueryable(Of TEntity), Mix.Heart.Models.PagingModel)
  name.vb: ToPagingEntityAsync(IQueryable(Of TEntity), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.ToPagingEntityAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel)
    name: ToPagingEntityAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingEntityAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingEntityAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.ToPagingEntityAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel)
    name: ToPagingEntityAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingEntityAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingEntityAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}.GetLambda(System.String,System.Boolean)
  commentId: M:Mix.Heart.Repository.QueryRepository{`0,`1,`2}.GetLambda(System.String,System.Boolean)
  parent: Mix.Heart.Repository.QueryRepository{{TDbContext},{TEntity},{TPrimaryKey}}
  definition: Mix.Heart.Repository.QueryRepository`3.GetLambda(System.String,System.Boolean)
  name: GetLambda(String, Boolean)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetLambda(String, Boolean)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetLambda(System.String, System.Boolean)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetLambda(String, Boolean)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetLambda(System.String, System.Boolean)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetLambda
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetLambda
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetLambda
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetLambda
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.UowInfo
  commentId: P:Mix.Heart.Repository.RepositoryBase{`0}.UowInfo
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.UowInfo
  name: UowInfo
  nameWithType: RepositoryBase<TDbContext>.UowInfo
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.UowInfo
  nameWithType.vb: RepositoryBase(Of TDbContext).UowInfo
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).UowInfo
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Context
  commentId: P:Mix.Heart.Repository.RepositoryBase{`0}.Context
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.Context
  name: Context
  nameWithType: RepositoryBase<TDbContext>.Context
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Context
  nameWithType.vb: RepositoryBase(Of TDbContext).Context
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Context
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  name: SetUowInfo(UnitOfWorkInfo)
  nameWithType: RepositoryBase<TDbContext>.SetUowInfo(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  nameWithType.vb: RepositoryBase(Of TDbContext).SetUowInfo(UnitOfWorkInfo)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase<TDbContext>.SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase(Of TDbContext).SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.BeginUow
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.BeginUow
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.BeginUow
  name: BeginUow()
  nameWithType: RepositoryBase<TDbContext>.BeginUow()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow()
  nameWithType.vb: RepositoryBase(Of TDbContext).BeginUow()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase<TDbContext>.BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase(Of TDbContext).BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CloseUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.CloseUowAsync
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  name: CloseUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CloseUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CloseUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase<TDbContext>.CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.CompleteUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.CompleteUowAsync
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  name: CompleteUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CompleteUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleExceptionAsync(System.Exception)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.HandleExceptionAsync(System.Exception)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  name: HandleExceptionAsync(Exception)
  nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync(Exception)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync(System.Exception)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleExceptionAsync(Exception)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync(System.Exception)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase(Of TDbContext).HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.HandleException(System.Exception,System.String,System.String,System.Int32)
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.HandleException(System.Exception,System.String,System.String,System.Int32)
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  name: HandleException(Exception, String, String, Int32)
  nameWithType: RepositoryBase<TDbContext>.HandleException(Exception, String, String, Int32)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException(System.Exception, System.String, System.String, System.Int32)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleException(Exception, String, String, Int32)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException(System.Exception, System.String, System.String, System.Int32)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase<TDbContext>.HandleException
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase(Of TDbContext).HandleException
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase{{TDbContext}}.Dispose
  commentId: M:Mix.Heart.Repository.RepositoryBase{`0}.Dispose
  parent: Mix.Heart.Repository.RepositoryBase{{TDbContext}}
  definition: Mix.Heart.Repository.RepositoryBase`1.Dispose
  name: Dispose()
  nameWithType: RepositoryBase<TDbContext>.Dispose()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose()
  nameWithType.vb: RepositoryBase(Of TDbContext).Dispose()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase<TDbContext>.Dispose
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase(Of TDbContext).Dispose
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Heart.Repository.RepositoryBase`1
  commentId: T:Mix.Heart.Repository.RepositoryBase`1
  name: RepositoryBase<TDbContext>
  nameWithType: RepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>
  nameWithType.vb: RepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext)
  name.vb: RepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: Mix.Heart.Repository.RepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3
  commentId: T:Mix.Heart.Repository.QueryRepository`3
  name: QueryRepository<TDbContext, TEntity, TPrimaryKey>
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey)
  name.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3
    name: QueryRepository
    nameWithType: QueryRepository
    fullName: Mix.Heart.Repository.QueryRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3
    name: QueryRepository
    nameWithType: QueryRepository
    fullName: Mix.Heart.Repository.QueryRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.IRepositoryBase`1
  commentId: T:Mix.Heart.Repository.IRepositoryBase`1
  name: IRepositoryBase<TDbContext>
  nameWithType: IRepositoryBase<TDbContext>
  fullName: Mix.Heart.Repository.IRepositoryBase<TDbContext>
  nameWithType.vb: IRepositoryBase(Of TDbContext)
  fullName.vb: Mix.Heart.Repository.IRepositoryBase(Of TDbContext)
  name.vb: IRepositoryBase(Of TDbContext)
  spec.csharp:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Heart.Repository.IRepositoryBase`1
    name: IRepositoryBase
    nameWithType: IRepositoryBase
    fullName: Mix.Heart.Repository.IRepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.CacheService
  commentId: P:Mix.Heart.Repository.QueryRepository`3.CacheService
  name: CacheService
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CacheService
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CacheService
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CacheService
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CacheService
- uid: Mix.Heart.Repository.QueryRepository`3.CacheFilename
  commentId: P:Mix.Heart.Repository.QueryRepository`3.CacheFilename
  name: CacheFilename
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CacheFilename
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CacheFilename
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CacheFilename
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CacheFilename
- uid: Mix.Heart.Repository.QueryRepository`3.SelectedMembers
  commentId: P:Mix.Heart.Repository.QueryRepository`3.SelectedMembers
  name: SelectedMembers
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.SelectedMembers
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.SelectedMembers
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).SelectedMembers
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).SelectedMembers
- uid: Mix.Heart.Repository.QueryRepository`3.KeyMembers
  commentId: P:Mix.Heart.Repository.QueryRepository`3.KeyMembers
  name: KeyMembers
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.KeyMembers
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.KeyMembers
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).KeyMembers
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).KeyMembers
- uid: Mix.Heart.Repository.QueryRepository`3.Table
  commentId: P:Mix.Heart.Repository.QueryRepository`3.Table
  name: Table
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.Table
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.Table
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Table
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Table
- uid: Mix.Heart.Repository.QueryRepository`3.GetAllQuery
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetAllQuery
  name: GetAllQuery()
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetAllQuery()
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetAllQuery()
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetAllQuery()
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetAllQuery()
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetAllQuery
    name: GetAllQuery
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetAllQuery
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetAllQuery
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetAllQuery
    name: GetAllQuery
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetAllQuery
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetAllQuery
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetListQuery(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetListQuery(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetListQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetListQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetListQuery(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListQuery
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetListQuery
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetListQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetListQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetListQuery
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetListQuery
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetListQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  isExternal: true
  name: GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingQuery(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingQuery(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingQuery(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingQuery(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingQuery
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingQuery
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetPagingQuery(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingQuery
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingQuery
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingQuery
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(`1)
  commentId: M:Mix.Heart.Repository.QueryRepository`3.CheckIsExists(`1)
  name: CheckIsExists(TEntity)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists(TEntity)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists(TEntity)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists(TEntity)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists(TEntity)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(`1)
    name: CheckIsExists
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(`1)
    name: CheckIsExists
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(System.Func{`1,System.Boolean})
  commentId: M:Mix.Heart.Repository.QueryRepository`3.CheckIsExists(System.Func{`1,System.Boolean})
  isExternal: true
  name: CheckIsExists(Func<TEntity, Boolean>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists(Func<TEntity, Boolean>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists(System.Func<TEntity, System.Boolean>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists(Func(Of TEntity, Boolean))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists(System.Func(Of TEntity, System.Boolean))
  name.vb: CheckIsExists(Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(System.Func{`1,System.Boolean})
    name: CheckIsExists
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.CheckIsExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.CheckIsExists(System.Func{`1,System.Boolean})
    name: CheckIsExists
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).CheckIsExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
  isExternal: true
  name: GetPagingEntitiesAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingEntitiesAsync(Expression<Func<TEntity, Boolean>>, PagingModel)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingEntitiesAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingEntitiesAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingEntitiesAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)), Mix.Heart.Models.PagingModel)
  name.vb: GetPagingEntitiesAsync(Expression(Of Func(Of TEntity, Boolean)), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingEntitiesAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingEntitiesAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingEntitiesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetPagingEntitiesAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},Mix.Heart.Models.PagingModel)
    name: GetPagingEntitiesAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingEntitiesAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingEntitiesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetSingleAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingleAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingleAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetByIdAsync(`2)
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetByIdAsync(`2)
  name: GetByIdAsync(TPrimaryKey)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetByIdAsync(TPrimaryKey)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetByIdAsync(TPrimaryKey)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetByIdAsync(TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetByIdAsync(TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetByIdAsync(`2)
    name: GetByIdAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetByIdAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetByIdAsync(`2)
    name: GetByIdAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetByIdAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.MaxAsync(System.Func{`1,System.Int32})
  commentId: M:Mix.Heart.Repository.QueryRepository`3.MaxAsync(System.Func{`1,System.Int32})
  isExternal: true
  name: MaxAsync(Func<TEntity, Int32>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync(Func<TEntity, Int32>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync(System.Func<TEntity, System.Int32>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync(Func(Of TEntity, Int32))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync(System.Func(Of TEntity, System.Int32))
  name.vb: MaxAsync(Func(Of TEntity, Int32))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.MaxAsync(System.Func{`1,System.Int32})
    name: MaxAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.MaxAsync(System.Func{`1,System.Int32})
    name: MaxAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirstAsync(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirstAsync(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirstAsync(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirstAsync(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirstAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirstAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirstAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirstAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetSingle(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingle(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingle(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingle(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingle(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetSingle(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingle
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingle
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetSingle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetSingle
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingle
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetById(`2)
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetById(`2)
  name: GetById(TPrimaryKey)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetById(TPrimaryKey)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetById(TPrimaryKey)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetById(TPrimaryKey)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetById(TPrimaryKey)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetById(`2)
    name: GetById
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetById
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetById
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetById(`2)
    name: GetById
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetById
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetById
  - name: (
    nameWithType: (
    fullName: (
  - name: TPrimaryKey
    nameWithType: TPrimaryKey
    fullName: TPrimaryKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.Max(System.Func{`1,System.Int32})
  commentId: M:Mix.Heart.Repository.QueryRepository`3.Max(System.Func{`1,System.Int32})
  isExternal: true
  name: Max(Func<TEntity, Int32>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.Max(Func<TEntity, Int32>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.Max(System.Func<TEntity, System.Int32>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Max(Func(Of TEntity, Int32))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Max(System.Func(Of TEntity, System.Int32))
  name.vb: Max(Func(Of TEntity, Int32))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.Max(System.Func{`1,System.Int32})
    name: Max
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.Max
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.Max
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.Max(System.Func{`1,System.Int32})
    name: Max
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Max
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).Max
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: GetFirst(Expression<Func<TEntity, Boolean>>)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirst(Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirst(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirst(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  name.vb: GetFirst(Expression(Of Func(Of TEntity, Boolean)))
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirst
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirst
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: GetFirst
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirst
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.ToPagingEntityAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel)
  commentId: M:Mix.Heart.Repository.QueryRepository`3.ToPagingEntityAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel)
  isExternal: true
  name: ToPagingEntityAsync(IQueryable<TEntity>, PagingModel)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingEntityAsync(IQueryable<TEntity>, PagingModel)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingEntityAsync(System.Linq.IQueryable<TEntity>, Mix.Heart.Models.PagingModel)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingEntityAsync(IQueryable(Of TEntity), PagingModel)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingEntityAsync(System.Linq.IQueryable(Of TEntity), Mix.Heart.Models.PagingModel)
  name.vb: ToPagingEntityAsync(IQueryable(Of TEntity), PagingModel)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.ToPagingEntityAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel)
    name: ToPagingEntityAsync
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingEntityAsync
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingEntityAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.ToPagingEntityAsync(System.Linq.IQueryable{`1},Mix.Heart.Models.PagingModel)
    name: ToPagingEntityAsync
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingEntityAsync
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingEntityAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Heart.Models.PagingModel
    name: PagingModel
    nameWithType: PagingModel
    fullName: Mix.Heart.Models.PagingModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.QueryRepository`3.GetLambda(System.String,System.Boolean)
  commentId: M:Mix.Heart.Repository.QueryRepository`3.GetLambda(System.String,System.Boolean)
  isExternal: true
  name: GetLambda(String, Boolean)
  nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetLambda(String, Boolean)
  fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetLambda(System.String, System.Boolean)
  nameWithType.vb: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetLambda(String, Boolean)
  fullName.vb: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetLambda(System.String, System.Boolean)
  spec.csharp:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetLambda
    fullName: Mix.Heart.Repository.QueryRepository<TDbContext, TEntity, TPrimaryKey>.GetLambda
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.QueryRepository`3.GetLambda(System.String,System.Boolean)
    name: GetLambda
    nameWithType: QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetLambda
    fullName: Mix.Heart.Repository.QueryRepository(Of TDbContext, TEntity, TPrimaryKey).GetLambda
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.UowInfo
  commentId: P:Mix.Heart.Repository.RepositoryBase`1.UowInfo
  name: UowInfo
  nameWithType: RepositoryBase<TDbContext>.UowInfo
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.UowInfo
  nameWithType.vb: RepositoryBase(Of TDbContext).UowInfo
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).UowInfo
- uid: Mix.Heart.Repository.RepositoryBase`1.Context
  commentId: P:Mix.Heart.Repository.RepositoryBase`1.Context
  name: Context
  nameWithType: RepositoryBase<TDbContext>.Context
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Context
  nameWithType.vb: RepositoryBase(Of TDbContext).Context
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Context
- uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  name: SetUowInfo(UnitOfWorkInfo)
  nameWithType: RepositoryBase<TDbContext>.SetUowInfo(UnitOfWorkInfo)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  nameWithType.vb: RepositoryBase(Of TDbContext).SetUowInfo(UnitOfWorkInfo)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase<TDbContext>.SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.SetUowInfo(Mix.Heart.UnitOfWork.UnitOfWorkInfo)
    name: SetUowInfo
    nameWithType: RepositoryBase(Of TDbContext).SetUowInfo
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).SetUowInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
    name: UnitOfWorkInfo
    nameWithType: UnitOfWorkInfo
    fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.BeginUow
  name: BeginUow()
  nameWithType: RepositoryBase<TDbContext>.BeginUow()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow()
  nameWithType.vb: RepositoryBase(Of TDbContext).BeginUow()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase<TDbContext>.BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.BeginUow
    name: BeginUow
    nameWithType: RepositoryBase(Of TDbContext).BeginUow
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).BeginUow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
  name: CloseUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CloseUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CloseUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase<TDbContext>.CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CloseUowAsync
    name: CloseUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CloseUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CloseUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
  name: CompleteUowAsync()
  nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync()
  nameWithType.vb: RepositoryBase(Of TDbContext).CompleteUowAsync()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase<TDbContext>.CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.CompleteUowAsync
    name: CompleteUowAsync
    nameWithType: RepositoryBase(Of TDbContext).CompleteUowAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).CompleteUowAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
  isExternal: true
  name: HandleExceptionAsync(Exception)
  nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync(Exception)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync(System.Exception)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleExceptionAsync(Exception)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync(System.Exception)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase<TDbContext>.HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleExceptionAsync(System.Exception)
    name: HandleExceptionAsync
    nameWithType: RepositoryBase(Of TDbContext).HandleExceptionAsync
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleExceptionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
  isExternal: true
  name: HandleException(Exception, String, String, Int32)
  nameWithType: RepositoryBase<TDbContext>.HandleException(Exception, String, String, Int32)
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException(System.Exception, System.String, System.String, System.Int32)
  nameWithType.vb: RepositoryBase(Of TDbContext).HandleException(Exception, String, String, Int32)
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException(System.Exception, System.String, System.String, System.Int32)
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase<TDbContext>.HandleException
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.HandleException(System.Exception,System.String,System.String,System.Int32)
    name: HandleException
    nameWithType: RepositoryBase(Of TDbContext).HandleException
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).HandleException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
  commentId: M:Mix.Heart.Repository.RepositoryBase`1.Dispose
  name: Dispose()
  nameWithType: RepositoryBase<TDbContext>.Dispose()
  fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose()
  nameWithType.vb: RepositoryBase(Of TDbContext).Dispose()
  fullName.vb: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose()
  spec.csharp:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase<TDbContext>.Dispose
    fullName: Mix.Heart.Repository.RepositoryBase<TDbContext>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Heart.Repository.RepositoryBase`1.Dispose
    name: Dispose
    nameWithType: RepositoryBase(Of TDbContext).Dispose
    fullName: Mix.Heart.Repository.RepositoryBase(Of TDbContext).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.EntityRepository`3.#ctor*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.#ctor
  name: EntityRepository
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.EntityRepository
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.EntityRepository
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).EntityRepository
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).EntityRepository
- uid: Mix.Heart.UnitOfWork.UnitOfWorkInfo
  commentId: T:Mix.Heart.UnitOfWork.UnitOfWorkInfo
  parent: Mix.Heart.UnitOfWork
  name: UnitOfWorkInfo
  nameWithType: UnitOfWorkInfo
  fullName: Mix.Heart.UnitOfWork.UnitOfWorkInfo
- uid: Mix.Heart.UnitOfWork
  commentId: N:Mix.Heart.UnitOfWork
  name: Mix.Heart.UnitOfWork
  nameWithType: Mix.Heart.UnitOfWork
  fullName: Mix.Heart.UnitOfWork
- uid: '{TDbContext}'
  commentId: '!:TDbContext'
  definition: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: TDbContext
  name: TDbContext
  nameWithType: TDbContext
  fullName: TDbContext
- uid: Mix.Heart.Repository.EntityRepository`3.GetEntityByIdAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.GetEntityByIdAsync
  name: GetEntityByIdAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetEntityByIdAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetEntityByIdAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetEntityByIdAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetEntityByIdAsync
- uid: '{TPrimaryKey}'
  commentId: '!:TPrimaryKey'
  definition: TPrimaryKey
  name: TPrimaryKey
  nameWithType: TPrimaryKey
  fullName: TPrimaryKey
- uid: System.Threading.Tasks.Task{{TEntity}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: System.Threading.Tasks.Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TPrimaryKey
  name: TPrimaryKey
  nameWithType: TPrimaryKey
  fullName: TPrimaryKey
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mix.Heart.Repository.EntityRepository`3.GetSingleAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.GetSingleAsync
  name: GetSingleAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetSingleAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetSingleAsync
- uid: Mix.Heart.Repository.EntityRepository`3.ParseEntitiesAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.ParseEntitiesAsync
  name: ParseEntitiesAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.ParseEntitiesAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.ParseEntitiesAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).ParseEntitiesAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).ParseEntitiesAsync
- uid: System.Collections.Generic.List{{TEntity}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TEntity>
  nameWithType: List<TEntity>
  fullName: System.Collections.Generic.List<TEntity>
  nameWithType.vb: List(Of TEntity)
  fullName.vb: System.Collections.Generic.List(Of TEntity)
  name.vb: List(Of TEntity)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{`1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TEntity>>
  nameWithType: Task<List<TEntity>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TEntity>>
  nameWithType.vb: Task(Of List(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TEntity))
  name.vb: Task(Of List(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Mix.Heart.Repository.EntityRepository`3.GetEntities*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.GetEntities
  name: GetEntities
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetEntities
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetEntities
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetEntities
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetEntities
- uid: System.Linq.IQueryable{{TEntity}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TEntity>
  nameWithType: IQueryable<TEntity>
  fullName: System.Linq.IQueryable<TEntity>
  nameWithType.vb: IQueryable(Of TEntity)
  fullName.vb: System.Linq.IQueryable(Of TEntity)
  name.vb: IQueryable(Of TEntity)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Mix.Heart.Repository.EntityRepository`3.ToPagingModelAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.ToPagingModelAsync
  name: ToPagingModelAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingModelAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.ToPagingModelAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingModelAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).ToPagingModelAsync
- uid: Mix.Heart.Models.PagingModel
  commentId: T:Mix.Heart.Models.PagingModel
  parent: Mix.Heart.Models
  name: PagingModel
  nameWithType: PagingModel
  fullName: Mix.Heart.Models.PagingModel
- uid: Mix.Heart.Services.MixCacheService
  commentId: T:Mix.Heart.Services.MixCacheService
  parent: Mix.Heart.Services
  name: MixCacheService
  nameWithType: MixCacheService
  fullName: Mix.Heart.Services.MixCacheService
- uid: System.Threading.Tasks.Task{Mix.Heart.Models.PagingResponseModel{{TEntity}}}
  commentId: T:System.Threading.Tasks.Task{Mix.Heart.Models.PagingResponseModel{`1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PagingResponseModel<TEntity>>
  nameWithType: Task<PagingResponseModel<TEntity>>
  fullName: System.Threading.Tasks.Task<Mix.Heart.Models.PagingResponseModel<TEntity>>
  nameWithType.vb: Task(Of PagingResponseModel(Of TEntity))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Heart.Models.PagingResponseModel(Of TEntity))
  name.vb: Task(Of PagingResponseModel(Of TEntity))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Heart.Models.PagingResponseModel`1
    name: PagingResponseModel
    nameWithType: PagingResponseModel
    fullName: Mix.Heart.Models.PagingResponseModel
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Heart.Models.PagingResponseModel`1
    name: PagingResponseModel
    nameWithType: PagingResponseModel
    fullName: Mix.Heart.Models.PagingResponseModel
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Models
  commentId: N:Mix.Heart.Models
  name: Mix.Heart.Models
  nameWithType: Mix.Heart.Models
  fullName: Mix.Heart.Models
- uid: Mix.Heart.Services
  commentId: N:Mix.Heart.Services
  name: Mix.Heart.Services
  nameWithType: Mix.Heart.Services
  fullName: Mix.Heart.Services
- uid: Mix.Heart.Repository.EntityRepository`3.MaxAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.MaxAsync
  name: MaxAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.MaxAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).MaxAsync
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Int32}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,System.Int32}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Int32>>
  nameWithType: Expression<Func<TEntity, Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Int32>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Int32))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Int32))
  name.vb: Expression(Of Func(Of TEntity, Int32))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Mix.Heart.Repository.EntityRepository`3.CreateAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.CreateAsync
  name: CreateAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.CreateAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.CreateAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).CreateAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).CreateAsync
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Mix.Heart.Repository.EntityRepository`3.UpdateAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.UpdateAsync
  name: UpdateAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.UpdateAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.UpdateAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).UpdateAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).UpdateAsync
- uid: Mix.Heart.Repository.EntityRepository`3.SaveAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.SaveAsync
  name: SaveAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.SaveAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.SaveAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SaveAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SaveAsync
- uid: Mix.Heart.Repository.EntityRepository`3.SaveFieldsAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.SaveFieldsAsync
  name: SaveFieldsAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.SaveFieldsAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.SaveFieldsAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SaveFieldsAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SaveFieldsAsync
- uid: System.Collections.Generic.IEnumerable{Mix.Heart.Models.EntityPropertyModel}
  commentId: T:System.Collections.Generic.IEnumerable{Mix.Heart.Models.EntityPropertyModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EntityPropertyModel>
  nameWithType: IEnumerable<EntityPropertyModel>
  fullName: System.Collections.Generic.IEnumerable<Mix.Heart.Models.EntityPropertyModel>
  nameWithType.vb: IEnumerable(Of EntityPropertyModel)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Mix.Heart.Models.EntityPropertyModel)
  name.vb: IEnumerable(Of EntityPropertyModel)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Heart.Models.EntityPropertyModel
    name: EntityPropertyModel
    nameWithType: EntityPropertyModel
    fullName: Mix.Heart.Models.EntityPropertyModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Heart.Models.EntityPropertyModel
    name: EntityPropertyModel
    nameWithType: EntityPropertyModel
    fullName: Mix.Heart.Models.EntityPropertyModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.EntityRepository`3.DeleteAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.DeleteAsync
  name: DeleteAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteAsync
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Heart.Repository.EntityRepository`3.DeleteManyAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.DeleteManyAsync
  name: DeleteManyAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteManyAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.DeleteManyAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteManyAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).DeleteManyAsync
- uid: Mix.Heart.Repository.EntityRepository`3.GetPagingAsync*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.GetPagingAsync
  name: GetPagingAsync
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingAsync
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.GetPagingAsync
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingAsync
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).GetPagingAsync
- uid: Mix.Heart.Repository.EntityRepository`3.SetSelectedMembers*
  commentId: Overload:Mix.Heart.Repository.EntityRepository`3.SetSelectedMembers
  name: SetSelectedMembers
  nameWithType: EntityRepository<TDbContext, TEntity, TPrimaryKey>.SetSelectedMembers
  fullName: Mix.Heart.Repository.EntityRepository<TDbContext, TEntity, TPrimaryKey>.SetSelectedMembers
  nameWithType.vb: EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SetSelectedMembers
  fullName.vb: Mix.Heart.Repository.EntityRepository(Of TDbContext, TEntity, TPrimaryKey).SetSelectedMembers
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
