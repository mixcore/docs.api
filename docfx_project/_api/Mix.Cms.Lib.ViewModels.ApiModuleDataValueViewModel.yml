### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  id: ApiModuleDataValueViewModel
  parent: Mix.Cms.Lib.ViewModels
  children:
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.DataType
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsDisplay
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsGroupBy
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsRequired
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsSelect
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsUnique
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Name
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Options
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Title
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate``1(System.IConvertible,System.String,Newtonsoft.Json.Linq.JObject,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Value
  langs:
  - csharp
  - vb
  name: ApiModuleDataValueViewModel
  nameWithType: ApiModuleDataValueViewModel
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  type: Class
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ApiModuleDataValueViewModel
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 186
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: public class ApiModuleDataValueViewModel
    content.vb: Public Class ApiModuleDataValueViewModel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Name
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Name
  id: Name
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ApiModuleDataValueViewModel.Name
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Name
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Name
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 188
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("name")]

      public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("name")>

      Public Property Name As String
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Name*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Title
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Title
  id: Title
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: ApiModuleDataValueViewModel.Title
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Title
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Title
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 191
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("title")]

      public string Title { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("title")>

      Public Property Title As String
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Title*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: title
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsUnique
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsUnique
  id: IsUnique
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: IsUnique
  nameWithType: ApiModuleDataValueViewModel.IsUnique
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsUnique
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IsUnique
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 194
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("isUnique")]

      public bool IsUnique { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonProperty("isUnique")>

      Public Property IsUnique As Boolean
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsUnique*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: isUnique
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsRequired
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsRequired
  id: IsRequired
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: IsRequired
  nameWithType: ApiModuleDataValueViewModel.IsRequired
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsRequired
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IsRequired
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 197
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("isRequired")]

      public bool IsRequired { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonProperty("isRequired")>

      Public Property IsRequired As Boolean
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsRequired*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: isRequired
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.DataType
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.DataType
  id: DataType
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: DataType
  nameWithType: ApiModuleDataValueViewModel.DataType
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.DataType
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DataType
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 200
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("dataType")]

      public MixDataType DataType { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.Enums.MixDataType
    content.vb: >-
      <JsonProperty("dataType")>

      Public Property DataType As MixDataType
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.DataType*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: dataType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Value
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Value
  id: Value
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ApiModuleDataValueViewModel.Value
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Value
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Value
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 203
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("value")]

      public string Value { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("value")>

      Public Property Value As String
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Value*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsDisplay
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsDisplay
  id: IsDisplay
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: IsDisplay
  nameWithType: ApiModuleDataValueViewModel.IsDisplay
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsDisplay
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IsDisplay
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 206
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("isDisplay")]

      public bool IsDisplay { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonProperty("isDisplay")>

      Public Property IsDisplay As Boolean
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsDisplay*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: isDisplay
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsSelect
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsSelect
  id: IsSelect
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: IsSelect
  nameWithType: ApiModuleDataValueViewModel.IsSelect
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsSelect
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IsSelect
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 209
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("isSelect")]

      public bool IsSelect { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonProperty("isSelect")>

      Public Property IsSelect As Boolean
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsSelect*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: isSelect
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsGroupBy
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsGroupBy
  id: IsGroupBy
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: IsGroupBy
  nameWithType: ApiModuleDataValueViewModel.IsGroupBy
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsGroupBy
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IsGroupBy
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 212
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("isGroupBy")]

      public bool IsGroupBy { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonProperty("isGroupBy")>

      Public Property IsGroupBy As Boolean
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsGroupBy*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: isGroupBy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Options
  commentId: P:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Options
  id: Options
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: ApiModuleDataValueViewModel.Options
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Options
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Options
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 215
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      [JsonProperty("options")]

      public JArray Options { get; set; }
    parameters: []
    return:
      type: Newtonsoft.Json.Linq.JArray
    content.vb: >-
      <JsonProperty("options")>

      Public Property Options As JArray
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Options*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: options
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate``1(System.IConvertible,System.String,Newtonsoft.Json.Linq.JObject,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate``1(System.IConvertible,System.String,Newtonsoft.Json.Linq.JObject,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: Validate``1(System.IConvertible,System.String,Newtonsoft.Json.Linq.JObject,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel
  langs:
  - csharp
  - vb
  name: Validate<T>(IConvertible, String, JObject, MixCmsContext, IDbContextTransaction)
  nameWithType: ApiModuleDataValueViewModel.Validate<T>(IConvertible, String, JObject, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate<T>(System.IConvertible, System.String, Newtonsoft.Json.Linq.JObject, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Validate
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/CommonViewModels.cs
    startLine: 218
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels
  syntax:
    content: >-
      public RepositoryResponse<bool> Validate<T>(IConvertible id, string specificulture, JObject jItem, MixCmsContext _context = null, IDbContextTransaction _transaction = null)

          where T : class
    parameters:
    - id: id
      type: System.IConvertible
    - id: specificulture
      type: System.String
    - id: jItem
      type: Newtonsoft.Json.Linq.JObject
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    typeParameters:
    - id: T
    return:
      type: Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
    content.vb: Public Function Validate(Of T As Class)(id As IConvertible, specificulture As String, jItem As JObject, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As RepositoryResponse(Of Boolean)
  overload: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate*
  nameWithType.vb: ApiModuleDataValueViewModel.Validate(Of T)(IConvertible, String, JObject, MixCmsContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate(Of T)(System.IConvertible, System.String, Newtonsoft.Json.Linq.JObject, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Validate(Of T)(IConvertible, String, JObject, MixCmsContext, IDbContextTransaction)
references:
- uid: Mix.Cms.Lib.ViewModels
  commentId: N:Mix.Cms.Lib.ViewModels
  name: Mix.Cms.Lib.ViewModels
  nameWithType: Mix.Cms.Lib.ViewModels
  fullName: Mix.Cms.Lib.ViewModels
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Name*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Name
  name: Name
  nameWithType: ApiModuleDataValueViewModel.Name
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Title*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Title
  name: Title
  nameWithType: ApiModuleDataValueViewModel.Title
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Title
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsUnique*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsUnique
  name: IsUnique
  nameWithType: ApiModuleDataValueViewModel.IsUnique
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsUnique
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsRequired*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsRequired
  name: IsRequired
  nameWithType: ApiModuleDataValueViewModel.IsRequired
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsRequired
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.DataType*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.DataType
  name: DataType
  nameWithType: ApiModuleDataValueViewModel.DataType
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.DataType
- uid: Mix.Cms.Lib.Enums.MixDataType
  commentId: T:Mix.Cms.Lib.Enums.MixDataType
  parent: Mix.Cms.Lib.Enums
  name: MixDataType
  nameWithType: MixDataType
  fullName: Mix.Cms.Lib.Enums.MixDataType
- uid: Mix.Cms.Lib.Enums
  commentId: N:Mix.Cms.Lib.Enums
  name: Mix.Cms.Lib.Enums
  nameWithType: Mix.Cms.Lib.Enums
  fullName: Mix.Cms.Lib.Enums
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Value*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Value
  name: Value
  nameWithType: ApiModuleDataValueViewModel.Value
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Value
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsDisplay*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsDisplay
  name: IsDisplay
  nameWithType: ApiModuleDataValueViewModel.IsDisplay
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsDisplay
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsSelect*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsSelect
  name: IsSelect
  nameWithType: ApiModuleDataValueViewModel.IsSelect
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsSelect
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsGroupBy*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsGroupBy
  name: IsGroupBy
  nameWithType: ApiModuleDataValueViewModel.IsGroupBy
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.IsGroupBy
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Options*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Options
  name: Options
  nameWithType: ApiModuleDataValueViewModel.Options
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Options
- uid: Newtonsoft.Json.Linq.JArray
  commentId: T:Newtonsoft.Json.Linq.JArray
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JArray
  nameWithType: JArray
  fullName: Newtonsoft.Json.Linq.JArray
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate*
  commentId: Overload:Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate
  name: Validate
  nameWithType: ApiModuleDataValueViewModel.Validate
  fullName: Mix.Cms.Lib.ViewModels.ApiModuleDataValueViewModel.Validate
- uid: System.IConvertible
  commentId: T:System.IConvertible
  parent: System
  isExternal: true
  name: IConvertible
  nameWithType: IConvertible
  fullName: System.IConvertible
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
  commentId: T:Mix.Cms.Lib.Models.Cms.MixCmsContext
  parent: Mix.Cms.Lib.Models.Cms
  name: MixCmsContext
  nameWithType: MixCmsContext
  fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: true
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}
  parent: Mix.Domain.Core.ViewModels
  definition: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  name: RepositoryResponse<Boolean>
  nameWithType: RepositoryResponse<Boolean>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<System.Boolean>
  nameWithType.vb: RepositoryResponse(Of Boolean)
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of System.Boolean)
  name.vb: RepositoryResponse(Of Boolean)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.Models.Cms
  commentId: N:Mix.Cms.Lib.Models.Cms
  name: Mix.Cms.Lib.Models.Cms
  nameWithType: Mix.Cms.Lib.Models.Cms
  fullName: Mix.Cms.Lib.Models.Cms
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: true
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
  commentId: T:Mix.Domain.Core.ViewModels.RepositoryResponse`1
  isExternal: true
  name: RepositoryResponse<TResult>
  nameWithType: RepositoryResponse<TResult>
  fullName: Mix.Domain.Core.ViewModels.RepositoryResponse<TResult>
  nameWithType.vb: RepositoryResponse(Of TResult)
  fullName.vb: Mix.Domain.Core.ViewModels.RepositoryResponse(Of TResult)
  name.vb: RepositoryResponse(Of TResult)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Core.ViewModels
  commentId: N:Mix.Domain.Core.ViewModels
  isExternal: true
  name: Mix.Domain.Core.ViewModels
  nameWithType: Mix.Domain.Core.ViewModels
  fullName: Mix.Domain.Core.ViewModels
