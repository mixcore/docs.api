### YamlMime:ManagedReference
items:
- uid: Mix.Identity.Interfaces.IUser
  commentId: T:Mix.Identity.Interfaces.IUser
  id: IUser
  parent: Mix.Identity.Interfaces
  children:
  - Mix.Identity.Interfaces.IUser.GetClaimsIdentity
  - Mix.Identity.Interfaces.IUser.IsAuthenticated
  - Mix.Identity.Interfaces.IUser.Name
  langs:
  - csharp
  - vb
  name: IUser
  nameWithType: IUser
  fullName: Mix.Identity.Interfaces.IUser
  type: Interface
  source:
    remote:
      path: src/Mix.Identity/Interfaces/IUser.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IUser
    path: ../../mix.core/src/Mix.Identity/Interfaces/IUser.cs
    startLine: 9
  assemblies:
  - Mix.Identity
  namespace: Mix.Identity.Interfaces
  syntax:
    content: public interface IUser
    content.vb: Public Interface IUser
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Mix.Identity.Interfaces.IUser.Name
  commentId: P:Mix.Identity.Interfaces.IUser.Name
  id: Name
  parent: Mix.Identity.Interfaces.IUser
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IUser.Name
  fullName: Mix.Identity.Interfaces.IUser.Name
  type: Property
  source:
    remote:
      path: src/Mix.Identity/Interfaces/IUser.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Name
    path: ../../mix.core/src/Mix.Identity/Interfaces/IUser.cs
    startLine: 17
  assemblies:
  - Mix.Identity
  namespace: Mix.Identity.Interfaces
  summary: "\nGets the name.\n"
  example: []
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe name.\n"
    content.vb: ReadOnly Property Name As String
  overload: Mix.Identity.Interfaces.IUser.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Mix.Identity.Interfaces.IUser.IsAuthenticated
  commentId: M:Mix.Identity.Interfaces.IUser.IsAuthenticated
  id: IsAuthenticated
  parent: Mix.Identity.Interfaces.IUser
  langs:
  - csharp
  - vb
  name: IsAuthenticated()
  nameWithType: IUser.IsAuthenticated()
  fullName: Mix.Identity.Interfaces.IUser.IsAuthenticated()
  type: Method
  source:
    remote:
      path: src/Mix.Identity/Interfaces/IUser.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IsAuthenticated
    path: ../../mix.core/src/Mix.Identity/Interfaces/IUser.cs
    startLine: 25
  assemblies:
  - Mix.Identity
  namespace: Mix.Identity.Interfaces
  summary: "\nDetermines whether this instance is authenticated.\n"
  example: []
  syntax:
    content: bool IsAuthenticated()
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is authenticated; otherwise, <code>false</code>.\n"
    content.vb: Function IsAuthenticated As Boolean
  overload: Mix.Identity.Interfaces.IUser.IsAuthenticated*
- uid: Mix.Identity.Interfaces.IUser.GetClaimsIdentity
  commentId: M:Mix.Identity.Interfaces.IUser.GetClaimsIdentity
  id: GetClaimsIdentity
  parent: Mix.Identity.Interfaces.IUser
  langs:
  - csharp
  - vb
  name: GetClaimsIdentity()
  nameWithType: IUser.GetClaimsIdentity()
  fullName: Mix.Identity.Interfaces.IUser.GetClaimsIdentity()
  type: Method
  source:
    remote:
      path: src/Mix.Identity/Interfaces/IUser.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetClaimsIdentity
    path: ../../mix.core/src/Mix.Identity/Interfaces/IUser.cs
    startLine: 31
  assemblies:
  - Mix.Identity
  namespace: Mix.Identity.Interfaces
  summary: "\nGets the claims identity.\n"
  example: []
  syntax:
    content: IEnumerable<Claim> GetClaimsIdentity()
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: ''
    content.vb: Function GetClaimsIdentity As IEnumerable(Of Claim)
  overload: Mix.Identity.Interfaces.IUser.GetClaimsIdentity*
references:
- uid: Mix.Identity.Interfaces
  commentId: N:Mix.Identity.Interfaces
  name: Mix.Identity.Interfaces
  nameWithType: Mix.Identity.Interfaces
  fullName: Mix.Identity.Interfaces
- uid: Mix.Identity.Interfaces.IUser.Name*
  commentId: Overload:Mix.Identity.Interfaces.IUser.Name
  name: Name
  nameWithType: IUser.Name
  fullName: Mix.Identity.Interfaces.IUser.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Identity.Interfaces.IUser.IsAuthenticated*
  commentId: Overload:Mix.Identity.Interfaces.IUser.IsAuthenticated
  name: IsAuthenticated
  nameWithType: IUser.IsAuthenticated
  fullName: Mix.Identity.Interfaces.IUser.IsAuthenticated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mix.Identity.Interfaces.IUser.GetClaimsIdentity*
  commentId: Overload:Mix.Identity.Interfaces.IUser.GetClaimsIdentity
  name: GetClaimsIdentity
  nameWithType: IUser.GetClaimsIdentity
  fullName: Mix.Identity.Interfaces.IUser.GetClaimsIdentity
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
