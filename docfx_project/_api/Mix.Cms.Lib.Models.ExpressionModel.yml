### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Lib.Models.ExpressionModel
  commentId: T:Mix.Cms.Lib.Models.ExpressionModel
  id: ExpressionModel
  parent: Mix.Cms.Lib.Models
  children:
  - Mix.Cms.Lib.Models.ExpressionModel.AddExpression(Mix.Cms.Lib.Models.ExpressionModel)
  - Mix.Cms.Lib.Models.ExpressionModel.AddFunction(Mix.Cms.Lib.Models.FunctionModel)
  - Mix.Cms.Lib.Models.ExpressionModel.Create(Mix.Cms.Lib.Enums.MixLogicalOperatorKind)
  - Mix.Cms.Lib.Models.ExpressionModel.Expressions
  - Mix.Cms.Lib.Models.ExpressionModel.ExpressionType
  - Mix.Cms.Lib.Models.ExpressionModel.Functions
  langs:
  - csharp
  - vb
  name: ExpressionModel
  nameWithType: ExpressionModel
  fullName: Mix.Cms.Lib.Models.ExpressionModel
  type: Class
  source:
    remote:
      path: src/Mix.Cms.Lib/Models/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ExpressionModel
    path: ../../mix.core/src/Mix.Cms.Lib/Models/ExpressionModel.cs
    startLine: 7
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Models
  syntax:
    content: public class ExpressionModel
    content.vb: Public Class ExpressionModel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Lib.Models.ExpressionModel.ExpressionType
  commentId: P:Mix.Cms.Lib.Models.ExpressionModel.ExpressionType
  id: ExpressionType
  parent: Mix.Cms.Lib.Models.ExpressionModel
  langs:
  - csharp
  - vb
  name: ExpressionType
  nameWithType: ExpressionModel.ExpressionType
  fullName: Mix.Cms.Lib.Models.ExpressionModel.ExpressionType
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/Models/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ExpressionType
    path: ../../mix.core/src/Mix.Cms.Lib/Models/ExpressionModel.cs
    startLine: 9
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Models
  syntax:
    content: >-
      [JsonProperty("expressionType")]

      public MixLogicalOperatorKind ExpressionType { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.Enums.MixLogicalOperatorKind
    content.vb: >-
      <JsonProperty("expressionType")>

      Public Property ExpressionType As MixLogicalOperatorKind
  overload: Mix.Cms.Lib.Models.ExpressionModel.ExpressionType*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: expressionType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Models.ExpressionModel.Functions
  commentId: P:Mix.Cms.Lib.Models.ExpressionModel.Functions
  id: Functions
  parent: Mix.Cms.Lib.Models.ExpressionModel
  langs:
  - csharp
  - vb
  name: Functions
  nameWithType: ExpressionModel.Functions
  fullName: Mix.Cms.Lib.Models.ExpressionModel.Functions
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/Models/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Functions
    path: ../../mix.core/src/Mix.Cms.Lib/Models/ExpressionModel.cs
    startLine: 12
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Models
  syntax:
    content: >-
      [JsonProperty("functions")]

      public List<FunctionModel> Functions { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.Models.FunctionModel}
    content.vb: >-
      <JsonProperty("functions")>

      Public Property Functions As List(Of FunctionModel)
  overload: Mix.Cms.Lib.Models.ExpressionModel.Functions*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: functions
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Models.ExpressionModel.Expressions
  commentId: P:Mix.Cms.Lib.Models.ExpressionModel.Expressions
  id: Expressions
  parent: Mix.Cms.Lib.Models.ExpressionModel
  langs:
  - csharp
  - vb
  name: Expressions
  nameWithType: ExpressionModel.Expressions
  fullName: Mix.Cms.Lib.Models.ExpressionModel.Expressions
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/Models/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Expressions
    path: ../../mix.core/src/Mix.Cms.Lib/Models/ExpressionModel.cs
    startLine: 15
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Models
  syntax:
    content: >-
      [JsonProperty("expressions")]

      public List<ExpressionModel> Expressions { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.Models.ExpressionModel}
    content.vb: >-
      <JsonProperty("expressions")>

      Public Property Expressions As List(Of ExpressionModel)
  overload: Mix.Cms.Lib.Models.ExpressionModel.Expressions*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: expressions
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Models.ExpressionModel.Create(Mix.Cms.Lib.Enums.MixLogicalOperatorKind)
  commentId: M:Mix.Cms.Lib.Models.ExpressionModel.Create(Mix.Cms.Lib.Enums.MixLogicalOperatorKind)
  id: Create(Mix.Cms.Lib.Enums.MixLogicalOperatorKind)
  parent: Mix.Cms.Lib.Models.ExpressionModel
  langs:
  - csharp
  - vb
  name: Create(MixLogicalOperatorKind)
  nameWithType: ExpressionModel.Create(MixLogicalOperatorKind)
  fullName: Mix.Cms.Lib.Models.ExpressionModel.Create(Mix.Cms.Lib.Enums.MixLogicalOperatorKind)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Models/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Create
    path: ../../mix.core/src/Mix.Cms.Lib/Models/ExpressionModel.cs
    startLine: 19
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Models
  syntax:
    content: public static ExpressionModel Create(MixLogicalOperatorKind expressType)
    parameters:
    - id: expressType
      type: Mix.Cms.Lib.Enums.MixLogicalOperatorKind
    return:
      type: Mix.Cms.Lib.Models.ExpressionModel
    content.vb: Public Shared Function Create(expressType As MixLogicalOperatorKind) As ExpressionModel
  overload: Mix.Cms.Lib.Models.ExpressionModel.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mix.Cms.Lib.Models.ExpressionModel.AddFunction(Mix.Cms.Lib.Models.FunctionModel)
  commentId: M:Mix.Cms.Lib.Models.ExpressionModel.AddFunction(Mix.Cms.Lib.Models.FunctionModel)
  id: AddFunction(Mix.Cms.Lib.Models.FunctionModel)
  parent: Mix.Cms.Lib.Models.ExpressionModel
  langs:
  - csharp
  - vb
  name: AddFunction(FunctionModel)
  nameWithType: ExpressionModel.AddFunction(FunctionModel)
  fullName: Mix.Cms.Lib.Models.ExpressionModel.AddFunction(Mix.Cms.Lib.Models.FunctionModel)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Models/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: AddFunction
    path: ../../mix.core/src/Mix.Cms.Lib/Models/ExpressionModel.cs
    startLine: 24
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Models
  syntax:
    content: public ExpressionModel AddFunction(FunctionModel function)
    parameters:
    - id: function
      type: Mix.Cms.Lib.Models.FunctionModel
    return:
      type: Mix.Cms.Lib.Models.ExpressionModel
    content.vb: Public Function AddFunction(function As FunctionModel) As ExpressionModel
  overload: Mix.Cms.Lib.Models.ExpressionModel.AddFunction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Models.ExpressionModel.AddExpression(Mix.Cms.Lib.Models.ExpressionModel)
  commentId: M:Mix.Cms.Lib.Models.ExpressionModel.AddExpression(Mix.Cms.Lib.Models.ExpressionModel)
  id: AddExpression(Mix.Cms.Lib.Models.ExpressionModel)
  parent: Mix.Cms.Lib.Models.ExpressionModel
  langs:
  - csharp
  - vb
  name: AddExpression(ExpressionModel)
  nameWithType: ExpressionModel.AddExpression(ExpressionModel)
  fullName: Mix.Cms.Lib.Models.ExpressionModel.AddExpression(Mix.Cms.Lib.Models.ExpressionModel)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Models/ExpressionModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: AddExpression
    path: ../../mix.core/src/Mix.Cms.Lib/Models/ExpressionModel.cs
    startLine: 30
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Models
  syntax:
    content: public ExpressionModel AddExpression(ExpressionModel expression)
    parameters:
    - id: expression
      type: Mix.Cms.Lib.Models.ExpressionModel
    return:
      type: Mix.Cms.Lib.Models.ExpressionModel
    content.vb: Public Function AddExpression(expression As ExpressionModel) As ExpressionModel
  overload: Mix.Cms.Lib.Models.ExpressionModel.AddExpression*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Mix.Cms.Lib.Models
  commentId: N:Mix.Cms.Lib.Models
  name: Mix.Cms.Lib.Models
  nameWithType: Mix.Cms.Lib.Models
  fullName: Mix.Cms.Lib.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Cms.Lib.Models.ExpressionModel.ExpressionType*
  commentId: Overload:Mix.Cms.Lib.Models.ExpressionModel.ExpressionType
  name: ExpressionType
  nameWithType: ExpressionModel.ExpressionType
  fullName: Mix.Cms.Lib.Models.ExpressionModel.ExpressionType
- uid: Mix.Cms.Lib.Enums.MixLogicalOperatorKind
  commentId: T:Mix.Cms.Lib.Enums.MixLogicalOperatorKind
  parent: Mix.Cms.Lib.Enums
  name: MixLogicalOperatorKind
  nameWithType: MixLogicalOperatorKind
  fullName: Mix.Cms.Lib.Enums.MixLogicalOperatorKind
- uid: Mix.Cms.Lib.Enums
  commentId: N:Mix.Cms.Lib.Enums
  name: Mix.Cms.Lib.Enums
  nameWithType: Mix.Cms.Lib.Enums
  fullName: Mix.Cms.Lib.Enums
- uid: Mix.Cms.Lib.Models.ExpressionModel.Functions*
  commentId: Overload:Mix.Cms.Lib.Models.ExpressionModel.Functions
  name: Functions
  nameWithType: ExpressionModel.Functions
  fullName: Mix.Cms.Lib.Models.ExpressionModel.Functions
- uid: System.Collections.Generic.List{Mix.Cms.Lib.Models.FunctionModel}
  commentId: T:System.Collections.Generic.List{Mix.Cms.Lib.Models.FunctionModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<FunctionModel>
  nameWithType: List<FunctionModel>
  fullName: System.Collections.Generic.List<Mix.Cms.Lib.Models.FunctionModel>
  nameWithType.vb: List(Of FunctionModel)
  fullName.vb: System.Collections.Generic.List(Of Mix.Cms.Lib.Models.FunctionModel)
  name.vb: List(Of FunctionModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.Models.FunctionModel
    name: FunctionModel
    nameWithType: FunctionModel
    fullName: Mix.Cms.Lib.Models.FunctionModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.Models.FunctionModel
    name: FunctionModel
    nameWithType: FunctionModel
    fullName: Mix.Cms.Lib.Models.FunctionModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Mix.Cms.Lib.Models.ExpressionModel.Expressions*
  commentId: Overload:Mix.Cms.Lib.Models.ExpressionModel.Expressions
  name: Expressions
  nameWithType: ExpressionModel.Expressions
  fullName: Mix.Cms.Lib.Models.ExpressionModel.Expressions
- uid: System.Collections.Generic.List{Mix.Cms.Lib.Models.ExpressionModel}
  commentId: T:System.Collections.Generic.List{Mix.Cms.Lib.Models.ExpressionModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ExpressionModel>
  nameWithType: List<ExpressionModel>
  fullName: System.Collections.Generic.List<Mix.Cms.Lib.Models.ExpressionModel>
  nameWithType.vb: List(Of ExpressionModel)
  fullName.vb: System.Collections.Generic.List(Of Mix.Cms.Lib.Models.ExpressionModel)
  name.vb: List(Of ExpressionModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.Models.ExpressionModel
    name: ExpressionModel
    nameWithType: ExpressionModel
    fullName: Mix.Cms.Lib.Models.ExpressionModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.Models.ExpressionModel
    name: ExpressionModel
    nameWithType: ExpressionModel
    fullName: Mix.Cms.Lib.Models.ExpressionModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.Models.ExpressionModel.Create*
  commentId: Overload:Mix.Cms.Lib.Models.ExpressionModel.Create
  name: Create
  nameWithType: ExpressionModel.Create
  fullName: Mix.Cms.Lib.Models.ExpressionModel.Create
- uid: Mix.Cms.Lib.Models.ExpressionModel
  commentId: T:Mix.Cms.Lib.Models.ExpressionModel
  parent: Mix.Cms.Lib.Models
  name: ExpressionModel
  nameWithType: ExpressionModel
  fullName: Mix.Cms.Lib.Models.ExpressionModel
- uid: Mix.Cms.Lib.Models.ExpressionModel.AddFunction*
  commentId: Overload:Mix.Cms.Lib.Models.ExpressionModel.AddFunction
  name: AddFunction
  nameWithType: ExpressionModel.AddFunction
  fullName: Mix.Cms.Lib.Models.ExpressionModel.AddFunction
- uid: Mix.Cms.Lib.Models.FunctionModel
  commentId: T:Mix.Cms.Lib.Models.FunctionModel
  parent: Mix.Cms.Lib.Models
  name: FunctionModel
  nameWithType: FunctionModel
  fullName: Mix.Cms.Lib.Models.FunctionModel
- uid: Mix.Cms.Lib.Models.ExpressionModel.AddExpression*
  commentId: Overload:Mix.Cms.Lib.Models.ExpressionModel.AddExpression
  name: AddExpression
  nameWithType: ExpressionModel.AddExpression
  fullName: Mix.Cms.Lib.Models.ExpressionModel.AddExpression
