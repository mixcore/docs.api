### YamlMime:ManagedReference
items:
- uid: Mix.Heart.Services.MixCacheService
  commentId: T:Mix.Heart.Services.MixCacheService
  id: MixCacheService
  parent: Mix.Heart.Services
  children:
  - Mix.Heart.Services.MixCacheService.#ctor
  - Mix.Heart.Services.MixCacheService.GetAsync``1(System.String,System.Type,System.String)
  - Mix.Heart.Services.MixCacheService.IsCacheEnabled
  - Mix.Heart.Services.MixCacheService.RemoveCacheAsync
  - Mix.Heart.Services.MixCacheService.RemoveCacheAsync(System.Object,System.Type)
  - Mix.Heart.Services.MixCacheService.serializer
  - Mix.Heart.Services.MixCacheService.SetAsync``1(System.String,``0,System.Type,System.String)
  langs:
  - csharp
  - vb
  name: MixCacheService
  nameWithType: MixCacheService
  fullName: Mix.Heart.Services.MixCacheService
  type: Class
  source:
    remote:
      path: src/Mix.Heart/Services/MixCacheService.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: MixCacheService
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Services/MixCacheService.cs
    startLine: 16
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Services
  syntax:
    content: public class MixCacheService
    content.vb: Public Class MixCacheService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Heart.Services.MixCacheService.IsCacheEnabled
  commentId: P:Mix.Heart.Services.MixCacheService.IsCacheEnabled
  id: IsCacheEnabled
  parent: Mix.Heart.Services.MixCacheService
  langs:
  - csharp
  - vb
  name: IsCacheEnabled
  nameWithType: MixCacheService.IsCacheEnabled
  fullName: Mix.Heart.Services.MixCacheService.IsCacheEnabled
  type: Property
  source:
    remote:
      path: src/Mix.Heart/Services/MixCacheService.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: IsCacheEnabled
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Services/MixCacheService.cs
    startLine: 20
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Services
  syntax:
    content: public bool IsCacheEnabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCacheEnabled As Boolean
  overload: Mix.Heart.Services.MixCacheService.IsCacheEnabled*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Heart.Services.MixCacheService.serializer
  commentId: F:Mix.Heart.Services.MixCacheService.serializer
  id: serializer
  parent: Mix.Heart.Services.MixCacheService
  langs:
  - csharp
  - vb
  name: serializer
  nameWithType: MixCacheService.serializer
  fullName: Mix.Heart.Services.MixCacheService.serializer
  type: Field
  source:
    remote:
      path: src/Mix.Heart/Services/MixCacheService.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: serializer
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Services/MixCacheService.cs
    startLine: 21
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Services
  syntax:
    content: protected JsonSerializer serializer
    return:
      type: JsonSerializer
    content.vb: Protected serializer As JsonSerializer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Mix.Heart.Services.MixCacheService.#ctor
  commentId: M:Mix.Heart.Services.MixCacheService.#ctor
  id: '#ctor'
  parent: Mix.Heart.Services.MixCacheService
  langs:
  - csharp
  - vb
  name: MixCacheService()
  nameWithType: MixCacheService.MixCacheService()
  fullName: Mix.Heart.Services.MixCacheService.MixCacheService()
  type: Constructor
  source:
    remote:
      path: src/Mix.Heart/Services/MixCacheService.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: .ctor
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Services/MixCacheService.cs
    startLine: 23
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Services
  syntax:
    content: public MixCacheService()
    content.vb: Public Sub New
  overload: Mix.Heart.Services.MixCacheService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Heart.Services.MixCacheService.GetAsync``1(System.String,System.Type,System.String)
  commentId: M:Mix.Heart.Services.MixCacheService.GetAsync``1(System.String,System.Type,System.String)
  id: GetAsync``1(System.String,System.Type,System.String)
  parent: Mix.Heart.Services.MixCacheService
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, Type, String)
  nameWithType: MixCacheService.GetAsync<T>(String, Type, String)
  fullName: Mix.Heart.Services.MixCacheService.GetAsync<T>(System.String, System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Services/MixCacheService.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: GetAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Services/MixCacheService.cs
    startLine: 63
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Services
  syntax:
    content: public Task<T> GetAsync<T>(string key, Type dataType, string filename)
    parameters:
    - id: key
      type: System.String
    - id: dataType
      type: System.Type
    - id: filename
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Public Function GetAsync(Of T)(key As String, dataType As Type, filename As String) As Task(Of T)
  overload: Mix.Heart.Services.MixCacheService.GetAsync*
  nameWithType.vb: MixCacheService.GetAsync(Of T)(String, Type, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Services.MixCacheService.GetAsync(Of T)(System.String, System.Type, System.String)
  name.vb: GetAsync(Of T)(String, Type, String)
- uid: Mix.Heart.Services.MixCacheService.SetAsync``1(System.String,``0,System.Type,System.String)
  commentId: M:Mix.Heart.Services.MixCacheService.SetAsync``1(System.String,``0,System.Type,System.String)
  id: SetAsync``1(System.String,``0,System.Type,System.String)
  parent: Mix.Heart.Services.MixCacheService
  langs:
  - csharp
  - vb
  name: SetAsync<T>(String, T, Type, String)
  nameWithType: MixCacheService.SetAsync<T>(String, T, Type, String)
  fullName: Mix.Heart.Services.MixCacheService.SetAsync<T>(System.String, T, System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Services/MixCacheService.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: SetAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Services/MixCacheService.cs
    startLine: 136
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Services
  syntax:
    content: public Task<bool> SetAsync<T>(string key, T value, Type dataType, string filename)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: '{T}'
    - id: dataType
      type: System.Type
    - id: filename
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function SetAsync(Of T)(key As String, value As T, dataType As Type, filename As String) As Task(Of Boolean)
  overload: Mix.Heart.Services.MixCacheService.SetAsync*
  nameWithType.vb: MixCacheService.SetAsync(Of T)(String, T, Type, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Heart.Services.MixCacheService.SetAsync(Of T)(System.String, T, System.Type, System.String)
  name.vb: SetAsync(Of T)(String, T, Type, String)
- uid: Mix.Heart.Services.MixCacheService.RemoveCacheAsync
  commentId: M:Mix.Heart.Services.MixCacheService.RemoveCacheAsync
  id: RemoveCacheAsync
  parent: Mix.Heart.Services.MixCacheService
  langs:
  - csharp
  - vb
  name: RemoveCacheAsync()
  nameWithType: MixCacheService.RemoveCacheAsync()
  fullName: Mix.Heart.Services.MixCacheService.RemoveCacheAsync()
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Services/MixCacheService.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: RemoveCacheAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Services/MixCacheService.cs
    startLine: 174
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Services
  syntax:
    content: public Task RemoveCacheAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveCacheAsync As Task
  overload: Mix.Heart.Services.MixCacheService.RemoveCacheAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Heart.Services.MixCacheService.RemoveCacheAsync(System.Object,System.Type)
  commentId: M:Mix.Heart.Services.MixCacheService.RemoveCacheAsync(System.Object,System.Type)
  id: RemoveCacheAsync(System.Object,System.Type)
  parent: Mix.Heart.Services.MixCacheService
  langs:
  - csharp
  - vb
  name: RemoveCacheAsync(Object, Type)
  nameWithType: MixCacheService.RemoveCacheAsync(Object, Type)
  fullName: Mix.Heart.Services.MixCacheService.RemoveCacheAsync(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/Mix.Heart/Services/MixCacheService.cs
      branch: develop/v2
      repo: https://github.com/mixcore/mix.heart.git
    id: RemoveCacheAsync
    path: ../../mix.core/src/framework/mix-heart/src/Mix.Heart/Services/MixCacheService.cs
    startLine: 188
  assemblies:
  - mix.heart
  namespace: Mix.Heart.Services
  syntax:
    content: public Task RemoveCacheAsync(object key, Type dataType)
    parameters:
    - id: key
      type: System.Object
    - id: dataType
      type: System.Type
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveCacheAsync(key As Object, dataType As Type) As Task
  overload: Mix.Heart.Services.MixCacheService.RemoveCacheAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Mix.Heart.Services
  commentId: N:Mix.Heart.Services
  name: Mix.Heart.Services
  nameWithType: Mix.Heart.Services
  fullName: Mix.Heart.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Heart.Services.MixCacheService.IsCacheEnabled*
  commentId: Overload:Mix.Heart.Services.MixCacheService.IsCacheEnabled
  name: IsCacheEnabled
  nameWithType: MixCacheService.IsCacheEnabled
  fullName: Mix.Heart.Services.MixCacheService.IsCacheEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: JsonSerializer
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: JsonSerializer
- uid: Mix.Heart.Services.MixCacheService.#ctor*
  commentId: Overload:Mix.Heart.Services.MixCacheService.#ctor
  name: MixCacheService
  nameWithType: MixCacheService.MixCacheService
  fullName: Mix.Heart.Services.MixCacheService.MixCacheService
- uid: Mix.Heart.Services.MixCacheService.GetAsync*
  commentId: Overload:Mix.Heart.Services.MixCacheService.GetAsync
  name: GetAsync
  nameWithType: MixCacheService.GetAsync
  fullName: Mix.Heart.Services.MixCacheService.GetAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mix.Heart.Services.MixCacheService.SetAsync*
  commentId: Overload:Mix.Heart.Services.MixCacheService.SetAsync
  name: SetAsync
  nameWithType: MixCacheService.SetAsync
  fullName: Mix.Heart.Services.MixCacheService.SetAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Mix.Heart.Services.MixCacheService.RemoveCacheAsync*
  commentId: Overload:Mix.Heart.Services.MixCacheService.RemoveCacheAsync
  name: RemoveCacheAsync
  nameWithType: MixCacheService.RemoveCacheAsync
  fullName: Mix.Heart.Services.MixCacheService.RemoveCacheAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
