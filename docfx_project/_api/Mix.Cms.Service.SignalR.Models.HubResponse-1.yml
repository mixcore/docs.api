### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1
  commentId: T:Mix.Cms.Service.SignalR.Models.HubResponse`1
  id: HubResponse`1
  parent: Mix.Cms.Service.SignalR.Models
  children:
  - Mix.Cms.Service.SignalR.Models.HubResponse`1.Data
  - Mix.Cms.Service.SignalR.Models.HubResponse`1.Errors
  - Mix.Cms.Service.SignalR.Models.HubResponse`1.Exception
  - Mix.Cms.Service.SignalR.Models.HubResponse`1.IsSucceed
  - Mix.Cms.Service.SignalR.Models.HubResponse`1.RenderDate
  - Mix.Cms.Service.SignalR.Models.HubResponse`1.ResponseKey
  langs:
  - csharp
  - vb
  name: HubResponse<T>
  nameWithType: HubResponse<T>
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>
  type: Class
  source:
    remote:
      path: src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: HubResponse
    path: ../../mix.core/src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
    startLine: 6
  assemblies:
  - Mix.Cms.Service.SignalR
  namespace: Mix.Cms.Service.SignalR.Models
  syntax:
    content: public class HubResponse<T>
    typeParameters:
    - id: T
    content.vb: Public Class HubResponse(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: HubResponse(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T)
  name.vb: HubResponse(Of T)
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.IsSucceed
  commentId: P:Mix.Cms.Service.SignalR.Models.HubResponse`1.IsSucceed
  id: IsSucceed
  parent: Mix.Cms.Service.SignalR.Models.HubResponse`1
  langs:
  - csharp
  - vb
  name: IsSucceed
  nameWithType: HubResponse<T>.IsSucceed
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.IsSucceed
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: IsSucceed
    path: ../../mix.core/src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
    startLine: 8
  assemblies:
  - Mix.Cms.Service.SignalR
  namespace: Mix.Cms.Service.SignalR.Models
  syntax:
    content: >-
      [JsonProperty("isSucceed")]

      public bool IsSucceed { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonProperty("isSucceed")>

      Public Property IsSucceed As Boolean
  overload: Mix.Cms.Service.SignalR.Models.HubResponse`1.IsSucceed*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: isSucceed
  nameWithType.vb: HubResponse(Of T).IsSucceed
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).IsSucceed
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.ResponseKey
  commentId: P:Mix.Cms.Service.SignalR.Models.HubResponse`1.ResponseKey
  id: ResponseKey
  parent: Mix.Cms.Service.SignalR.Models.HubResponse`1
  langs:
  - csharp
  - vb
  name: ResponseKey
  nameWithType: HubResponse<T>.ResponseKey
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.ResponseKey
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ResponseKey
    path: ../../mix.core/src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
    startLine: 11
  assemblies:
  - Mix.Cms.Service.SignalR
  namespace: Mix.Cms.Service.SignalR.Models
  syntax:
    content: >-
      [JsonProperty("responseKey")]

      public string ResponseKey { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("responseKey")>

      Public Property ResponseKey As String
  overload: Mix.Cms.Service.SignalR.Models.HubResponse`1.ResponseKey*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: responseKey
  nameWithType.vb: HubResponse(Of T).ResponseKey
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).ResponseKey
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.Errors
  commentId: P:Mix.Cms.Service.SignalR.Models.HubResponse`1.Errors
  id: Errors
  parent: Mix.Cms.Service.SignalR.Models.HubResponse`1
  langs:
  - csharp
  - vb
  name: Errors
  nameWithType: HubResponse<T>.Errors
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.Errors
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Errors
    path: ../../mix.core/src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
    startLine: 14
  assemblies:
  - Mix.Cms.Service.SignalR
  namespace: Mix.Cms.Service.SignalR.Models
  syntax:
    content: >-
      [JsonProperty("errors")]

      public List<string> Errors { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: >-
      <JsonProperty("errors")>

      Public Property Errors As List(Of String)
  overload: Mix.Cms.Service.SignalR.Models.HubResponse`1.Errors*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: errors
  nameWithType.vb: HubResponse(Of T).Errors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).Errors
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.Exception
  commentId: P:Mix.Cms.Service.SignalR.Models.HubResponse`1.Exception
  id: Exception
  parent: Mix.Cms.Service.SignalR.Models.HubResponse`1
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: HubResponse<T>.Exception
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.Exception
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Exception
    path: ../../mix.core/src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
    startLine: 17
  assemblies:
  - Mix.Cms.Service.SignalR
  namespace: Mix.Cms.Service.SignalR.Models
  syntax:
    content: >-
      [JsonProperty("exception")]

      public Exception Exception { get; set; }
    parameters: []
    return:
      type: System.Exception
    content.vb: >-
      <JsonProperty("exception")>

      Public Property Exception As Exception
  overload: Mix.Cms.Service.SignalR.Models.HubResponse`1.Exception*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: exception
  nameWithType.vb: HubResponse(Of T).Exception
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).Exception
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.Data
  commentId: P:Mix.Cms.Service.SignalR.Models.HubResponse`1.Data
  id: Data
  parent: Mix.Cms.Service.SignalR.Models.HubResponse`1
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: HubResponse<T>.Data
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.Data
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Data
    path: ../../mix.core/src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
    startLine: 20
  assemblies:
  - Mix.Cms.Service.SignalR
  namespace: Mix.Cms.Service.SignalR.Models
  syntax:
    content: >-
      [JsonProperty("data")]

      public T Data { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: >-
      <JsonProperty("data")>

      Public Property Data As T
  overload: Mix.Cms.Service.SignalR.Models.HubResponse`1.Data*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: data
  nameWithType.vb: HubResponse(Of T).Data
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).Data
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.RenderDate
  commentId: P:Mix.Cms.Service.SignalR.Models.HubResponse`1.RenderDate
  id: RenderDate
  parent: Mix.Cms.Service.SignalR.Models.HubResponse`1
  langs:
  - csharp
  - vb
  name: RenderDate
  nameWithType: HubResponse<T>.RenderDate
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.RenderDate
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: RenderDate
    path: ../../mix.core/src/Mix.Cms.Service.SignalR/Models/HubResponse.cs
    startLine: 23
  assemblies:
  - Mix.Cms.Service.SignalR
  namespace: Mix.Cms.Service.SignalR.Models
  syntax:
    content: >-
      [JsonProperty("renderDate")]

      public DateTime RenderDate { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: >-
      <JsonProperty("renderDate")>

      Public ReadOnly Property RenderDate As Date
  overload: Mix.Cms.Service.SignalR.Models.HubResponse`1.RenderDate*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: renderDate
  nameWithType.vb: HubResponse(Of T).RenderDate
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).RenderDate
references:
- uid: Mix.Cms.Service.SignalR.Models
  commentId: N:Mix.Cms.Service.SignalR.Models
  name: Mix.Cms.Service.SignalR.Models
  nameWithType: Mix.Cms.Service.SignalR.Models
  fullName: Mix.Cms.Service.SignalR.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.IsSucceed*
  commentId: Overload:Mix.Cms.Service.SignalR.Models.HubResponse`1.IsSucceed
  name: IsSucceed
  nameWithType: HubResponse<T>.IsSucceed
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.IsSucceed
  nameWithType.vb: HubResponse(Of T).IsSucceed
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).IsSucceed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.ResponseKey*
  commentId: Overload:Mix.Cms.Service.SignalR.Models.HubResponse`1.ResponseKey
  name: ResponseKey
  nameWithType: HubResponse<T>.ResponseKey
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.ResponseKey
  nameWithType.vb: HubResponse(Of T).ResponseKey
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).ResponseKey
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.Errors*
  commentId: Overload:Mix.Cms.Service.SignalR.Models.HubResponse`1.Errors
  name: Errors
  nameWithType: HubResponse<T>.Errors
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.Errors
  nameWithType.vb: HubResponse(Of T).Errors
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).Errors
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.Exception*
  commentId: Overload:Mix.Cms.Service.SignalR.Models.HubResponse`1.Exception
  name: Exception
  nameWithType: HubResponse<T>.Exception
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.Exception
  nameWithType.vb: HubResponse(Of T).Exception
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).Exception
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.Data*
  commentId: Overload:Mix.Cms.Service.SignalR.Models.HubResponse`1.Data
  name: Data
  nameWithType: HubResponse<T>.Data
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.Data
  nameWithType.vb: HubResponse(Of T).Data
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).Data
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Mix.Cms.Service.SignalR.Models.HubResponse`1.RenderDate*
  commentId: Overload:Mix.Cms.Service.SignalR.Models.HubResponse`1.RenderDate
  name: RenderDate
  nameWithType: HubResponse<T>.RenderDate
  fullName: Mix.Cms.Service.SignalR.Models.HubResponse<T>.RenderDate
  nameWithType.vb: HubResponse(Of T).RenderDate
  fullName.vb: Mix.Cms.Service.SignalR.Models.HubResponse(Of T).RenderDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
