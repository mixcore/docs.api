### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Lib.Repositories.TemplateRepository
  commentId: T:Mix.Cms.Lib.Repositories.TemplateRepository
  id: TemplateRepository
  parent: Mix.Cms.Lib.Repositories
  children:
  - Mix.Cms.Lib.Repositories.TemplateRepository.DeleteTemplate(System.String,System.String)
  - Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String,System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.TemplateViewModel},System.String)
  - Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String,System.String)
  - Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplates(System.String)
  - Mix.Cms.Lib.Repositories.TemplateRepository.Instance
  - Mix.Cms.Lib.Repositories.TemplateRepository.SaveTemplate(Mix.Cms.Lib.ViewModels.TemplateViewModel)
  langs:
  - csharp
  - vb
  name: TemplateRepository
  nameWithType: TemplateRepository
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository
  type: Class
  source:
    remote:
      path: src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: TemplateRepository
    path: ../../mix.core/src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
    startLine: 14
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: public class TemplateRepository
    content.vb: Public Class TemplateRepository
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.Instance
  commentId: P:Mix.Cms.Lib.Repositories.TemplateRepository.Instance
  id: Instance
  parent: Mix.Cms.Lib.Repositories.TemplateRepository
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: TemplateRepository.Instance
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.Instance
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Instance
    path: ../../mix.core/src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
    startLine: 30
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  summary: "\nGets the instance.\n"
  example: []
  syntax:
    content: public static TemplateRepository Instance { get; }
    parameters: []
    return:
      type: Mix.Cms.Lib.Repositories.TemplateRepository
      description: ''
    content.vb: Public Shared ReadOnly Property Instance As TemplateRepository
  overload: Mix.Cms.Lib.Repositories.TemplateRepository.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String,System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.TemplateViewModel},System.String)
  commentId: M:Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String,System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.TemplateViewModel},System.String)
  id: GetTemplate(System.String,System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.TemplateViewModel},System.String)
  parent: Mix.Cms.Lib.Repositories.TemplateRepository
  langs:
  - csharp
  - vb
  name: GetTemplate(String, List<TemplateViewModel>, String)
  nameWithType: TemplateRepository.GetTemplate(String, List<TemplateViewModel>, String)
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String, System.Collections.Generic.List<Mix.Cms.Lib.ViewModels.TemplateViewModel>, System.String)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetTemplate
    path: ../../mix.core/src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
    startLine: 53
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: public TemplateViewModel GetTemplate(string templatePath, List<TemplateViewModel> templates, string templateFolder)
    parameters:
    - id: templatePath
      type: System.String
    - id: templates
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.TemplateViewModel}
    - id: templateFolder
      type: System.String
    return:
      type: Mix.Cms.Lib.ViewModels.TemplateViewModel
    content.vb: Public Function GetTemplate(templatePath As String, templates As List(Of TemplateViewModel), templateFolder As String) As TemplateViewModel
  overload: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate*
  nameWithType.vb: TemplateRepository.GetTemplate(String, List(Of TemplateViewModel), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String, System.Collections.Generic.List(Of Mix.Cms.Lib.ViewModels.TemplateViewModel), System.String)
  name.vb: GetTemplate(String, List(Of TemplateViewModel), String)
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String,System.String)
  commentId: M:Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String,System.String)
  id: GetTemplate(System.String,System.String)
  parent: Mix.Cms.Lib.Repositories.TemplateRepository
  langs:
  - csharp
  - vb
  name: GetTemplate(String, String)
  nameWithType: TemplateRepository.GetTemplate(String, String)
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetTemplate
    path: ../../mix.core/src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
    startLine: 59
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: public TemplateViewModel GetTemplate(string name, string templateFolder)
    parameters:
    - id: name
      type: System.String
    - id: templateFolder
      type: System.String
    return:
      type: Mix.Cms.Lib.ViewModels.TemplateViewModel
    content.vb: Public Function GetTemplate(name As String, templateFolder As String) As TemplateViewModel
  overload: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.DeleteTemplate(System.String,System.String)
  commentId: M:Mix.Cms.Lib.Repositories.TemplateRepository.DeleteTemplate(System.String,System.String)
  id: DeleteTemplate(System.String,System.String)
  parent: Mix.Cms.Lib.Repositories.TemplateRepository
  langs:
  - csharp
  - vb
  name: DeleteTemplate(String, String)
  nameWithType: TemplateRepository.DeleteTemplate(String, String)
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.DeleteTemplate(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: DeleteTemplate
    path: ../../mix.core/src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
    startLine: 81
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: public bool DeleteTemplate(string name, string templateFolder)
    parameters:
    - id: name
      type: System.String
    - id: templateFolder
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function DeleteTemplate(name As String, templateFolder As String) As Boolean
  overload: Mix.Cms.Lib.Repositories.TemplateRepository.DeleteTemplate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplates(System.String)
  commentId: M:Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplates(System.String)
  id: GetTemplates(System.String)
  parent: Mix.Cms.Lib.Repositories.TemplateRepository
  langs:
  - csharp
  - vb
  name: GetTemplates(String)
  nameWithType: TemplateRepository.GetTemplates(String)
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplates(System.String)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: GetTemplates
    path: ../../mix.core/src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
    startLine: 95
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: public List<TemplateViewModel> GetTemplates(string folder)
    parameters:
    - id: folder
      type: System.String
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.TemplateViewModel}
    content.vb: Public Function GetTemplates(folder As String) As List(Of TemplateViewModel)
  overload: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplates*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.SaveTemplate(Mix.Cms.Lib.ViewModels.TemplateViewModel)
  commentId: M:Mix.Cms.Lib.Repositories.TemplateRepository.SaveTemplate(Mix.Cms.Lib.ViewModels.TemplateViewModel)
  id: SaveTemplate(Mix.Cms.Lib.ViewModels.TemplateViewModel)
  parent: Mix.Cms.Lib.Repositories.TemplateRepository
  langs:
  - csharp
  - vb
  name: SaveTemplate(TemplateViewModel)
  nameWithType: TemplateRepository.SaveTemplate(TemplateViewModel)
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.SaveTemplate(Mix.Cms.Lib.ViewModels.TemplateViewModel)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SaveTemplate
    path: ../../mix.core/src/Mix.Cms.Lib/Repositories/TemplateRepository.cs
    startLine: 120
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Repositories
  syntax:
    content: public bool SaveTemplate(TemplateViewModel file)
    parameters:
    - id: file
      type: Mix.Cms.Lib.ViewModels.TemplateViewModel
    return:
      type: System.Boolean
    content.vb: Public Function SaveTemplate(file As TemplateViewModel) As Boolean
  overload: Mix.Cms.Lib.Repositories.TemplateRepository.SaveTemplate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Mix.Cms.Lib.Repositories
  commentId: N:Mix.Cms.Lib.Repositories
  name: Mix.Cms.Lib.Repositories
  nameWithType: Mix.Cms.Lib.Repositories
  fullName: Mix.Cms.Lib.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.Instance*
  commentId: Overload:Mix.Cms.Lib.Repositories.TemplateRepository.Instance
  name: Instance
  nameWithType: TemplateRepository.Instance
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.Instance
- uid: Mix.Cms.Lib.Repositories.TemplateRepository
  commentId: T:Mix.Cms.Lib.Repositories.TemplateRepository
  parent: Mix.Cms.Lib.Repositories
  name: TemplateRepository
  nameWithType: TemplateRepository
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate*
  commentId: Overload:Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate
  name: GetTemplate
  nameWithType: TemplateRepository.GetTemplate
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplate
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.TemplateViewModel}
  commentId: T:System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.TemplateViewModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TemplateViewModel>
  nameWithType: List<TemplateViewModel>
  fullName: System.Collections.Generic.List<Mix.Cms.Lib.ViewModels.TemplateViewModel>
  nameWithType.vb: List(Of TemplateViewModel)
  fullName.vb: System.Collections.Generic.List(Of Mix.Cms.Lib.ViewModels.TemplateViewModel)
  name.vb: List(Of TemplateViewModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.TemplateViewModel
    name: TemplateViewModel
    nameWithType: TemplateViewModel
    fullName: Mix.Cms.Lib.ViewModels.TemplateViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.TemplateViewModel
    name: TemplateViewModel
    nameWithType: TemplateViewModel
    fullName: Mix.Cms.Lib.ViewModels.TemplateViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.TemplateViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.TemplateViewModel
  parent: Mix.Cms.Lib.ViewModels
  name: TemplateViewModel
  nameWithType: TemplateViewModel
  fullName: Mix.Cms.Lib.ViewModels.TemplateViewModel
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Mix.Cms.Lib.ViewModels
  commentId: N:Mix.Cms.Lib.ViewModels
  name: Mix.Cms.Lib.ViewModels
  nameWithType: Mix.Cms.Lib.ViewModels
  fullName: Mix.Cms.Lib.ViewModels
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.DeleteTemplate*
  commentId: Overload:Mix.Cms.Lib.Repositories.TemplateRepository.DeleteTemplate
  name: DeleteTemplate
  nameWithType: TemplateRepository.DeleteTemplate
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.DeleteTemplate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplates*
  commentId: Overload:Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplates
  name: GetTemplates
  nameWithType: TemplateRepository.GetTemplates
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.GetTemplates
- uid: Mix.Cms.Lib.Repositories.TemplateRepository.SaveTemplate*
  commentId: Overload:Mix.Cms.Lib.Repositories.TemplateRepository.SaveTemplate
  name: SaveTemplate
  nameWithType: TemplateRepository.SaveTemplate
  fullName: Mix.Cms.Lib.Repositories.TemplateRepository.SaveTemplate
