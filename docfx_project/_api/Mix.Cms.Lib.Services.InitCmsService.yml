### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Lib.Services.InitCmsService
  commentId: T:Mix.Cms.Lib.Services.InitCmsService
  id: InitCmsService
  parent: Mix.Cms.Lib.Services
  children:
  - Mix.Cms.Lib.Services.InitCmsService.#ctor
  - Mix.Cms.Lib.Services.InitCmsService.InitAttributeSetsAsync(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.Services.InitCmsService.InitCms(System.String,Mix.Cms.Lib.ViewModels.InitCulture)
  - Mix.Cms.Lib.Services.InitCmsService.InitConfigurationsAsync(System.String,System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.Services.InitCmsService.InitCultures(Mix.Cms.Lib.ViewModels.InitCulture,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync(System.String,System.Collections.Generic.List{Mix.Cms.Lib.Models.Cms.MixLanguage},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.Services.InitCmsService.InitPages(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.Services.InitCmsService.InitSiteData(System.String,Mix.Cms.Lib.ViewModels.InitCulture)
  - Mix.Cms.Lib.Services.InitCmsService.InitThemesAsync(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  langs:
  - csharp
  - vb
  name: InitCmsService
  nameWithType: InitCmsService
  fullName: Mix.Cms.Lib.Services.InitCmsService
  type: Class
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitCmsService
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 20
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  syntax:
    content: public class InitCmsService
    content.vb: Public Class InitCmsService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Lib.Services.InitCmsService.#ctor
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.#ctor
  id: '#ctor'
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitCmsService()
  nameWithType: InitCmsService.InitCmsService()
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitCmsService()
  type: Constructor
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 22
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  syntax:
    content: public InitCmsService()
    content.vb: Public Sub New
  overload: Mix.Cms.Lib.Services.InitCmsService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Services.InitCmsService.InitCms(System.String,Mix.Cms.Lib.ViewModels.InitCulture)
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.InitCms(System.String,Mix.Cms.Lib.ViewModels.InitCulture)
  id: InitCms(System.String,Mix.Cms.Lib.ViewModels.InitCulture)
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitCms(String, InitCulture)
  nameWithType: InitCmsService.InitCms(String, InitCulture)
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitCms(System.String, Mix.Cms.Lib.ViewModels.InitCulture)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitCms
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 34
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  summary: "\nStep 1\n- Init Culture\n- Init System pages\n"
  example: []
  syntax:
    content: public static Task<RepositoryResponse<bool>> InitCms(string siteName, InitCulture culture)
    parameters:
    - id: siteName
      type: System.String
      description: ''
    - id: culture
      type: Mix.Cms.Lib.ViewModels.InitCulture
      description: ''
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
      description: ''
    content.vb: Public Shared Function InitCms(siteName As String, culture As InitCulture) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Cms.Lib.Services.InitCmsService.InitCms*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mix.Cms.Lib.Services.InitCmsService.InitSiteData(System.String,Mix.Cms.Lib.ViewModels.InitCulture)
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.InitSiteData(System.String,Mix.Cms.Lib.ViewModels.InitCulture)
  id: InitSiteData(System.String,Mix.Cms.Lib.ViewModels.InitCulture)
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitSiteData(String, InitCulture)
  nameWithType: InitCmsService.InitSiteData(String, InitCulture)
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitSiteData(System.String, Mix.Cms.Lib.ViewModels.InitCulture)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitSiteData
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 70
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  syntax:
    content: public static Task<RepositoryResponse<bool>> InitSiteData(string siteName, InitCulture culture)
    parameters:
    - id: siteName
      type: System.String
    - id: culture
      type: Mix.Cms.Lib.ViewModels.InitCulture
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Shared Function InitSiteData(siteName As String, culture As InitCulture) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Cms.Lib.Services.InitCmsService.InitSiteData*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mix.Cms.Lib.Services.InitCmsService.InitConfigurationsAsync(System.String,System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.InitConfigurationsAsync(System.String,System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: InitConfigurationsAsync(System.String,System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitConfigurationsAsync(String, String, MixCmsContext, IDbContextTransaction)
  nameWithType: InitCmsService.InitConfigurationsAsync(String, String, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitConfigurationsAsync(System.String, System.String, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitConfigurationsAsync
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 141
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  summary: "\nStep 2\n- Init Configurations\n"
  example: []
  syntax:
    content: public static Task<RepositoryResponse<bool>> InitConfigurationsAsync(string siteName, string specifiCulture, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: siteName
      type: System.String
      description: ''
    - id: specifiCulture
      type: System.String
      description: ''
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
      description: ''
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
      description: ''
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
      description: ''
    content.vb: Public Shared Function InitConfigurationsAsync(siteName As String, specifiCulture As String, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Cms.Lib.Services.InitCmsService.InitConfigurationsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mix.Cms.Lib.Services.InitCmsService.InitAttributeSetsAsync(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.InitAttributeSetsAsync(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: InitAttributeSetsAsync(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitAttributeSetsAsync(MixCmsContext, IDbContextTransaction)
  nameWithType: InitCmsService.InitAttributeSetsAsync(MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitAttributeSetsAsync(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitAttributeSetsAsync
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 173
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  summary: "\nStep 2\n- Init Configurations\n"
  example: []
  syntax:
    content: public static Task<RepositoryResponse<bool>> InitAttributeSetsAsync(MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
      description: ''
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
      description: ''
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
      description: ''
    content.vb: Public Shared Function InitAttributeSetsAsync(_context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Cms.Lib.Services.InitCmsService.InitAttributeSetsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync(System.String,System.Collections.Generic.List{Mix.Cms.Lib.Models.Cms.MixLanguage},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync(System.String,System.Collections.Generic.List{Mix.Cms.Lib.Models.Cms.MixLanguage},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: InitLanguagesAsync(System.String,System.Collections.Generic.List{Mix.Cms.Lib.Models.Cms.MixLanguage},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitLanguagesAsync(String, List<MixLanguage>, MixCmsContext, IDbContextTransaction)
  nameWithType: InitCmsService.InitLanguagesAsync(String, List<MixLanguage>, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync(System.String, System.Collections.Generic.List<Mix.Cms.Lib.Models.Cms.MixLanguage>, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitLanguagesAsync
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 209
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  summary: "\nStep 3\n- Init Languages for translate\n"
  example: []
  syntax:
    content: public Task<RepositoryResponse<bool>> InitLanguagesAsync(string specificulture, List<MixLanguage> languages, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: specificulture
      type: System.String
    - id: languages
      type: System.Collections.Generic.List{Mix.Cms.Lib.Models.Cms.MixLanguage}
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
      description: ''
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
      description: ''
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
      description: ''
    content.vb: Public Function InitLanguagesAsync(specificulture As String, languages As List(Of MixLanguage), _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync*
  nameWithType.vb: InitCmsService.InitLanguagesAsync(String, List(Of MixLanguage), MixCmsContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync(System.String, System.Collections.Generic.List(Of Mix.Cms.Lib.Models.Cms.MixLanguage), Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: InitLanguagesAsync(String, List(Of MixLanguage), MixCmsContext, IDbContextTransaction)
- uid: Mix.Cms.Lib.Services.InitCmsService.InitThemesAsync(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.InitThemesAsync(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: InitThemesAsync(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitThemesAsync(String, MixCmsContext, IDbContextTransaction)
  nameWithType: InitCmsService.InitThemesAsync(String, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitThemesAsync(System.String, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitThemesAsync
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 229
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  summary: "\nStep 4\n- Init default theme\n"
  example: []
  syntax:
    content: public Task<RepositoryResponse<bool>> InitThemesAsync(string siteName, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: siteName
      type: System.String
      description: ''
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
      description: ''
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
      description: ''
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
      description: ''
    content.vb: Public Function InitThemesAsync(siteName As String, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overload: Mix.Cms.Lib.Services.InitCmsService.InitThemesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.Services.InitCmsService.InitCultures(Mix.Cms.Lib.ViewModels.InitCulture,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.InitCultures(Mix.Cms.Lib.ViewModels.InitCulture,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: InitCultures(Mix.Cms.Lib.ViewModels.InitCulture,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitCultures(InitCulture, MixCmsContext, IDbContextTransaction)
  nameWithType: InitCmsService.InitCultures(InitCulture, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitCultures(Mix.Cms.Lib.ViewModels.InitCulture, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitCultures
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 253
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  syntax:
    content: protected static bool InitCultures(InitCulture culture, MixCmsContext context, IDbContextTransaction transaction)
    parameters:
    - id: culture
      type: Mix.Cms.Lib.ViewModels.InitCulture
    - id: context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Boolean
    content.vb: Protected Shared Function InitCultures(culture As InitCulture, context As MixCmsContext, transaction As IDbContextTransaction) As Boolean
  overload: Mix.Cms.Lib.Services.InitCmsService.InitCultures*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: Mix.Cms.Lib.Services.InitCmsService.InitPages(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.Services.InitCmsService.InitPages(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: InitPages(System.String,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.Services.InitCmsService
  langs:
  - csharp
  - vb
  name: InitPages(String, MixCmsContext, IDbContextTransaction)
  nameWithType: InitCmsService.InitPages(String, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitPages(System.String, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/Services/InitCmsService.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: InitPages
    path: ../../mix.core/src/Mix.Cms.Lib/Services/InitCmsService.cs
    startLine: 285
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.Services
  syntax:
    content: protected static void InitPages(string culture, MixCmsContext context, IDbContextTransaction transaction)
    parameters:
    - id: culture
      type: System.String
    - id: context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Protected Shared Sub InitPages(culture As String, context As MixCmsContext, transaction As IDbContextTransaction)
  overload: Mix.Cms.Lib.Services.InitCmsService.InitPages*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
references:
- uid: Mix.Cms.Lib.Services
  commentId: N:Mix.Cms.Lib.Services
  name: Mix.Cms.Lib.Services
  nameWithType: Mix.Cms.Lib.Services
  fullName: Mix.Cms.Lib.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Cms.Lib.Services.InitCmsService.#ctor*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.#ctor
  name: InitCmsService
  nameWithType: InitCmsService.InitCmsService
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitCmsService
- uid: Mix.Cms.Lib.Services.InitCmsService.InitCms*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.InitCms
  name: InitCms
  nameWithType: InitCmsService.InitCms
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitCms
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Cms.Lib.ViewModels.InitCulture
  commentId: T:Mix.Cms.Lib.ViewModels.InitCulture
  parent: Mix.Cms.Lib.ViewModels
  name: InitCulture
  nameWithType: InitCulture
  fullName: Mix.Cms.Lib.ViewModels.InitCulture
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
  commentId: T:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<Boolean>>
  nameWithType: Task<RepositoryResponse<Boolean>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<System.Boolean>>
  nameWithType.vb: Task(Of RepositoryResponse(Of Boolean))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of System.Boolean))
  name.vb: Task(Of RepositoryResponse(Of Boolean))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels
  commentId: N:Mix.Cms.Lib.ViewModels
  name: Mix.Cms.Lib.ViewModels
  nameWithType: Mix.Cms.Lib.ViewModels
  fullName: Mix.Cms.Lib.ViewModels
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mix.Cms.Lib.Services.InitCmsService.InitSiteData*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.InitSiteData
  name: InitSiteData
  nameWithType: InitCmsService.InitSiteData
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitSiteData
- uid: Mix.Cms.Lib.Services.InitCmsService.InitConfigurationsAsync*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.InitConfigurationsAsync
  name: InitConfigurationsAsync
  nameWithType: InitCmsService.InitConfigurationsAsync
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitConfigurationsAsync
- uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
  commentId: T:Mix.Cms.Lib.Models.Cms.MixCmsContext
  parent: Mix.Cms.Lib.Models.Cms
  name: MixCmsContext
  nameWithType: MixCmsContext
  fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: true
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: Mix.Cms.Lib.Models.Cms
  commentId: N:Mix.Cms.Lib.Models.Cms
  name: Mix.Cms.Lib.Models.Cms
  nameWithType: Mix.Cms.Lib.Models.Cms
  fullName: Mix.Cms.Lib.Models.Cms
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: true
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Mix.Cms.Lib.Services.InitCmsService.InitAttributeSetsAsync*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.InitAttributeSetsAsync
  name: InitAttributeSetsAsync
  nameWithType: InitCmsService.InitAttributeSetsAsync
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitAttributeSetsAsync
- uid: Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync
  name: InitLanguagesAsync
  nameWithType: InitCmsService.InitLanguagesAsync
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitLanguagesAsync
- uid: System.Collections.Generic.List{Mix.Cms.Lib.Models.Cms.MixLanguage}
  commentId: T:System.Collections.Generic.List{Mix.Cms.Lib.Models.Cms.MixLanguage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MixLanguage>
  nameWithType: List<MixLanguage>
  fullName: System.Collections.Generic.List<Mix.Cms.Lib.Models.Cms.MixLanguage>
  nameWithType.vb: List(Of MixLanguage)
  fullName.vb: System.Collections.Generic.List(Of Mix.Cms.Lib.Models.Cms.MixLanguage)
  name.vb: List(Of MixLanguage)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.Models.Cms.MixLanguage
    name: MixLanguage
    nameWithType: MixLanguage
    fullName: Mix.Cms.Lib.Models.Cms.MixLanguage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.Models.Cms.MixLanguage
    name: MixLanguage
    nameWithType: MixLanguage
    fullName: Mix.Cms.Lib.Models.Cms.MixLanguage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Mix.Cms.Lib.Services.InitCmsService.InitThemesAsync*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.InitThemesAsync
  name: InitThemesAsync
  nameWithType: InitCmsService.InitThemesAsync
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitThemesAsync
- uid: Mix.Cms.Lib.Services.InitCmsService.InitCultures*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.InitCultures
  name: InitCultures
  nameWithType: InitCmsService.InitCultures
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitCultures
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mix.Cms.Lib.Services.InitCmsService.InitPages*
  commentId: Overload:Mix.Cms.Lib.Services.InitCmsService.InitPages
  name: InitPages
  nameWithType: InitCmsService.InitPages
  fullName: Mix.Cms.Lib.Services.InitCmsService.InitPages
