### YamlMime:ManagedReference
items:
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  id: UpdateViewModel
  parent: Mix.Cms.Lib.ViewModels.MixModules
  children:
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ActivedTheme
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.AttributeSet
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Columns
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedBy
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedDateTime
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Cultures
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Data
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Description
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Domain
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolder
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolderType
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Edms
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmTemplate
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmView
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Fields
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolder
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolderType
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Forms
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormTemplate
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormView
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Id
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Image
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ImageUrl
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LastModified
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ModifiedBy
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Name
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageId
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageSize
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PostId
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Priority
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveByModuleName(System.String,System.String,System.String,System.String,Newtonsoft.Json.Linq.JObject,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Specificulture
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Status
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysCategories
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysTags
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Template
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolder
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolderType
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Templates
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThemeFolderType
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Thumbnail
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThumbnailUrl
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Title
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Type
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UrlAliases
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.View
  langs:
  - csharp
  - vb
  name: UpdateViewModel
  nameWithType: UpdateViewModel
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  type: Class
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: UpdateViewModel
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 19
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: 'public class UpdateViewModel : ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>, ISerializable'
    content.vb: >-
      Public Class UpdateViewModel

          Inherits ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel)

          Implements ISerializable
  inheritance:
  - System.Object
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Repository
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ModelRepository
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitModel
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneAsync(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitView(Mix.Cms.Lib.Models.Cms.MixModule,System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ParseView(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Clone(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneSubModels(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveModel(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveRelatedModels(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveModel(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveSubModels(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitContext
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetCachedKey(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetPropValue(System.Object,System.String)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GenerateCache(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.AddToCache(Mix.Cms.Lib.Models.Cms.MixModule,System.Object,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveCache(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.IsCache
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Model
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Errors
  - Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.IsValid
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Id
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Id
  id: Id
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: UpdateViewModel.Id
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Id
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Id
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 25
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("id")]

      public int Id { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <JsonProperty("id")>

      Public Property Id As Integer
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Id*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: id
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Specificulture
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Specificulture
  id: Specificulture
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Specificulture
  nameWithType: UpdateViewModel.Specificulture
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Specificulture
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Specificulture
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 27
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("specificulture")]

      public string Specificulture { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("specificulture")>

      Public Property Specificulture As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Specificulture*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: specificulture
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Cultures
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Cultures
  id: Cultures
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Cultures
  nameWithType: UpdateViewModel.Cultures
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Cultures
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Cultures
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 29
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("cultures")]

      public List<SupportedCulture> Cultures { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
    content.vb: >-
      <JsonProperty("cultures")>

      Public Property Cultures As List(Of SupportedCulture)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Cultures*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: cultures
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Name
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Name
  id: Name
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: UpdateViewModel.Name
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Name
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Name
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 32
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("name")]

      public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("name")>

      Public Property Name As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Name*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Image
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Image
  id: Image
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Image
  nameWithType: UpdateViewModel.Image
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Image
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Image
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 35
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("image")]

      public string Image { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("image")>

      Public Property Image As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Image*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: image
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Thumbnail
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Thumbnail
  id: Thumbnail
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Thumbnail
  nameWithType: UpdateViewModel.Thumbnail
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Thumbnail
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Thumbnail
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 38
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("thumbnail")]

      public string Thumbnail { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("thumbnail")>

      Public Property Thumbnail As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Thumbnail*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: thumbnail
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Template
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Template
  id: Template
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Template
  nameWithType: UpdateViewModel.Template
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Template
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Template
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 41
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("template")]

      public string Template { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("template")>

      Public Property Template As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Template*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: template
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormTemplate
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormTemplate
  id: FormTemplate
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: FormTemplate
  nameWithType: UpdateViewModel.FormTemplate
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormTemplate
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: FormTemplate
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 44
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("formTemplate")]

      public string FormTemplate { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("formTemplate")>

      Public Property FormTemplate As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormTemplate*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: formTemplate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmTemplate
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmTemplate
  id: EdmTemplate
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: EdmTemplate
  nameWithType: UpdateViewModel.EdmTemplate
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmTemplate
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: EdmTemplate
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 47
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("edmTemplate")]

      public string EdmTemplate { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("edmTemplate")>

      Public Property EdmTemplate As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmTemplate*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: edmTemplate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Title
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Title
  id: Title
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: UpdateViewModel.Title
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Title
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Title
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 50
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("title")]

      public string Title { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("title")>

      Public Property Title As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Title*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: title
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Description
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Description
  id: Description
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: UpdateViewModel.Description
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Description
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Description
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 53
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("description")]

      public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("description")>

      Public Property Description As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Description*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: description
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Fields
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Fields
  id: Fields
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: UpdateViewModel.Fields
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Fields
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Fields
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 56
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("fields")]

      public string Fields { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("fields")>

      Public Property Fields As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Fields*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: fields
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Type
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Type
  id: Type
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: UpdateViewModel.Type
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Type
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Type
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 59
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("type")]

      public MixModuleType Type { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.Enums.MixModuleType
    content.vb: >-
      <JsonProperty("type")>

      Public Property Type As MixModuleType
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Type*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: type
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageSize
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageSize
  id: PageSize
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: PageSize
  nameWithType: UpdateViewModel.PageSize
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageSize
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: PageSize
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 62
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("pageSize")]

      public int? PageSize { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: >-
      <JsonProperty("pageSize")>

      Public Property PageSize As Integer?
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageSize*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: pageSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedBy
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedBy
  id: CreatedBy
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: CreatedBy
  nameWithType: UpdateViewModel.CreatedBy
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedBy
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: CreatedBy
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 65
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("createdBy")]

      public string CreatedBy { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("createdBy")>

      Public Property CreatedBy As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedBy*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: createdBy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedDateTime
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedDateTime
  id: CreatedDateTime
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: CreatedDateTime
  nameWithType: UpdateViewModel.CreatedDateTime
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedDateTime
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: CreatedDateTime
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 67
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("createdDateTime")]

      public DateTime CreatedDateTime { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: >-
      <JsonProperty("createdDateTime")>

      Public Property CreatedDateTime As Date
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedDateTime*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: createdDateTime
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ModifiedBy
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ModifiedBy
  id: ModifiedBy
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: ModifiedBy
  nameWithType: UpdateViewModel.ModifiedBy
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ModifiedBy
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ModifiedBy
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 69
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("modifiedBy")]

      public string ModifiedBy { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("modifiedBy")>

      Public Property ModifiedBy As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ModifiedBy*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: modifiedBy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LastModified
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LastModified
  id: LastModified
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: LastModified
  nameWithType: UpdateViewModel.LastModified
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LastModified
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: LastModified
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 71
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("lastModified")]

      public DateTime? LastModified { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
    content.vb: >-
      <JsonProperty("lastModified")>

      Public Property LastModified As Date?
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LastModified*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: lastModified
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Priority
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Priority
  id: Priority
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: UpdateViewModel.Priority
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Priority
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Priority
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 73
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("priority")]

      public int Priority { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <JsonProperty("priority")>

      Public Property Priority As Integer
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Priority*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: priority
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Status
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Status
  id: Status
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: UpdateViewModel.Status
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Status
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Status
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 75
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("status")]

      public MixContentStatus Status { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.Enums.MixContentStatus
    content.vb: >-
      <JsonProperty("status")>

      Public Property Status As MixContentStatus
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Status*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: status
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.AttributeSet
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.AttributeSet
  id: AttributeSet
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: AttributeSet
  nameWithType: UpdateViewModel.AttributeSet
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.AttributeSet
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: AttributeSet
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 83
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("attributeSet")]

      public UpdateViewModel AttributeSet { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.ViewModels.MixAttributeSets.UpdateViewModel
    content.vb: >-
      <JsonProperty("attributeSet")>

      Public Property AttributeSet As UpdateViewModel
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.AttributeSet*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: attributeSet
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Domain
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Domain
  id: Domain
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Domain
  nameWithType: UpdateViewModel.Domain
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Domain
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Domain
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 88
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("domain")]

      public string Domain { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("domain")>

      Public ReadOnly Property Domain As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Domain*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: domain
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ImageUrl
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ImageUrl
  id: ImageUrl
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: ImageUrl
  nameWithType: UpdateViewModel.ImageUrl
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ImageUrl
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ImageUrl
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 91
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("imageUrl")]

      public string ImageUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("imageUrl")>

      Public ReadOnly Property ImageUrl As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ImageUrl*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: imageUrl
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThumbnailUrl
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThumbnailUrl
  id: ThumbnailUrl
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: ThumbnailUrl
  nameWithType: UpdateViewModel.ThumbnailUrl
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThumbnailUrl
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ThumbnailUrl
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 109
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("thumbnailUrl")]

      public string ThumbnailUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("thumbnailUrl")>

      Public ReadOnly Property ThumbnailUrl As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThumbnailUrl*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: thumbnailUrl
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Data
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Data
  id: Data
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: UpdateViewModel.Data
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Data
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Data
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 127
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("data")]

      public PaginationModel<ReadViewModel> Data { get; set; }
    parameters: []
    return:
      type: Mix.Domain.Core.ViewModels.PaginationModel{Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel}
    content.vb: >-
      <JsonProperty("data")>

      Public Property Data As PaginationModel(Of ReadViewModel)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Data*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: data
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Columns
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Columns
  id: Columns
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Columns
  nameWithType: UpdateViewModel.Columns
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Columns
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Columns
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 130
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("columns")]

      public List<ModuleFieldViewModel> Columns { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.ModuleFieldViewModel}
    content.vb: >-
      <JsonProperty("columns")>

      Public Property Columns As List(Of ModuleFieldViewModel)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Columns*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: columns
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Templates
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Templates
  id: Templates
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Templates
  nameWithType: UpdateViewModel.Templates
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Templates
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Templates
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 135
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("templates")]

      public List<UpdateViewModel> Templates { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel}
    content.vb: >-
      <JsonProperty("templates")>

      Public Property Templates As List(Of UpdateViewModel)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Templates*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: templates
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolderType
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolderType
  id: TemplateFolderType
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: TemplateFolderType
  nameWithType: UpdateViewModel.TemplateFolderType
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolderType
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: TemplateFolderType
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 138
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonIgnore]

      public string TemplateFolderType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property TemplateFolderType As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolderType*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.View
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.View
  id: View
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: View
  nameWithType: UpdateViewModel.View
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.View
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: View
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 147
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("view")]

      public UpdateViewModel View { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
    content.vb: >-
      <JsonProperty("view")>

      Public Property View As UpdateViewModel
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.View*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: view
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ActivedTheme
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ActivedTheme
  id: ActivedTheme
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: ActivedTheme
  nameWithType: UpdateViewModel.ActivedTheme
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ActivedTheme
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ActivedTheme
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 150
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonIgnore]

      public int ActivedTheme { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property ActivedTheme As Integer
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ActivedTheme*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThemeFolderType
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThemeFolderType
  id: ThemeFolderType
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: ThemeFolderType
  nameWithType: UpdateViewModel.ThemeFolderType
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThemeFolderType
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ThemeFolderType
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 159
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonIgnore]

      public string ThemeFolderType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property ThemeFolderType As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThemeFolderType*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolder
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolder
  id: TemplateFolder
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: TemplateFolder
  nameWithType: UpdateViewModel.TemplateFolder
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolder
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: TemplateFolder
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 162
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("templateFolder")]

      public string TemplateFolder { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("templateFolder")>

      Public ReadOnly Property TemplateFolder As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolder*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: templateFolder
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Forms
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Forms
  id: Forms
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Forms
  nameWithType: UpdateViewModel.Forms
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Forms
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Forms
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 181
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("forms")]

      public List<UpdateViewModel> Forms { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel}
    content.vb: >-
      <JsonProperty("forms")>

      Public Property Forms As List(Of UpdateViewModel)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Forms*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: forms
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolderType
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolderType
  id: FormFolderType
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: FormFolderType
  nameWithType: UpdateViewModel.FormFolderType
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolderType
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: FormFolderType
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 184
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonIgnore]

      public string FormFolderType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property FormFolderType As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolderType*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormView
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormView
  id: FormView
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: FormView
  nameWithType: UpdateViewModel.FormView
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormView
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: FormView
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 193
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("formView")]

      public UpdateViewModel FormView { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
    content.vb: >-
      <JsonProperty("formView")>

      Public Property FormView As UpdateViewModel
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormView*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: formView
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolder
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolder
  id: FormFolder
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: FormFolder
  nameWithType: UpdateViewModel.FormFolder
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolder
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: FormFolder
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 196
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("formFolder")]

      public string FormFolder { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("formFolder")>

      Public ReadOnly Property FormFolder As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolder*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: formFolder
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Edms
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Edms
  id: Edms
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Edms
  nameWithType: UpdateViewModel.Edms
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Edms
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Edms
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 215
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("edms")]

      public List<UpdateViewModel> Edms { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel}
    content.vb: >-
      <JsonProperty("edms")>

      Public Property Edms As List(Of UpdateViewModel)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Edms*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: edms
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolderType
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolderType
  id: EdmFolderType
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: EdmFolderType
  nameWithType: UpdateViewModel.EdmFolderType
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolderType
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: EdmFolderType
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 218
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonIgnore]

      public string EdmFolderType { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property EdmFolderType As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolderType*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmView
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmView
  id: EdmView
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: EdmView
  nameWithType: UpdateViewModel.EdmView
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmView
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: EdmView
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 227
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("edmView")]

      public UpdateViewModel EdmView { get; set; }
    parameters: []
    return:
      type: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
    content.vb: >-
      <JsonProperty("edmView")>

      Public Property EdmView As UpdateViewModel
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmView*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: edmView
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolder
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolder
  id: EdmFolder
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: EdmFolder
  nameWithType: UpdateViewModel.EdmFolder
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolder
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: EdmFolder
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 230
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("edmFolder")]

      public string EdmFolder { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("edmFolder")>

      Public ReadOnly Property EdmFolder As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolder*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: edmFolder
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PostId
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PostId
  id: PostId
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: PostId
  nameWithType: UpdateViewModel.PostId
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PostId
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: PostId
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 248
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("postId")]

      public string PostId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("postId")>

      Public Property PostId As String
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PostId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: postId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageId
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageId
  id: PageId
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: PageId
  nameWithType: UpdateViewModel.PageId
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageId
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: PageId
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 252
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("pageId")]

      public int PageId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <JsonProperty("pageId")>

      Public Property PageId As Integer
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: pageId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UrlAliases
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UrlAliases
  id: UrlAliases
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: UrlAliases
  nameWithType: UpdateViewModel.UrlAliases
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UrlAliases
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: UrlAliases
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 255
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public List<UpdateViewModel> UrlAliases { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel}
    content.vb: Public Property UrlAliases As List(Of UpdateViewModel)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UrlAliases*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysCategories
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysCategories
  id: SysCategories
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: SysCategories
  nameWithType: UpdateViewModel.SysCategories
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysCategories
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SysCategories
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 257
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("sysCategories")]

      public List<UpdateViewModel> SysCategories { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel}
    content.vb: >-
      <JsonProperty("sysCategories")>

      Public Property SysCategories As List(Of UpdateViewModel)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysCategories*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: sysCategories
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysTags
  commentId: P:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysTags
  id: SysTags
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: SysTags
  nameWithType: UpdateViewModel.SysTags
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysTags
  type: Property
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SysTags
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 260
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: >-
      [JsonProperty("sysTags")]

      public List<UpdateViewModel> SysTags { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel}
    content.vb: >-
      <JsonProperty("sysTags")>

      Public Property SysTags As List(Of UpdateViewModel)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysTags*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: sysTags
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor
  id: '#ctor'
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: UpdateViewModel()
  nameWithType: UpdateViewModel.UpdateViewModel()
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UpdateViewModel()
  type: Constructor
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 268
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public UpdateViewModel()
    content.vb: Public Sub New
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: '#ctor(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)'
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: UpdateViewModel(MixModule, MixCmsContext, IDbContextTransaction)
  nameWithType: UpdateViewModel.UpdateViewModel(MixModule, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UpdateViewModel(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Constructor
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 272
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public UpdateViewModel(MixModule model, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: model
      type: Mix.Cms.Lib.Models.Cms.MixModule
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Public Sub New(model As MixModule, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: Validate(MixCmsContext, IDbContextTransaction)
  nameWithType: UpdateViewModel.Validate(MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Validate
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 280
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public override void Validate(MixCmsContext _context, IDbContextTransaction _transaction)
    parameters:
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Public Overrides Sub Validate(_context As MixCmsContext, _transaction As IDbContextTransaction)
  overridden: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Validate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: ParseModel(MixCmsContext, IDbContextTransaction)
  nameWithType: UpdateViewModel.ParseModel(MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ParseModel
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 294
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public override MixModule ParseModel(MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: Mix.Cms.Lib.Models.Cms.MixModule
    content.vb: Public Overrides Function ParseModel(_context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As MixModule
  overridden: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ParseModel*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: ExpandView(MixCmsContext, IDbContextTransaction)
  nameWithType: UpdateViewModel.ExpandView(MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ExpandView
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 314
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public override void ExpandView(MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Public Overrides Sub ExpandView(_context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing)
  overridden: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ExpandView*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: RemoveModelAsync(Boolean, MixCmsContext, IDbContextTransaction)
  nameWithType: UpdateViewModel.RemoveModelAsync(Boolean, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.RemoveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: RemoveModelAsync
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 374
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public override Task<RepositoryResponse<MixModule>> RemoveModelAsync(bool isRemoveRelatedModels = false, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: isRemoveRelatedModels
      type: System.Boolean
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.Models.Cms.MixModule}}
    content.vb: Public Overrides Function RemoveModelAsync(isRemoveRelatedModels As Boolean = False, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of MixModule))
  overridden: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.RemoveModelAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: SaveSubModelsAsync(MixModule, MixCmsContext, IDbContextTransaction)
  nameWithType: UpdateViewModel.SaveSubModelsAsync(MixModule, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SaveSubModelsAsync
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 379
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public override Task<RepositoryResponse<bool>> SaveSubModelsAsync(MixModule parent, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: parent
      type: Mix.Cms.Lib.Models.Cms.MixModule
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
    content.vb: Public Overrides Function SaveSubModelsAsync(parent As MixModule, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of Boolean))
  overridden: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveSubModelsAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveByModuleName(System.String,System.String,System.String,System.String,Newtonsoft.Json.Linq.JObject,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveByModuleName(System.String,System.String,System.String,System.String,Newtonsoft.Json.Linq.JObject,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: SaveByModuleName(System.String,System.String,System.String,System.String,Newtonsoft.Json.Linq.JObject,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: SaveByModuleName(String, String, String, String, JObject, MixCmsContext, IDbContextTransaction)
  nameWithType: UpdateViewModel.SaveByModuleName(String, String, String, String, JObject, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveByModuleName(System.String, System.String, System.String, System.String, Newtonsoft.Json.Linq.JObject, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SaveByModuleName
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 408
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public static Task<RepositoryResponse<JObject>> SaveByModuleName(string culture, string createdBy, string name, string formName, JObject obj, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: culture
      type: System.String
    - id: createdBy
      type: System.String
    - id: name
      type: System.String
    - id: formName
      type: System.String
    - id: obj
      type: Newtonsoft.Json.Linq.JObject
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    return:
      type: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Newtonsoft.Json.Linq.JObject}}
    content.vb: Public Shared Function SaveByModuleName(culture As String, createdBy As String, name As String, formName As String, obj As JObject, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing) As Task(Of RepositoryResponse(Of JObject))
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveByModuleName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  id: LoadData(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  langs:
  - csharp
  - vb
  name: LoadData(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, MixCmsContext, IDbContextTransaction)
  nameWithType: UpdateViewModel.LoadData(Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Nullable<System.Int32>, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  type: Method
  source:
    remote:
      path: src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: LoadData
    path: ../../mix.core/src/Mix.Cms.Lib/ViewModels/MixModules/UpdateViewModel.cs
    startLine: 489
  assemblies:
  - Mix.Cms.Lib
  namespace: Mix.Cms.Lib.ViewModels.MixModules
  syntax:
    content: public void LoadData(int? postId = default(int? ), int? productId = default(int? ), int? pageId = default(int? ), int? pageSize = default(int? ), int? pageIndex, MixCmsContext _context = null, IDbContextTransaction _transaction = null)
    parameters:
    - id: postId
      type: System.Nullable{System.Int32}
    - id: productId
      type: System.Nullable{System.Int32}
    - id: pageId
      type: System.Nullable{System.Int32}
    - id: pageSize
      type: System.Nullable{System.Int32}
    - id: pageIndex
      type: System.Nullable{System.Int32}
    - id: _context
      type: Mix.Cms.Lib.Models.Cms.MixCmsContext
    - id: _transaction
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    content.vb: Public Sub LoadData(postId As Integer? = Nothing, productId As Integer? = Nothing, pageId As Integer? = Nothing, pageSize As Integer? = Nothing, pageIndex As Integer?, _context As MixCmsContext = Nothing, _transaction As IDbContextTransaction = Nothing)
  overload: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData*
  nameWithType.vb: UpdateViewModel.LoadData(Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), MixCmsContext, IDbContextTransaction)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: LoadData(Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), MixCmsContext, IDbContextTransaction)
references:
- uid: Mix.Cms.Lib.ViewModels.MixModules
  commentId: N:Mix.Cms.Lib.ViewModels.MixModules
  name: Mix.Cms.Lib.ViewModels.MixModules
  nameWithType: Mix.Cms.Lib.ViewModels.MixModules
  fullName: Mix.Cms.Lib.ViewModels.MixModules
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  commentId: T:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  parent: Mix.Domain.Data.ViewModels
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3
  name: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel)
  name.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
    name: ViewModelBase
    nameWithType: ViewModelBase
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
    name: ViewModelBase
    nameWithType: ViewModelBase
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Repository
  commentId: F:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Repository
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  name: Repository
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.Repository
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.Repository
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).Repository
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).Repository
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ModelRepository
  commentId: F:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ModelRepository
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelRepository
  name: ModelRepository
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.ModelRepository
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.ModelRepository
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).ModelRepository
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).ModelRepository
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitModel
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitModel
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  name: InitModel()
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.InitModel()
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.InitModel()
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).InitModel()
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).InitModel()
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
    name: InitModel
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.InitModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.InitModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
    name: InitModel
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).InitModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).InitModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParseModel(MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.ParseModel(MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).ParseModel(MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).ParseModel(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseModel
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.ParseModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.ParseModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseModel
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).ParseModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).ParseModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: Validate(MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.Validate(MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).Validate(MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).Validate(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Validate
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.Validate
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Validate
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).Validate
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  name: UpdateFieldsAsync(JObject)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.UpdateFieldsAsync(JObject)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).UpdateFieldsAsync(JObject)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
    name: UpdateFieldsAsync
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.UpdateFieldsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.UpdateFieldsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
    name: UpdateFieldsAsync
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).UpdateFieldsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).UpdateFieldsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneAsync(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneAsync(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CloneAsync(MixModule, List<SupportedCulture>, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.CloneAsync(MixModule, List<SupportedCulture>, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.CloneAsync(Mix.Cms.Lib.Models.Cms.MixModule, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).CloneAsync(MixModule, List(Of SupportedCulture), MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).CloneAsync(Mix.Cms.Lib.Models.Cms.MixModule, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneAsync(MixModule, List(Of SupportedCulture), MixCmsContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneAsync
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.CloneAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.CloneAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneAsync
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).CloneAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).CloneAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CloneSubModelsAsync(MixModule, List<SupportedCulture>, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.CloneSubModelsAsync(MixModule, List<SupportedCulture>, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.CloneSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).CloneSubModelsAsync(MixModule, List(Of SupportedCulture), MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).CloneSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModelsAsync(MixModule, List(Of SupportedCulture), MixCmsContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModelsAsync
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.CloneSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.CloneSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModelsAsync
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).CloneSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).CloneSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModelAsync(Boolean, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveModelAsync(Boolean, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveModelAsync(Boolean, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveRelatedModelsAsync(UpdateViewModel, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveRelatedModelsAsync(UpdateViewModel, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveRelatedModelsAsync(UpdateViewModel, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveRelatedModelsAsync(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModelsAsync
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveRelatedModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveRelatedModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModelsAsync
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveRelatedModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveRelatedModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveModelAsync(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveModelAsync(Boolean, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.SaveModelAsync(Boolean, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.SaveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).SaveModelAsync(Boolean, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).SaveModelAsync(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.SaveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).SaveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveSubModelsAsync(MixModule, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.SaveSubModelsAsync(MixModule, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).SaveSubModelsAsync(MixModule, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).SaveSubModelsAsync(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelsAsync
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.SaveSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.SaveSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelsAsync
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).SaveSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).SaveSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitView(Mix.Cms.Lib.Models.Cms.MixModule,System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitView(Mix.Cms.Lib.Models.Cms.MixModule,System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: InitView(MixModule, Boolean, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.InitView(MixModule, Boolean, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.InitView(Mix.Cms.Lib.Models.Cms.MixModule, System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).InitView(MixModule, Boolean, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).InitView(Mix.Cms.Lib.Models.Cms.MixModule, System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitView
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.InitView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.InitView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitView
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).InitView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).InitView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ParseView(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ParseView(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ParseView(Boolean, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.ParseView(Boolean, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.ParseView(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).ParseView(Boolean, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).ParseView(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.ParseView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).ParseView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: ExpandView(MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.ExpandView(MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).ExpandView(MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).ExpandView(Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandView
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.ExpandView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.ExpandView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandView
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).ExpandView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).ExpandView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Clone(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Clone(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: Clone(MixModule, List<SupportedCulture>, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.Clone(MixModule, List<SupportedCulture>, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.Clone(Mix.Cms.Lib.Models.Cms.MixModule, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).Clone(MixModule, List(Of SupportedCulture), MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).Clone(Mix.Cms.Lib.Models.Cms.MixModule, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Clone(MixModule, List(Of SupportedCulture), MixCmsContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Clone
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.Clone
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Clone
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).Clone
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneSubModels(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.CloneSubModels(Mix.Cms.Lib.Models.Cms.MixModule,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: CloneSubModels(MixModule, List<SupportedCulture>, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.CloneSubModels(MixModule, List<SupportedCulture>, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.CloneSubModels(Mix.Cms.Lib.Models.Cms.MixModule, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).CloneSubModels(MixModule, List(Of SupportedCulture), MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).CloneSubModels(Mix.Cms.Lib.Models.Cms.MixModule, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModels(MixModule, List(Of SupportedCulture), MixCmsContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModels
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.CloneSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.CloneSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModels
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).CloneSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).CloneSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveModel(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveModel(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveModel(Boolean, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveModel(Boolean, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveModel(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveModel(Boolean, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveModel(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveRelatedModels(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveRelatedModels(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveRelatedModels(UpdateViewModel, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveRelatedModels(UpdateViewModel, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveRelatedModels(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveRelatedModels(UpdateViewModel, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveRelatedModels(Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModels
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveRelatedModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveRelatedModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModels
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveRelatedModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveRelatedModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveModel(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveModel(System.Boolean,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveModel(Boolean, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.SaveModel(Boolean, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.SaveModel(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).SaveModel(Boolean, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).SaveModel(System.Boolean, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.SaveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).SaveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveSubModels(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.SaveSubModels(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: SaveSubModels(MixModule, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.SaveSubModels(MixModule, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.SaveSubModels(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).SaveSubModels(MixModule, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).SaveSubModels(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModels
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.SaveSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.SaveSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModels
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).SaveSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).SaveSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).GetObjectData(SerializationInfo, StreamingContext)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.GetObjectData
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).GetObjectData
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitContext
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.InitContext
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitContext
  name: InitContext()
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.InitContext()
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.InitContext()
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).InitContext()
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).InitContext()
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitContext
    name: InitContext
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.InitContext
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitContext
    name: InitContext
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).InitContext
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetCachedKey(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetCachedKey(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetCachedKey(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GetCachedKey(MixModule, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.GetCachedKey(MixModule, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.GetCachedKey(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).GetCachedKey(MixModule, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).GetCachedKey(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetCachedKey(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetCachedKey
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.GetCachedKey
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.GetCachedKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetCachedKey(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetCachedKey
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).GetCachedKey
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).GetCachedKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetPropValue(System.Object,System.String)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GetPropValue(System.Object,System.String)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetPropValue(System.Object,System.String)
  name: GetPropValue(Object, String)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.GetPropValue(Object, String)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.GetPropValue(System.Object, System.String)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).GetPropValue(Object, String)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).GetPropValue(System.Object, System.String)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetPropValue(System.Object,System.String)
    name: GetPropValue
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.GetPropValue
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.GetPropValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetPropValue(System.Object,System.String)
    name: GetPropValue
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).GetPropValue
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).GetPropValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GenerateCache(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.GenerateCache(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.GenerateCache(`1,`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: GenerateCache(MixModule, UpdateViewModel, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.GenerateCache(MixModule, UpdateViewModel, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.GenerateCache(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).GenerateCache(MixModule, UpdateViewModel, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).GenerateCache(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GenerateCache(`1,`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GenerateCache
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.GenerateCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.GenerateCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GenerateCache(`1,`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GenerateCache
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).GenerateCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).GenerateCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.AddToCache(Mix.Cms.Lib.Models.Cms.MixModule,System.Object,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.AddToCache(Mix.Cms.Lib.Models.Cms.MixModule,System.Object,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.AddToCache(`1,System.Object,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: AddToCache(MixModule, Object, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.AddToCache(MixModule, Object, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.AddToCache(Mix.Cms.Lib.Models.Cms.MixModule, System.Object, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).AddToCache(MixModule, Object, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).AddToCache(Mix.Cms.Lib.Models.Cms.MixModule, System.Object, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.AddToCache(`1,System.Object,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: AddToCache
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.AddToCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.AddToCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.AddToCache(`1,System.Object,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: AddToCache
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).AddToCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).AddToCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveCache(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.RemoveCache(Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.Models.Cms.MixCmsContext,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveCache(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name: RemoveCache(MixModule, MixCmsContext, IDbContextTransaction)
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveCache(MixModule, MixCmsContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveCache(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveCache(MixModule, MixCmsContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveCache(Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.Models.Cms.MixCmsContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveCache(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveCache
    nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.RemoveCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.RemoveCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveCache(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveCache
    nameWithType: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).RemoveCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).RemoveCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
    name: MixCmsContext
    nameWithType: MixCmsContext
    fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.IsCache
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.IsCache
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsCache
  name: IsCache
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.IsCache
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.IsCache
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).IsCache
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).IsCache
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Model
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Model
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  name: Model
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.Model
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.Model
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).Model
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).Model
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Errors
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.Errors
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  name: Errors
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.Errors
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.Errors
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).Errors
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).Errors
- uid: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.IsValid
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}.IsValid
  parent: Mix.Domain.Data.ViewModels.ViewModelBase{Mix.Cms.Lib.Models.Cms.MixCmsContext,Mix.Cms.Lib.Models.Cms.MixModule,Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel}
  definition: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  name: IsValid
  nameWithType: ViewModelBase<MixCmsContext, MixModule, UpdateViewModel>.IsValid
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel>.IsValid
  nameWithType.vb: ViewModelBase(Of MixCmsContext, MixModule, UpdateViewModel).IsValid
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of Mix.Cms.Lib.Models.Cms.MixCmsContext, Mix.Cms.Lib.Models.Cms.MixModule, Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel).IsValid
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
  commentId: T:Mix.Domain.Data.ViewModels.ViewModelBase`3
  isExternal: true
  name: ViewModelBase<TDbContext, TModel, TView>
  nameWithType: ViewModelBase<TDbContext, TModel, TView>
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView)
  name.vb: ViewModelBase(Of TDbContext, TModel, TView)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
    name: ViewModelBase
    nameWithType: ViewModelBase
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3
    name: ViewModelBase
    nameWithType: ViewModelBase
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels
  commentId: N:Mix.Domain.Data.ViewModels
  isExternal: true
  name: Mix.Domain.Data.ViewModels
  nameWithType: Mix.Domain.Data.ViewModels
  fullName: Mix.Domain.Data.ViewModels
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: true
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  commentId: F:Mix.Domain.Data.ViewModels.ViewModelBase`3.Repository
  isExternal: true
  name: Repository
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Repository
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Repository
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Repository
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Repository
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelRepository
  commentId: F:Mix.Domain.Data.ViewModels.ViewModelBase`3.ModelRepository
  isExternal: true
  name: ModelRepository
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ModelRepository
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ModelRepository
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ModelRepository
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ModelRepository
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
  isExternal: true
  name: InitModel()
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitModel()
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitModel()
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitModel()
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitModel()
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
    name: InitModel
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitModel
    name: InitModel
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).InitModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParseModel(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseModel(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseModel(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseModel(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseModel(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseModel
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseModel(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseModel
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).ParseModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: Validate(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Validate(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Validate(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Validate(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Validate(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Validate
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.Validate
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Validate(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Validate
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).Validate
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  isExternal: true
  name: UpdateFieldsAsync(JObject)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.UpdateFieldsAsync(JObject)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).UpdateFieldsAsync(JObject)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
    name: UpdateFieldsAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.UpdateFieldsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.UpdateFieldsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.UpdateFieldsAsync(Newtonsoft.Json.Linq.JObject)
    name: UpdateFieldsAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).UpdateFieldsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).UpdateFieldsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CloneAsync(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneAsync(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneAsync(TModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneAsync(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneAsync(TModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneAsync(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).CloneAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CloneSubModelsAsync(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync(TModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync(TModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModelsAsync(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModelsAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModelsAsync(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModelsAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModelAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModelsAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModelsAsync(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModelsAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModelAsync(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModelAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelsAsync
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModelsAsync(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModelsAsync
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModelsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitView(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitView(TModel, Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitView(TModel, System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitView
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitView(`1,System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: InitView
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).InitView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ParseView(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseView(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseView(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ParseView(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseView(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.ParseView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ParseView(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ParseView
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).ParseView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ParseView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: ExpandView(TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandView(TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandView(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).ExpandView(TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandView(TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandView
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.ExpandView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.ExpandView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.ExpandView(`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: ExpandView
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).ExpandView
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).ExpandView
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: Clone(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Clone(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Clone(TModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Clone(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Clone(TModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Clone(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Clone
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.Clone
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Clone(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: Clone
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).Clone
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: CloneSubModels(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModels(TModel, List<SupportedCulture>, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModels(TModel, System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels(TModel, System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture), TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: CloneSubModels(TModel, List(Of SupportedCulture), TDbContext, IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModels
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.CloneSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.CloneSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.CloneSubModels(`1,System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture},`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: CloneSubModels
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).CloneSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveModel
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels(TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels(TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModels
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveRelatedModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveRelatedModels(`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveRelatedModels
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveRelatedModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveModel(Boolean, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveModel(Boolean, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModel(System.Boolean, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveModel(System.Boolean,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveModel
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).SaveModel
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveModel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModels(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModels
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.SaveSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.SaveSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.SaveSubModels(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: SaveSubModels
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).SaveSubModels
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.GetObjectData(SerializationInfo, StreamingContext)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).GetObjectData(SerializationInfo, StreamingContext)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.GetObjectData
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).GetObjectData
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitContext
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.InitContext
  isExternal: true
  name: InitContext()
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitContext()
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitContext()
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).InitContext()
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitContext()
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitContext
    name: InitContext
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.InitContext
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.InitContext
    name: InitContext
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).InitContext
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).InitContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetCachedKey(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.GetCachedKey(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GetCachedKey(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.GetCachedKey(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.GetCachedKey(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).GetCachedKey(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).GetCachedKey(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetCachedKey(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetCachedKey
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.GetCachedKey
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.GetCachedKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetCachedKey(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GetCachedKey
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).GetCachedKey
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).GetCachedKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetPropValue(System.Object,System.String)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.GetPropValue(System.Object,System.String)
  isExternal: true
  name: GetPropValue(Object, String)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.GetPropValue(Object, String)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.GetPropValue(System.Object, System.String)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).GetPropValue(Object, String)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).GetPropValue(System.Object, System.String)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetPropValue(System.Object,System.String)
    name: GetPropValue
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.GetPropValue
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.GetPropValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GetPropValue(System.Object,System.String)
    name: GetPropValue
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).GetPropValue
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).GetPropValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GenerateCache(`1,`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.GenerateCache(`1,`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: GenerateCache(TModel, TView, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.GenerateCache(TModel, TView, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.GenerateCache(TModel, TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).GenerateCache(TModel, TView, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).GenerateCache(TModel, TView, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GenerateCache(`1,`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GenerateCache
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.GenerateCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.GenerateCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.GenerateCache(`1,`2,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: GenerateCache
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).GenerateCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).GenerateCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TView
    nameWithType: TView
    fullName: TView
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.AddToCache(`1,System.Object,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.AddToCache(`1,System.Object,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: AddToCache(TModel, Object, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.AddToCache(TModel, Object, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.AddToCache(TModel, System.Object, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).AddToCache(TModel, Object, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).AddToCache(TModel, System.Object, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.AddToCache(`1,System.Object,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: AddToCache
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.AddToCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.AddToCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.AddToCache(`1,System.Object,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: AddToCache
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).AddToCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).AddToCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveCache(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  commentId: M:Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveCache(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  isExternal: true
  name: RemoveCache(TModel, TDbContext, IDbContextTransaction)
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveCache(TModel, TDbContext, IDbContextTransaction)
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveCache(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).RemoveCache(TModel, TDbContext, IDbContextTransaction)
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveCache(TModel, TDbContext, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  spec.csharp:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveCache(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveCache
    nameWithType: ViewModelBase<TDbContext, TModel, TView>.RemoveCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.RemoveCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.RemoveCache(`1,`0,Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
    name: RemoveCache
    nameWithType: ViewModelBase(Of TDbContext, TModel, TView).RemoveCache
    fullName: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).RemoveCache
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDbContext
    nameWithType: TDbContext
    fullName: TDbContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsCache
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsCache
  isExternal: true
  name: IsCache
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsCache
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsCache
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsCache
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsCache
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Model
  isExternal: true
  name: Model
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Model
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Model
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Model
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Model
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.Errors
  isExternal: true
  name: Errors
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.Errors
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.Errors
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).Errors
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).Errors
- uid: Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  commentId: P:Mix.Domain.Data.ViewModels.ViewModelBase`3.IsValid
  isExternal: true
  name: IsValid
  nameWithType: ViewModelBase<TDbContext, TModel, TView>.IsValid
  fullName: Mix.Domain.Data.ViewModels.ViewModelBase<TDbContext, TModel, TView>.IsValid
  nameWithType.vb: ViewModelBase(Of TDbContext, TModel, TView).IsValid
  fullName.vb: Mix.Domain.Data.ViewModels.ViewModelBase(Of TDbContext, TModel, TView).IsValid
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Id*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Id
  name: Id
  nameWithType: UpdateViewModel.Id
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Id
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Specificulture*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Specificulture
  name: Specificulture
  nameWithType: UpdateViewModel.Specificulture
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Specificulture
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Cultures*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Cultures
  name: Cultures
  nameWithType: UpdateViewModel.Cultures
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Cultures
- uid: System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
  commentId: T:System.Collections.Generic.List{Mix.Domain.Core.Models.SupportedCulture}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SupportedCulture>
  nameWithType: List<SupportedCulture>
  fullName: System.Collections.Generic.List<Mix.Domain.Core.Models.SupportedCulture>
  nameWithType.vb: List(Of SupportedCulture)
  fullName.vb: System.Collections.Generic.List(Of Mix.Domain.Core.Models.SupportedCulture)
  name.vb: List(Of SupportedCulture)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.Models.SupportedCulture
    name: SupportedCulture
    nameWithType: SupportedCulture
    fullName: Mix.Domain.Core.Models.SupportedCulture
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Name*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Name
  name: Name
  nameWithType: UpdateViewModel.Name
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Name
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Image*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Image
  name: Image
  nameWithType: UpdateViewModel.Image
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Image
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Thumbnail*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Thumbnail
  name: Thumbnail
  nameWithType: UpdateViewModel.Thumbnail
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Thumbnail
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Template*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Template
  name: Template
  nameWithType: UpdateViewModel.Template
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Template
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormTemplate*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormTemplate
  name: FormTemplate
  nameWithType: UpdateViewModel.FormTemplate
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormTemplate
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmTemplate*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmTemplate
  name: EdmTemplate
  nameWithType: UpdateViewModel.EdmTemplate
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmTemplate
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Title*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Title
  name: Title
  nameWithType: UpdateViewModel.Title
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Title
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Description*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Description
  name: Description
  nameWithType: UpdateViewModel.Description
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Description
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Fields*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Fields
  name: Fields
  nameWithType: UpdateViewModel.Fields
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Fields
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Type*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Type
  name: Type
  nameWithType: UpdateViewModel.Type
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Type
- uid: Mix.Cms.Lib.Enums.MixModuleType
  commentId: T:Mix.Cms.Lib.Enums.MixModuleType
  parent: Mix.Cms.Lib.Enums
  name: MixModuleType
  nameWithType: MixModuleType
  fullName: Mix.Cms.Lib.Enums.MixModuleType
- uid: Mix.Cms.Lib.Enums
  commentId: N:Mix.Cms.Lib.Enums
  name: Mix.Cms.Lib.Enums
  nameWithType: Mix.Cms.Lib.Enums
  fullName: Mix.Cms.Lib.Enums
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageSize*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageSize
  name: PageSize
  nameWithType: UpdateViewModel.PageSize
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageSize
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedBy*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedBy
  name: CreatedBy
  nameWithType: UpdateViewModel.CreatedBy
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedBy
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedDateTime*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedDateTime
  name: CreatedDateTime
  nameWithType: UpdateViewModel.CreatedDateTime
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.CreatedDateTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ModifiedBy*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ModifiedBy
  name: ModifiedBy
  nameWithType: UpdateViewModel.ModifiedBy
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ModifiedBy
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LastModified*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LastModified
  name: LastModified
  nameWithType: UpdateViewModel.LastModified
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LastModified
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Priority*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Priority
  name: Priority
  nameWithType: UpdateViewModel.Priority
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Priority
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Status*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Status
  name: Status
  nameWithType: UpdateViewModel.Status
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Status
- uid: Mix.Cms.Lib.Enums.MixContentStatus
  commentId: T:Mix.Cms.Lib.Enums.MixContentStatus
  parent: Mix.Cms.Lib.Enums
  name: MixContentStatus
  nameWithType: MixContentStatus
  fullName: Mix.Cms.Lib.Enums.MixContentStatus
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.AttributeSet*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.AttributeSet
  name: AttributeSet
  nameWithType: UpdateViewModel.AttributeSet
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.AttributeSet
- uid: Mix.Cms.Lib.ViewModels.MixAttributeSets.UpdateViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.MixAttributeSets.UpdateViewModel
  parent: Mix.Cms.Lib.ViewModels.MixAttributeSets
  name: UpdateViewModel
  nameWithType: UpdateViewModel
  fullName: Mix.Cms.Lib.ViewModels.MixAttributeSets.UpdateViewModel
- uid: Mix.Cms.Lib.ViewModels.MixAttributeSets
  commentId: N:Mix.Cms.Lib.ViewModels.MixAttributeSets
  name: Mix.Cms.Lib.ViewModels.MixAttributeSets
  nameWithType: Mix.Cms.Lib.ViewModels.MixAttributeSets
  fullName: Mix.Cms.Lib.ViewModels.MixAttributeSets
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Domain*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Domain
  name: Domain
  nameWithType: UpdateViewModel.Domain
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Domain
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ImageUrl*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ImageUrl
  name: ImageUrl
  nameWithType: UpdateViewModel.ImageUrl
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ImageUrl
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThumbnailUrl*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThumbnailUrl
  name: ThumbnailUrl
  nameWithType: UpdateViewModel.ThumbnailUrl
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThumbnailUrl
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Data*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Data
  name: Data
  nameWithType: UpdateViewModel.Data
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Data
- uid: Mix.Domain.Core.ViewModels.PaginationModel{Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel}
  commentId: T:Mix.Domain.Core.ViewModels.PaginationModel{Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel}
  parent: Mix.Domain.Core.ViewModels
  definition: Mix.Domain.Core.ViewModels.PaginationModel`1
  name: PaginationModel<ReadViewModel>
  nameWithType: PaginationModel<ReadViewModel>
  fullName: Mix.Domain.Core.ViewModels.PaginationModel<Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel>
  nameWithType.vb: PaginationModel(Of ReadViewModel)
  fullName.vb: Mix.Domain.Core.ViewModels.PaginationModel(Of Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel)
  name.vb: PaginationModel(Of ReadViewModel)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Mix.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel
    name: ReadViewModel
    nameWithType: ReadViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Mix.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel
    name: ReadViewModel
    nameWithType: ReadViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixModuleDatas.ReadViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Core.ViewModels.PaginationModel`1
  commentId: T:Mix.Domain.Core.ViewModels.PaginationModel`1
  isExternal: true
  name: PaginationModel<T>
  nameWithType: PaginationModel<T>
  fullName: Mix.Domain.Core.ViewModels.PaginationModel<T>
  nameWithType.vb: PaginationModel(Of T)
  fullName.vb: Mix.Domain.Core.ViewModels.PaginationModel(Of T)
  name.vb: PaginationModel(Of T)
  spec.csharp:
  - uid: Mix.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Mix.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Mix.Domain.Core.ViewModels.PaginationModel`1
    name: PaginationModel
    nameWithType: PaginationModel
    fullName: Mix.Domain.Core.ViewModels.PaginationModel
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Domain.Core.ViewModels
  commentId: N:Mix.Domain.Core.ViewModels
  isExternal: true
  name: Mix.Domain.Core.ViewModels
  nameWithType: Mix.Domain.Core.ViewModels
  fullName: Mix.Domain.Core.ViewModels
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Columns*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Columns
  name: Columns
  nameWithType: UpdateViewModel.Columns
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Columns
- uid: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.ModuleFieldViewModel}
  commentId: T:System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.ModuleFieldViewModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ModuleFieldViewModel>
  nameWithType: List<ModuleFieldViewModel>
  fullName: System.Collections.Generic.List<Mix.Cms.Lib.ViewModels.ModuleFieldViewModel>
  nameWithType.vb: List(Of ModuleFieldViewModel)
  fullName.vb: System.Collections.Generic.List(Of Mix.Cms.Lib.ViewModels.ModuleFieldViewModel)
  name.vb: List(Of ModuleFieldViewModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.ModuleFieldViewModel
    name: ModuleFieldViewModel
    nameWithType: ModuleFieldViewModel
    fullName: Mix.Cms.Lib.ViewModels.ModuleFieldViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.ModuleFieldViewModel
    name: ModuleFieldViewModel
    nameWithType: ModuleFieldViewModel
    fullName: Mix.Cms.Lib.ViewModels.ModuleFieldViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Templates*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Templates
  name: Templates
  nameWithType: UpdateViewModel.Templates
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Templates
- uid: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel}
  commentId: T:System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<UpdateViewModel>
  nameWithType: List<UpdateViewModel>
  fullName: System.Collections.Generic.List<Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel>
  nameWithType.vb: List(Of UpdateViewModel)
  fullName.vb: System.Collections.Generic.List(Of Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel)
  name.vb: List(Of UpdateViewModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolderType*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolderType
  name: TemplateFolderType
  nameWithType: UpdateViewModel.TemplateFolderType
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolderType
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.View*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.View
  name: View
  nameWithType: UpdateViewModel.View
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.View
- uid: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
  commentId: T:Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
  parent: Mix.Cms.Lib.ViewModels.MixTemplates
  name: UpdateViewModel
  nameWithType: UpdateViewModel
  fullName: Mix.Cms.Lib.ViewModels.MixTemplates.UpdateViewModel
- uid: Mix.Cms.Lib.ViewModels.MixTemplates
  commentId: N:Mix.Cms.Lib.ViewModels.MixTemplates
  name: Mix.Cms.Lib.ViewModels.MixTemplates
  nameWithType: Mix.Cms.Lib.ViewModels.MixTemplates
  fullName: Mix.Cms.Lib.ViewModels.MixTemplates
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ActivedTheme*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ActivedTheme
  name: ActivedTheme
  nameWithType: UpdateViewModel.ActivedTheme
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ActivedTheme
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThemeFolderType*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThemeFolderType
  name: ThemeFolderType
  nameWithType: UpdateViewModel.ThemeFolderType
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ThemeFolderType
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolder*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolder
  name: TemplateFolder
  nameWithType: UpdateViewModel.TemplateFolder
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.TemplateFolder
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Forms*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Forms
  name: Forms
  nameWithType: UpdateViewModel.Forms
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Forms
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolderType*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolderType
  name: FormFolderType
  nameWithType: UpdateViewModel.FormFolderType
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolderType
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormView*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormView
  name: FormView
  nameWithType: UpdateViewModel.FormView
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormView
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolder*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolder
  name: FormFolder
  nameWithType: UpdateViewModel.FormFolder
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.FormFolder
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Edms*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Edms
  name: Edms
  nameWithType: UpdateViewModel.Edms
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Edms
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolderType*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolderType
  name: EdmFolderType
  nameWithType: UpdateViewModel.EdmFolderType
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolderType
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmView*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmView
  name: EdmView
  nameWithType: UpdateViewModel.EdmView
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmView
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolder*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolder
  name: EdmFolder
  nameWithType: UpdateViewModel.EdmFolder
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.EdmFolder
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PostId*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PostId
  name: PostId
  nameWithType: UpdateViewModel.PostId
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PostId
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageId*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageId
  name: PageId
  nameWithType: UpdateViewModel.PageId
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.PageId
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UrlAliases*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UrlAliases
  name: UrlAliases
  nameWithType: UpdateViewModel.UrlAliases
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UrlAliases
- uid: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel}
  commentId: T:System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<UpdateViewModel>
  nameWithType: List<UpdateViewModel>
  fullName: System.Collections.Generic.List<Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel>
  nameWithType.vb: List(Of UpdateViewModel)
  fullName.vb: System.Collections.Generic.List(Of Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel)
  name.vb: List(Of UpdateViewModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixUrlAliases.UpdateViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysCategories*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysCategories
  name: SysCategories
  nameWithType: UpdateViewModel.SysCategories
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysCategories
- uid: System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel}
  commentId: T:System.Collections.Generic.List{Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<UpdateViewModel>
  nameWithType: List<UpdateViewModel>
  fullName: System.Collections.Generic.List<Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel>
  nameWithType.vb: List(Of UpdateViewModel)
  fullName.vb: System.Collections.Generic.List(Of Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel)
  name.vb: List(Of UpdateViewModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel
    name: UpdateViewModel
    nameWithType: UpdateViewModel
    fullName: Mix.Cms.Lib.ViewModels.MixRelatedAttributeDatas.UpdateViewModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysTags*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysTags
  name: SysTags
  nameWithType: UpdateViewModel.SysTags
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SysTags
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.#ctor
  name: UpdateViewModel
  nameWithType: UpdateViewModel.UpdateViewModel
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.UpdateViewModel
- uid: Mix.Cms.Lib.Models.Cms.MixModule
  commentId: T:Mix.Cms.Lib.Models.Cms.MixModule
  parent: Mix.Cms.Lib.Models.Cms
  name: MixModule
  nameWithType: MixModule
  fullName: Mix.Cms.Lib.Models.Cms.MixModule
- uid: Mix.Cms.Lib.Models.Cms.MixCmsContext
  commentId: T:Mix.Cms.Lib.Models.Cms.MixCmsContext
  parent: Mix.Cms.Lib.Models.Cms
  name: MixCmsContext
  nameWithType: MixCmsContext
  fullName: Mix.Cms.Lib.Models.Cms.MixCmsContext
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: true
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: Mix.Cms.Lib.Models.Cms
  commentId: N:Mix.Cms.Lib.Models.Cms
  name: Mix.Cms.Lib.Models.Cms
  nameWithType: Mix.Cms.Lib.Models.Cms
  fullName: Mix.Cms.Lib.Models.Cms
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: true
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Validate*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Validate
  name: Validate
  nameWithType: UpdateViewModel.Validate
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.Validate
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ParseModel*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ParseModel
  name: ParseModel
  nameWithType: UpdateViewModel.ParseModel
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ParseModel
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ExpandView*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ExpandView
  name: ExpandView
  nameWithType: UpdateViewModel.ExpandView
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.ExpandView
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.RemoveModelAsync*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.RemoveModelAsync
  name: RemoveModelAsync
  nameWithType: UpdateViewModel.RemoveModelAsync
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.RemoveModelAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.Models.Cms.MixModule}}
  commentId: T:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Mix.Cms.Lib.Models.Cms.MixModule}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<MixModule>>
  nameWithType: Task<RepositoryResponse<MixModule>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<Mix.Cms.Lib.Models.Cms.MixModule>>
  nameWithType.vb: Task(Of RepositoryResponse(Of MixModule))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of Mix.Cms.Lib.Models.Cms.MixModule))
  name.vb: Task(Of RepositoryResponse(Of MixModule))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Cms.Lib.Models.Cms.MixModule
    name: MixModule
    nameWithType: MixModule
    fullName: Mix.Cms.Lib.Models.Cms.MixModule
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveSubModelsAsync*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveSubModelsAsync
  name: SaveSubModelsAsync
  nameWithType: UpdateViewModel.SaveSubModelsAsync
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveSubModelsAsync
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
  commentId: T:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{System.Boolean}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<Boolean>>
  nameWithType: Task<RepositoryResponse<Boolean>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<System.Boolean>>
  nameWithType.vb: Task(Of RepositoryResponse(Of Boolean))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of System.Boolean))
  name.vb: Task(Of RepositoryResponse(Of Boolean))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveByModuleName*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveByModuleName
  name: SaveByModuleName
  nameWithType: UpdateViewModel.SaveByModuleName
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.SaveByModuleName
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Newtonsoft.Json.Linq.JObject}}
  commentId: T:System.Threading.Tasks.Task{Mix.Domain.Core.ViewModels.RepositoryResponse{Newtonsoft.Json.Linq.JObject}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RepositoryResponse<JObject>>
  nameWithType: Task<RepositoryResponse<JObject>>
  fullName: System.Threading.Tasks.Task<Mix.Domain.Core.ViewModels.RepositoryResponse<Newtonsoft.Json.Linq.JObject>>
  nameWithType.vb: Task(Of RepositoryResponse(Of JObject))
  fullName.vb: System.Threading.Tasks.Task(Of Mix.Domain.Core.ViewModels.RepositoryResponse(Of Newtonsoft.Json.Linq.JObject))
  name.vb: Task(Of RepositoryResponse(Of JObject))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Mix.Domain.Core.ViewModels.RepositoryResponse`1
    name: RepositoryResponse
    nameWithType: RepositoryResponse
    fullName: Mix.Domain.Core.ViewModels.RepositoryResponse
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData*
  commentId: Overload:Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData
  name: LoadData
  nameWithType: UpdateViewModel.LoadData
  fullName: Mix.Cms.Lib.ViewModels.MixModules.UpdateViewModel.LoadData
