### YamlMime:ManagedReference
items:
- uid: Mix.Lib.Models.Common.SearchQueryModel`2
  commentId: T:Mix.Lib.Models.Common.SearchQueryModel`2
  id: SearchQueryModel`2
  parent: Mix.Lib.Models.Common
  children:
  - Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32)
  - Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32,Microsoft.AspNetCore.Http.HttpRequest,System.Linq.Expressions.Expression{Func{`0,System.Boolean}},System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  - Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32,SearchRequestDto,Microsoft.AspNetCore.Http.HttpRequest,System.Linq.Expressions.Expression{Func{`0,System.Boolean}},System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  - Mix.Lib.Models.Common.SearchQueryModel`2.AndPredicate
  - Mix.Lib.Models.Common.SearchQueryModel`2.BuildAndPredicate(SearchRequestDto,Microsoft.AspNetCore.Http.HttpRequest)
  - Mix.Lib.Models.Common.SearchQueryModel`2.Columns
  - Mix.Lib.Models.Common.SearchQueryModel`2.Culture
  - Mix.Lib.Models.Common.SearchQueryModel`2.FromDate
  - Mix.Lib.Models.Common.SearchQueryModel`2.Keyword
  - Mix.Lib.Models.Common.SearchQueryModel`2.MixTenantId
  - Mix.Lib.Models.Common.SearchQueryModel`2.OrPredicate
  - Mix.Lib.Models.Common.SearchQueryModel`2.PagingData
  - Mix.Lib.Models.Common.SearchQueryModel`2.Predicate
  - Mix.Lib.Models.Common.SearchQueryModel`2.SearchColumns
  - Mix.Lib.Models.Common.SearchQueryModel`2.SearchMethod
  - Mix.Lib.Models.Common.SearchQueryModel`2.Status
  - Mix.Lib.Models.Common.SearchQueryModel`2.ToDate
  langs:
  - csharp
  - vb
  name: SearchQueryModel<TEntity, TPrimaryKey>
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>
  type: Class
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SearchQueryModel
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 6
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: >-
      public class SearchQueryModel<TEntity, TPrimaryKey>
          where TEntity : EntityBase<TPrimaryKey> where TPrimaryKey : IComparable
    typeParameters:
    - id: TEntity
    - id: TPrimaryKey
    content.vb: Public Class SearchQueryModel(Of TEntity As EntityBase(Of TPrimaryKey), TPrimaryKey As IComparable)
  inheritance:
  - System.Object
  derivedClasses:
  - Mix.Lib.Models.Common.SearchDataContentAssociationModel
  - Mix.Lib.Models.Common.SearchDataContentModel
  - Mix.Lib.Models.Common.SearchPostQueryModel
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey)
  name.vb: SearchQueryModel(Of TEntity, TPrimaryKey)
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Keyword
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.Keyword
  id: Keyword
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: Keyword
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Keyword
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Keyword
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Keyword
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 12
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public string Keyword { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Keyword As String
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.Keyword*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Keyword
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Keyword
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Culture
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.Culture
  id: Culture
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: Culture
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Culture
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Culture
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Culture
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 13
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public string Culture { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Culture As String
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.Culture*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Culture
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Culture
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.FromDate
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.FromDate
  id: FromDate
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: FromDate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.FromDate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.FromDate
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: FromDate
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 14
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public DateTime? FromDate { get; set; }
    parameters: []
    return:
      type: System.Nullable{DateTime}
    content.vb: Public Property FromDate As DateTime?
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.FromDate*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).FromDate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).FromDate
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.ToDate
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.ToDate
  id: ToDate
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: ToDate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.ToDate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.ToDate
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: ToDate
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 15
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public DateTime? ToDate { get; set; }
    parameters: []
    return:
      type: System.Nullable{DateTime}
    content.vb: Public Property ToDate As DateTime?
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.ToDate*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).ToDate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).ToDate
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Status
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.Status
  id: Status
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Status
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Status
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Status
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 16
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public MixContentStatus? Status { get; set; }
    parameters: []
    return:
      type: System.Nullable{MixContentStatus}
    content.vb: Public Property Status As MixContentStatus?
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.Status*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Status
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Status
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.SearchMethod
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.SearchMethod
  id: SearchMethod
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: SearchMethod
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.SearchMethod
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.SearchMethod
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SearchMethod
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 17
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public ExpressionMethod? SearchMethod { get; set; }
    parameters: []
    return:
      type: System.Nullable{ExpressionMethod}
    content.vb: Public Property SearchMethod As ExpressionMethod?
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.SearchMethod*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).SearchMethod
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).SearchMethod
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Columns
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.Columns
  id: Columns
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: Columns
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Columns
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Columns
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Columns
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 18
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public string Columns { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Columns As String
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.Columns*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Columns
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Columns
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.SearchColumns
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.SearchColumns
  id: SearchColumns
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: SearchColumns
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.SearchColumns
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.SearchColumns
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: SearchColumns
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 19
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public string SearchColumns { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property SearchColumns As String
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.SearchColumns*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).SearchColumns
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).SearchColumns
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.MixTenantId
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.MixTenantId
  id: MixTenantId
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: MixTenantId
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.MixTenantId
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.MixTenantId
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: MixTenantId
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 21
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public int MixTenantId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MixTenantId As Integer
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.MixTenantId*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).MixTenantId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).MixTenantId
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.PagingData
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.PagingData
  id: PagingData
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: PagingData
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.PagingData
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.PagingData
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: PagingData
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 22
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public PagingRequestModel PagingData { get; set; }
    parameters: []
    return:
      type: Mix.Shared.Models.PagingRequestModel
    content.vb: Public Property PagingData As PagingRequestModel
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.PagingData*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).PagingData
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).PagingData
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Predicate
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.Predicate
  id: Predicate
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: Predicate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Predicate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Predicate
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: Predicate
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 23
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public Expression<Func<TEntity, bool>> Predicate { get; set; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression{Func{{TEntity},System.Boolean}}
    content.vb: Public Property Predicate As Expression(Of Func(Of TEntity, Boolean))
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.Predicate*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Predicate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Predicate
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.AndPredicate
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.AndPredicate
  id: AndPredicate
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: AndPredicate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.AndPredicate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.AndPredicate
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: AndPredicate
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 25
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: protected Expression<Func<TEntity, bool>> AndPredicate { get; set; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression{Func{{TEntity},System.Boolean}}
    content.vb: Protected Property AndPredicate As Expression(Of Func(Of TEntity, Boolean))
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.AndPredicate*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).AndPredicate
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).AndPredicate
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.OrPredicate
  commentId: P:Mix.Lib.Models.Common.SearchQueryModel`2.OrPredicate
  id: OrPredicate
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: OrPredicate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.OrPredicate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.OrPredicate
  type: Property
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: OrPredicate
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 26
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: protected Expression<Func<TEntity, bool>> OrPredicate { get; set; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression{Func{{TEntity},System.Boolean}}
    content.vb: Protected Property OrPredicate As Expression(Of Func(Of TEntity, Boolean))
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.OrPredicate*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).OrPredicate
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).OrPredicate
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32)
  commentId: M:Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: SearchQueryModel(Int32)
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.SearchQueryModel(Int32)
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.SearchQueryModel(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 30
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public SearchQueryModel(int tenantId)
    parameters:
    - id: tenantId
      type: System.Int32
    content.vb: Public Sub New(tenantId As Integer)
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.#ctor*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).SearchQueryModel(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).SearchQueryModel(System.Int32)
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32,Microsoft.AspNetCore.Http.HttpRequest,System.Linq.Expressions.Expression{Func{`0,System.Boolean}},System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  commentId: M:Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32,Microsoft.AspNetCore.Http.HttpRequest,System.Linq.Expressions.Expression{Func{`0,System.Boolean}},System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  id: '#ctor(System.Int32,Microsoft.AspNetCore.Http.HttpRequest,System.Linq.Expressions.Expression{Func{`0,System.Boolean}},System.Linq.Expressions.Expression{Func{`0,System.Boolean}})'
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: SearchQueryModel(Int32, HttpRequest, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, Boolean>>)
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.SearchQueryModel(Int32, HttpRequest, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.SearchQueryModel(System.Int32, Microsoft.AspNetCore.Http.HttpRequest, System.Linq.Expressions.Expression<Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<Func<TEntity, System.Boolean>>)
  type: Constructor
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 35
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public SearchQueryModel(int tenantId, HttpRequest request, Expression<Func<TEntity, bool>> andPredicate = null, Expression<Func<TEntity, bool>> orPredicate = null)
    parameters:
    - id: tenantId
      type: System.Int32
    - id: request
      type: Microsoft.AspNetCore.Http.HttpRequest
    - id: andPredicate
      type: System.Linq.Expressions.Expression{Func{{TEntity},System.Boolean}}
    - id: orPredicate
      type: System.Linq.Expressions.Expression{Func{{TEntity},System.Boolean}}
    content.vb: Public Sub New(tenantId As Integer, request As HttpRequest, andPredicate As Expression(Of Func(Of TEntity, Boolean)) = Nothing, orPredicate As Expression(Of Func(Of TEntity, Boolean)) = Nothing)
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.#ctor*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).SearchQueryModel(Int32, HttpRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).SearchQueryModel(System.Int32, Microsoft.AspNetCore.Http.HttpRequest, System.Linq.Expressions.Expression(Of Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of Func(Of TEntity, System.Boolean)))
  name.vb: SearchQueryModel(Int32, HttpRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32,SearchRequestDto,Microsoft.AspNetCore.Http.HttpRequest,System.Linq.Expressions.Expression{Func{`0,System.Boolean}},System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  commentId: M:Mix.Lib.Models.Common.SearchQueryModel`2.#ctor(System.Int32,SearchRequestDto,Microsoft.AspNetCore.Http.HttpRequest,System.Linq.Expressions.Expression{Func{`0,System.Boolean}},System.Linq.Expressions.Expression{Func{`0,System.Boolean}})
  id: '#ctor(System.Int32,SearchRequestDto,Microsoft.AspNetCore.Http.HttpRequest,System.Linq.Expressions.Expression{Func{`0,System.Boolean}},System.Linq.Expressions.Expression{Func{`0,System.Boolean}})'
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: SearchQueryModel(Int32, SearchRequestDto, HttpRequest, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, Boolean>>)
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.SearchQueryModel(Int32, SearchRequestDto, HttpRequest, Expression<Func<TEntity, Boolean>>, Expression<Func<TEntity, Boolean>>)
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.SearchQueryModel(System.Int32, SearchRequestDto, Microsoft.AspNetCore.Http.HttpRequest, System.Linq.Expressions.Expression<Func<TEntity, System.Boolean>>, System.Linq.Expressions.Expression<Func<TEntity, System.Boolean>>)
  type: Constructor
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: .ctor
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 47
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: public SearchQueryModel(int tenantId, SearchRequestDto request, HttpRequest httpRequest, Expression<Func<TEntity, bool>> andPredicate = null, Expression<Func<TEntity, bool>> orPredicate = null)
    parameters:
    - id: tenantId
      type: System.Int32
    - id: request
      type: SearchRequestDto
    - id: httpRequest
      type: Microsoft.AspNetCore.Http.HttpRequest
    - id: andPredicate
      type: System.Linq.Expressions.Expression{Func{{TEntity},System.Boolean}}
    - id: orPredicate
      type: System.Linq.Expressions.Expression{Func{{TEntity},System.Boolean}}
    content.vb: Public Sub New(tenantId As Integer, request As SearchRequestDto, httpRequest As HttpRequest, andPredicate As Expression(Of Func(Of TEntity, Boolean)) = Nothing, orPredicate As Expression(Of Func(Of TEntity, Boolean)) = Nothing)
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.#ctor*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).SearchQueryModel(Int32, SearchRequestDto, HttpRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).SearchQueryModel(System.Int32, SearchRequestDto, Microsoft.AspNetCore.Http.HttpRequest, System.Linq.Expressions.Expression(Of Func(Of TEntity, System.Boolean)), System.Linq.Expressions.Expression(Of Func(Of TEntity, System.Boolean)))
  name.vb: SearchQueryModel(Int32, SearchRequestDto, HttpRequest, Expression(Of Func(Of TEntity, Boolean)), Expression(Of Func(Of TEntity, Boolean)))
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.BuildAndPredicate(SearchRequestDto,Microsoft.AspNetCore.Http.HttpRequest)
  commentId: M:Mix.Lib.Models.Common.SearchQueryModel`2.BuildAndPredicate(SearchRequestDto,Microsoft.AspNetCore.Http.HttpRequest)
  id: BuildAndPredicate(SearchRequestDto,Microsoft.AspNetCore.Http.HttpRequest)
  parent: Mix.Lib.Models.Common.SearchQueryModel`2
  langs:
  - csharp
  - vb
  name: BuildAndPredicate(SearchRequestDto, HttpRequest)
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.BuildAndPredicate(SearchRequestDto, HttpRequest)
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.BuildAndPredicate(SearchRequestDto, Microsoft.AspNetCore.Http.HttpRequest)
  type: Method
  source:
    remote:
      path: src/platform/mix.library/Models/Common/SearchQueryModel.cs
      branch: develop
      repo: https://github.com/mixcore/mix.core.git
    id: BuildAndPredicate
    path: ../../mix.core/src/platform/mix.library/Models/Common/SearchQueryModel.cs
    startLine: 97
  assemblies:
  - mix.library
  namespace: Mix.Lib.Models.Common
  syntax:
    content: protected virtual void BuildAndPredicate(SearchRequestDto req, HttpRequest request)
    parameters:
    - id: req
      type: SearchRequestDto
    - id: request
      type: Microsoft.AspNetCore.Http.HttpRequest
    content.vb: Protected Overridable Sub BuildAndPredicate(req As SearchRequestDto, request As HttpRequest)
  overload: Mix.Lib.Models.Common.SearchQueryModel`2.BuildAndPredicate*
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).BuildAndPredicate(SearchRequestDto, HttpRequest)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).BuildAndPredicate(SearchRequestDto, Microsoft.AspNetCore.Http.HttpRequest)
references:
- uid: Mix.Lib.Models.Common
  commentId: N:Mix.Lib.Models.Common
  name: Mix.Lib.Models.Common
  nameWithType: Mix.Lib.Models.Common
  fullName: Mix.Lib.Models.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Keyword*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.Keyword
  name: Keyword
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Keyword
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Keyword
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Keyword
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Keyword
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Culture*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.Culture
  name: Culture
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Culture
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Culture
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Culture
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Culture
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.FromDate*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.FromDate
  name: FromDate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.FromDate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.FromDate
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).FromDate
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).FromDate
- uid: System.Nullable{DateTime}
  commentId: T:System.Nullable{DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.ToDate*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.ToDate
  name: ToDate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.ToDate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.ToDate
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).ToDate
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).ToDate
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Status*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.Status
  name: Status
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Status
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Status
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Status
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Status
- uid: System.Nullable{MixContentStatus}
  commentId: T:System.Nullable{MixContentStatus}
  parent: System
  definition: System.Nullable`1
  name: Nullable<MixContentStatus>
  nameWithType: Nullable<MixContentStatus>
  fullName: System.Nullable<MixContentStatus>
  nameWithType.vb: Nullable(Of MixContentStatus)
  fullName.vb: System.Nullable(Of MixContentStatus)
  name.vb: Nullable(Of MixContentStatus)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MixContentStatus
    name: MixContentStatus
    nameWithType: MixContentStatus
    fullName: MixContentStatus
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MixContentStatus
    name: MixContentStatus
    nameWithType: MixContentStatus
    fullName: MixContentStatus
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.SearchMethod*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.SearchMethod
  name: SearchMethod
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.SearchMethod
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.SearchMethod
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).SearchMethod
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).SearchMethod
- uid: System.Nullable{ExpressionMethod}
  commentId: T:System.Nullable{ExpressionMethod}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ExpressionMethod>
  nameWithType: Nullable<ExpressionMethod>
  fullName: System.Nullable<ExpressionMethod>
  nameWithType.vb: Nullable(Of ExpressionMethod)
  fullName.vb: System.Nullable(Of ExpressionMethod)
  name.vb: Nullable(Of ExpressionMethod)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ExpressionMethod
    name: ExpressionMethod
    nameWithType: ExpressionMethod
    fullName: ExpressionMethod
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ExpressionMethod
    name: ExpressionMethod
    nameWithType: ExpressionMethod
    fullName: ExpressionMethod
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Columns*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.Columns
  name: Columns
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Columns
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Columns
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Columns
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Columns
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.SearchColumns*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.SearchColumns
  name: SearchColumns
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.SearchColumns
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.SearchColumns
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).SearchColumns
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).SearchColumns
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.MixTenantId*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.MixTenantId
  name: MixTenantId
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.MixTenantId
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.MixTenantId
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).MixTenantId
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).MixTenantId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.PagingData*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.PagingData
  name: PagingData
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.PagingData
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.PagingData
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).PagingData
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).PagingData
- uid: Mix.Shared.Models.PagingRequestModel
  commentId: T:Mix.Shared.Models.PagingRequestModel
  parent: Mix.Shared.Models
  name: PagingRequestModel
  nameWithType: PagingRequestModel
  fullName: Mix.Shared.Models.PagingRequestModel
- uid: Mix.Shared.Models
  commentId: N:Mix.Shared.Models
  name: Mix.Shared.Models
  nameWithType: Mix.Shared.Models
  fullName: Mix.Shared.Models
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.Predicate*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.Predicate
  name: Predicate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.Predicate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.Predicate
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).Predicate
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).Predicate
- uid: System.Linq.Expressions.Expression{Func{{TEntity},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{Func{`1,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Boolean>>
  nameWithType: Expression<Func<TEntity, Boolean>>
  fullName: System.Linq.Expressions.Expression<Func<TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of Func(Of TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TEntity, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.AndPredicate*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.AndPredicate
  name: AndPredicate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.AndPredicate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.AndPredicate
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).AndPredicate
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).AndPredicate
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.OrPredicate*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.OrPredicate
  name: OrPredicate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.OrPredicate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.OrPredicate
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).OrPredicate
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).OrPredicate
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.#ctor*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.#ctor
  name: SearchQueryModel
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.SearchQueryModel
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.SearchQueryModel
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).SearchQueryModel
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).SearchQueryModel
- uid: Microsoft.AspNetCore.Http.HttpRequest
  commentId: T:Microsoft.AspNetCore.Http.HttpRequest
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: Microsoft.AspNetCore.Http.HttpRequest
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: true
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: SearchRequestDto
  isExternal: true
  name: SearchRequestDto
  nameWithType: SearchRequestDto
  fullName: SearchRequestDto
- uid: Mix.Lib.Models.Common.SearchQueryModel`2.BuildAndPredicate*
  commentId: Overload:Mix.Lib.Models.Common.SearchQueryModel`2.BuildAndPredicate
  name: BuildAndPredicate
  nameWithType: SearchQueryModel<TEntity, TPrimaryKey>.BuildAndPredicate
  fullName: Mix.Lib.Models.Common.SearchQueryModel<TEntity, TPrimaryKey>.BuildAndPredicate
  nameWithType.vb: SearchQueryModel(Of TEntity, TPrimaryKey).BuildAndPredicate
  fullName.vb: Mix.Lib.Models.Common.SearchQueryModel(Of TEntity, TPrimaryKey).BuildAndPredicate
